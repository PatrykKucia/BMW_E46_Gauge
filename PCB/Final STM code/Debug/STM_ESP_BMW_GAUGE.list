
STM_ESP_BMW_GAUGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d53c  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800d794  0800d794  0000e794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d94c  0800d94c  0000f0ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d94c  0800d94c  0000e94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d954  0800d954  0000f0ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d954  0800d954  0000e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d958  0800d958  0000e958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  0800d95c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  200000ec  0800da48  0000f0ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  0800da48  0000f6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f0ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020985  00000000  00000000  0000f122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b08  00000000  00000000  0002faa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  000335b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001492  00000000  00000000  00034ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6cb  00000000  00000000  0003648a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002429a  00000000  00000000  00064b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120c45  00000000  00000000  00088def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a9a34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007998  00000000  00000000  001a9a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001b1410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200000ec 	.word	0x200000ec
 8000274:	00000000 	.word	0x00000000
 8000278:	0800d77c 	.word	0x0800d77c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200000f0 	.word	0x200000f0
 8000294:	0800d77c 	.word	0x0800d77c

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b97e 	b.w	8000e38 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b58:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14d      	bne.n	8000bfc <__udivmoddi4+0xa8>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	460f      	mov	r7, r1
 8000b64:	4684      	mov	ip, r0
 8000b66:	4696      	mov	lr, r2
 8000b68:	fab2 f382 	clz	r3, r2
 8000b6c:	d960      	bls.n	8000c30 <__udivmoddi4+0xdc>
 8000b6e:	b14b      	cbz	r3, 8000b84 <__udivmoddi4+0x30>
 8000b70:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b74:	f1c3 0220 	rsb	r2, r3, #32
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b82:	4317      	orrs	r7, r2
 8000b84:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000b88:	fa1f f48e 	uxth.w	r4, lr
 8000b8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b90:	fbb7 f1f6 	udiv	r1, r7, r6
 8000b94:	fb06 7711 	mls	r7, r6, r1, r7
 8000b98:	fb01 f004 	mul.w	r0, r1, r4
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000ba4:	eb1e 0202 	adds.w	r2, lr, r2
 8000ba8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bac:	d202      	bcs.n	8000bb4 <__udivmoddi4+0x60>
 8000bae:	4290      	cmp	r0, r2
 8000bb0:	f200 812d 	bhi.w	8000e0e <__udivmoddi4+0x2ba>
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	1a12      	subs	r2, r2, r0
 8000bb8:	fa1f fc8c 	uxth.w	ip, ip
 8000bbc:	fbb2 f0f6 	udiv	r0, r2, r6
 8000bc0:	fb06 2210 	mls	r2, r6, r0, r2
 8000bc4:	fb00 f404 	mul.w	r4, r0, r4
 8000bc8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000bcc:	4564      	cmp	r4, ip
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x8e>
 8000bd0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x8c>
 8000bda:	4564      	cmp	r4, ip
 8000bdc:	f200 811a 	bhi.w	8000e14 <__udivmoddi4+0x2c0>
 8000be0:	4610      	mov	r0, r2
 8000be2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be6:	ebac 0c04 	sub.w	ip, ip, r4
 8000bea:	2100      	movs	r1, #0
 8000bec:	b125      	cbz	r5, 8000bf8 <__udivmoddi4+0xa4>
 8000bee:	fa2c f303 	lsr.w	r3, ip, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d905      	bls.n	8000c0c <__udivmoddi4+0xb8>
 8000c00:	b10d      	cbz	r5, 8000c06 <__udivmoddi4+0xb2>
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	2100      	movs	r1, #0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e7f5      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c0c:	fab3 f183 	clz	r1, r3
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d14d      	bne.n	8000cb0 <__udivmoddi4+0x15c>
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	f0c0 80f2 	bcc.w	8000dfe <__udivmoddi4+0x2aa>
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	f080 80ef 	bcs.w	8000dfe <__udivmoddi4+0x2aa>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e6      	beq.n	8000bf8 <__udivmoddi4+0xa4>
 8000c2a:	e9c5 6300 	strd	r6, r3, [r5]
 8000c2e:	e7e3      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 80a2 	bne.w	8000d7a <__udivmoddi4+0x226>
 8000c36:	1a8a      	subs	r2, r1, r2
 8000c38:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c3c:	fa1f f68e 	uxth.w	r6, lr
 8000c40:	2101      	movs	r1, #1
 8000c42:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c46:	fb07 2014 	mls	r0, r7, r4, r2
 8000c4a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c52:	fb06 f004 	mul.w	r0, r6, r4
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d90f      	bls.n	8000c7a <__udivmoddi4+0x126>
 8000c5a:	eb1e 0202 	adds.w	r2, lr, r2
 8000c5e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000c62:	bf2c      	ite	cs
 8000c64:	f04f 0901 	movcs.w	r9, #1
 8000c68:	f04f 0900 	movcc.w	r9, #0
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d903      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c70:	f1b9 0f00 	cmp.w	r9, #0
 8000c74:	f000 80c8 	beq.w	8000e08 <__udivmoddi4+0x2b4>
 8000c78:	4644      	mov	r4, r8
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	fa1f fc8c 	uxth.w	ip, ip
 8000c80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c84:	fb07 2210 	mls	r2, r7, r0, r2
 8000c88:	fb00 f606 	mul.w	r6, r0, r6
 8000c8c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c90:	4566      	cmp	r6, ip
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x152>
 8000c94:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x150>
 8000c9e:	4566      	cmp	r6, ip
 8000ca0:	f200 80bb 	bhi.w	8000e1a <__udivmoddi4+0x2c6>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	ebac 0c06 	sub.w	ip, ip, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	e79d      	b.n	8000bec <__udivmoddi4+0x98>
 8000cb0:	f1c1 0620 	rsb	r6, r1, #32
 8000cb4:	408b      	lsls	r3, r1
 8000cb6:	fa04 fe01 	lsl.w	lr, r4, r1
 8000cba:	fa22 f706 	lsr.w	r7, r2, r6
 8000cbe:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cc2:	40f4      	lsrs	r4, r6
 8000cc4:	408a      	lsls	r2, r1
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	ea4e 030c 	orr.w	r3, lr, ip
 8000ccc:	fa00 fe01 	lsl.w	lr, r0, r1
 8000cd0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce0:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce8:	fb00 f90c 	mul.w	r9, r0, ip
 8000cec:	45a1      	cmp	r9, r4
 8000cee:	d90e      	bls.n	8000d0e <__udivmoddi4+0x1ba>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cf6:	bf2c      	ite	cs
 8000cf8:	f04f 0b01 	movcs.w	fp, #1
 8000cfc:	f04f 0b00 	movcc.w	fp, #0
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d903      	bls.n	8000d0c <__udivmoddi4+0x1b8>
 8000d04:	f1bb 0f00 	cmp.w	fp, #0
 8000d08:	f000 8093 	beq.w	8000e32 <__udivmoddi4+0x2de>
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	eba4 0409 	sub.w	r4, r4, r9
 8000d12:	fa1f f983 	uxth.w	r9, r3
 8000d16:	fbb4 f3f8 	udiv	r3, r4, r8
 8000d1a:	fb08 4413 	mls	r4, r8, r3, r4
 8000d1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d906      	bls.n	8000d38 <__udivmoddi4+0x1e4>
 8000d2a:	193c      	adds	r4, r7, r4
 8000d2c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d30:	d201      	bcs.n	8000d36 <__udivmoddi4+0x1e2>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d87a      	bhi.n	8000e2c <__udivmoddi4+0x2d8>
 8000d36:	4643      	mov	r3, r8
 8000d38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	fba0 9802 	umull	r9, r8, r0, r2
 8000d44:	4544      	cmp	r4, r8
 8000d46:	46cc      	mov	ip, r9
 8000d48:	4643      	mov	r3, r8
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0x1fe>
 8000d4c:	d106      	bne.n	8000d5c <__udivmoddi4+0x208>
 8000d4e:	45ce      	cmp	lr, r9
 8000d50:	d204      	bcs.n	8000d5c <__udivmoddi4+0x208>
 8000d52:	3801      	subs	r0, #1
 8000d54:	ebb9 0c02 	subs.w	ip, r9, r2
 8000d58:	eb68 0307 	sbc.w	r3, r8, r7
 8000d5c:	b15d      	cbz	r5, 8000d76 <__udivmoddi4+0x222>
 8000d5e:	ebbe 020c 	subs.w	r2, lr, ip
 8000d62:	eb64 0403 	sbc.w	r4, r4, r3
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	431e      	orrs	r6, r3
 8000d72:	e9c5 6400 	strd	r6, r4, [r5]
 8000d76:	2100      	movs	r1, #0
 8000d78:	e73e      	b.n	8000bf8 <__udivmoddi4+0xa4>
 8000d7a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d7e:	f1c3 0120 	rsb	r1, r3, #32
 8000d82:	fa04 f203 	lsl.w	r2, r4, r3
 8000d86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d8a:	40cc      	lsrs	r4, r1
 8000d8c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d90:	fa20 f101 	lsr.w	r1, r0, r1
 8000d94:	fa1f f68e 	uxth.w	r6, lr
 8000d98:	fbb4 f0f7 	udiv	r0, r4, r7
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	fb07 4410 	mls	r4, r7, r0, r4
 8000da2:	0c11      	lsrs	r1, r2, #16
 8000da4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000da8:	fb00 f406 	mul.w	r4, r0, r6
 8000dac:	428c      	cmp	r4, r1
 8000dae:	d90e      	bls.n	8000dce <__udivmoddi4+0x27a>
 8000db0:	eb1e 0101 	adds.w	r1, lr, r1
 8000db4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0901 	movcs.w	r9, #1
 8000dbe:	f04f 0900 	movcc.w	r9, #0
 8000dc2:	428c      	cmp	r4, r1
 8000dc4:	d902      	bls.n	8000dcc <__udivmoddi4+0x278>
 8000dc6:	f1b9 0f00 	cmp.w	r9, #0
 8000dca:	d02c      	beq.n	8000e26 <__udivmoddi4+0x2d2>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	1b09      	subs	r1, r1, r4
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dde:	fb04 f106 	mul.w	r1, r4, r6
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x2a2>
 8000de6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dee:	d201      	bcs.n	8000df4 <__udivmoddi4+0x2a0>
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d815      	bhi.n	8000e20 <__udivmoddi4+0x2cc>
 8000df4:	4644      	mov	r4, r8
 8000df6:	1a52      	subs	r2, r2, r1
 8000df8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000dfc:	e721      	b.n	8000c42 <__udivmoddi4+0xee>
 8000dfe:	1a86      	subs	r6, r0, r2
 8000e00:	eb64 0303 	sbc.w	r3, r4, r3
 8000e04:	2001      	movs	r0, #1
 8000e06:	e70e      	b.n	8000c26 <__udivmoddi4+0xd2>
 8000e08:	3c02      	subs	r4, #2
 8000e0a:	4472      	add	r2, lr
 8000e0c:	e735      	b.n	8000c7a <__udivmoddi4+0x126>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4472      	add	r2, lr
 8000e12:	e6d0      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000e14:	44f4      	add	ip, lr
 8000e16:	3802      	subs	r0, #2
 8000e18:	e6e3      	b.n	8000be2 <__udivmoddi4+0x8e>
 8000e1a:	44f4      	add	ip, lr
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e742      	b.n	8000ca6 <__udivmoddi4+0x152>
 8000e20:	3c02      	subs	r4, #2
 8000e22:	4472      	add	r2, lr
 8000e24:	e7e7      	b.n	8000df6 <__udivmoddi4+0x2a2>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4471      	add	r1, lr
 8000e2a:	e7d0      	b.n	8000dce <__udivmoddi4+0x27a>
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e782      	b.n	8000d38 <__udivmoddi4+0x1e4>
 8000e32:	3802      	subs	r0, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	e76a      	b.n	8000d0e <__udivmoddi4+0x1ba>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e42:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e44:	4a30      	ldr	r2, [pc, #192]	@ (8000f08 <MX_FDCAN1_Init+0xcc>)
 8000e46:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e7a:	220b      	movs	r2, #11
 8000e7c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eb0:	f002 ff8c 	bl	8003dcc <HAL_FDCAN_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000eba:	f001 f819 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterIndex = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x316;
 8000eca:	f240 3316 	movw	r3, #790	@ 0x316
 8000ece:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x1FFFFFFF;
 8000ed0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8000ed4:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000edc:	f003 f8d0 	bl	8004080 <HAL_FDCAN_ConfigFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <MX_FDCAN1_Init+0xb0>
	/* Filter configuration Error */
		printf("[CAN] Unable to configure!\n");
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_FDCAN1_Init+0xd0>)
 8000ee8:	f00b fdd2 	bl	800ca90 <puts>
	}
	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_FDCAN1_Init+0xc8>)
 8000eee:	f003 f921 	bl	8004134 <HAL_FDCAN_Start>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_FDCAN1_Init+0xc0>
	{
		Error_Handler();
 8000ef8:	f000 fffa 	bl	8001ef0 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000108 	.word	0x20000108
 8000f08:	4000a400 	.word	0x4000a400
 8000f0c:	0800d794 	.word	0x0800d794

08000f10 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0be      	sub	sp, #248	@ 0xf8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	22d0      	movs	r2, #208	@ 0xd0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b fe8d 	bl	800cc50 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <HAL_FDCAN_MspInit+0xe8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d156      	bne.n	8000fee <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0304 	mov.w	r3, #4
 8000f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 f894 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000f62:	f000 ffc5 	bl	8001ef0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f6c:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f72:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_FDCAN_MspInit+0xec>)
 8000f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <HAL_FDCAN_MspInit+0xf0>)
 8000fca:	f003 fb97 	bl	80046fc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2027      	movs	r0, #39	@ 0x27
 8000fd4:	f001 fee6 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fd8:	2027      	movs	r0, #39	@ 0x27
 8000fda:	f001 fefd 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f001 fede 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f001 fef5 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	37f8      	adds	r7, #248	@ 0xf8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	4000a400 	.word	0x4000a400
 8000ffc:	44020c00 	.word	0x44020c00
 8001000:	42020000 	.word	0x42020000

08001004 <InitCANFrames>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void InitCANFrames() {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
    for (int i = 0; i < FRAME_COUNT; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	e041      	b.n	8001094 <InitCANFrames+0x90>
        frames[i].header.IdType = FDCAN_STANDARD_ID;
 8001010:	4a25      	ldr	r2, [pc, #148]	@ (80010a8 <InitCANFrames+0xa4>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	212c      	movs	r1, #44	@ 0x2c
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
        frames[i].header.TxFrameType = FDCAN_DATA_FRAME;
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <InitCANFrames+0xa4>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	212c      	movs	r1, #44	@ 0x2c
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	4413      	add	r3, r2
 800102e:	3308      	adds	r3, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
        frames[i].header.DataLength = FDCAN_DLC_BYTES_8;
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <InitCANFrames+0xa4>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	212c      	movs	r1, #44	@ 0x2c
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	330c      	adds	r3, #12
 8001042:	2208      	movs	r2, #8
 8001044:	601a      	str	r2, [r3, #0]
        frames[i].header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <InitCANFrames+0xa4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	212c      	movs	r1, #44	@ 0x2c
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	3310      	adds	r3, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
        frames[i].header.BitRateSwitch = FDCAN_BRS_OFF;
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <InitCANFrames+0xa4>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	212c      	movs	r1, #44	@ 0x2c
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3314      	adds	r3, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
        frames[i].header.FDFormat = FDCAN_CLASSIC_CAN;
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <InitCANFrames+0xa4>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	212c      	movs	r1, #44	@ 0x2c
 8001070:	fb01 f303 	mul.w	r3, r1, r3
 8001074:	4413      	add	r3, r2
 8001076:	3318      	adds	r3, #24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        frames[i].header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <InitCANFrames+0xa4>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	212c      	movs	r1, #44	@ 0x2c
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	331c      	adds	r3, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FRAME_COUNT; i++) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	ddba      	ble.n	8001010 <InitCANFrames+0xc>
    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000

080010ac <SendCANFrame>:

void SendCANFrame(CAN_FrameIndex frameIndex) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    if (frameIndex >= FRAME_COUNT) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d903      	bls.n	80010c4 <SendCANFrame+0x18>
    	printf("Over can frames index");
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <SendCANFrame+0x44>)
 80010be:	f00b fc7f 	bl	800c9c0 <iprintf>
        return; // todo add error
 80010c2:	e011      	b.n	80010e8 <SendCANFrame+0x3c>

    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frames[frameIndex].header, frames[frameIndex].data);
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	222c      	movs	r2, #44	@ 0x2c
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <SendCANFrame+0x48>)
 80010ce:	1899      	adds	r1, r3, r2
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	222c      	movs	r2, #44	@ 0x2c
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	3320      	adds	r3, #32
 80010da:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <SendCANFrame+0x48>)
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	461a      	mov	r2, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <SendCANFrame+0x4c>)
 80010e4:	f003 f84e 	bl	8004184 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800d7b0 	.word	0x0800d7b0
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000108 	.word	0x20000108

080010fc <modify_can_frame_byte>:

void modify_can_frame_byte(uint8_t frameIndex,uint8_t byte_num, uint8_t value)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	460b      	mov	r3, r1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	//todo add wrong index error
   if (frameIndex >= FRAME_COUNT) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d903      	bls.n	800111c <modify_can_frame_byte+0x20>
		printf("Over can frames index");
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <modify_can_frame_byte+0x4c>)
 8001116:	f00b fc53 	bl	800c9c0 <iprintf>
		return; // todo add error
 800111a:	e011      	b.n	8001140 <modify_can_frame_byte+0x44>
   }

   if (byte_num > 8) {
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d903      	bls.n	800112a <modify_can_frame_byte+0x2e>
	   printf("Wrong byte index");
 8001122:	480a      	ldr	r0, [pc, #40]	@ (800114c <modify_can_frame_byte+0x50>)
 8001124:	f00b fc4c 	bl	800c9c0 <iprintf>
       return;
 8001128:	e00a      	b.n	8001140 <modify_can_frame_byte+0x44>
   }
	frames[frameIndex].data[byte_num] = value;
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4908      	ldr	r1, [pc, #32]	@ (8001150 <modify_can_frame_byte+0x54>)
 8001130:	202c      	movs	r0, #44	@ 0x2c
 8001132:	fb00 f202 	mul.w	r2, r0, r2
 8001136:	440a      	add	r2, r1
 8001138:	4413      	add	r3, r2
 800113a:	3324      	adds	r3, #36	@ 0x24
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	701a      	strb	r2, [r3, #0]
}
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0800d7b0 	.word	0x0800d7b0
 800114c:	0800d7c8 	.word	0x0800d7c8
 8001150:	20000000 	.word	0x20000000

08001154 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800115c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001160:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_GPDMA1_Init+0x3c>)
 800116c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 1, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	201b      	movs	r0, #27
 800117e:	f001 fe11 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001182:	201b      	movs	r0, #27
 8001184:	f001 fe28 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	44020c00 	.word	0x44020c00

08001194 <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b0:	4a44      	ldr	r2, [pc, #272]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ba:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c8:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ce:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011d8:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ec:	4a35      	ldr	r2, [pc, #212]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011f6:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <MX_GPIO_Init+0x130>)
 80011f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0x130>)
 8001206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120a:	4a2e      	ldr	r2, [pc, #184]	@ (80012c4 <MX_GPIO_Init+0x130>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001214:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <MX_GPIO_Init+0x130>)
 8001216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001228:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800122a:	f003 fbb9 	bl	80049a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800122e:	2200      	movs	r2, #0
 8001230:	f248 41f0 	movw	r1, #34032	@ 0x84f0
 8001234:	4825      	ldr	r0, [pc, #148]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001236:	f003 fbb3 	bl	80049a0 <HAL_GPIO_WritePin>
                          |TRCVR_MODE_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800123a:	2200      	movs	r2, #0
 800123c:	f243 413e 	movw	r1, #13374	@ 0x343e
 8001240:	4823      	ldr	r0, [pc, #140]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 8001242:	f003 fbad 	bl	80049a0 <HAL_GPIO_WritePin>
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : STM_ESP_Pin */
  GPIO_InitStruct.Pin = STM_ESP_Pin;
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM_ESP_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800125c:	f003 fa4e 	bl	80046fc <HAL_GPIO_Init>

  /*Configure GPIO pin : K_BUS_SLP_Pin */
  GPIO_InitStruct.Pin = K_BUS_SLP_Pin;
 8001260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K_BUS_SLP_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4813      	ldr	r0, [pc, #76]	@ (80012c8 <MX_GPIO_Init+0x134>)
 800127a:	f003 fa3f 	bl	80046fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BACKLIGHT_Pin BATT_CHARGE_LIGHT_Pin OIL_LIGHT_Pin BRAKE_FLU_LIGHT_Pin
                           TRCVR_MODE_Pin D3_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_Pin|BATT_CHARGE_LIGHT_Pin|OIL_LIGHT_Pin|BRAKE_FLU_LIGHT_Pin
 800127e:	f248 43f0 	movw	r3, #34032	@ 0x84f0
 8001282:	617b      	str	r3, [r7, #20]
                          |TRCVR_MODE_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_GPIO_Init+0x138>)
 8001298:	f003 fa30 	bl	80046fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_Pin PARKING_BRAKE_Pin BRAKE_WEAR_SENS_Pin COOLANT_LVL_SENS_Pin
                           WASHER_FLU_LVL_Pin D2_Pin D1_Pin Fuel_HVC_Pin */
  GPIO_InitStruct.Pin = ABS_Pin|PARKING_BRAKE_Pin|BRAKE_WEAR_SENS_Pin|COOLANT_LVL_SENS_Pin
 800129c:	f243 433e 	movw	r3, #13374	@ 0x343e
 80012a0:	617b      	str	r3, [r7, #20]
                          |WASHER_FLU_LVL_Pin|D2_Pin|D1_Pin|Fuel_HVC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <MX_GPIO_Init+0x13c>)
 80012b6:	f003 fa21 	bl	80046fc <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	44020c00 	.word	0x44020c00
 80012c8:	42020800 	.word	0x42020800
 80012cc:	42020000 	.word	0x42020000
 80012d0:	42020400 	.word	0x42020400

080012d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012da:	4a1c      	ldr	r2, [pc, #112]	@ (800134c <MX_I2C1_Init+0x78>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80012de:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <MX_I2C1_Init+0x7c>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_I2C1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130e:	480e      	ldr	r0, [pc, #56]	@ (8001348 <MX_I2C1_Init+0x74>)
 8001310:	f003 fb78 	bl	8004a04 <HAL_I2C_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800131a:	f000 fde9 	bl	8001ef0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4809      	ldr	r0, [pc, #36]	@ (8001348 <MX_I2C1_Init+0x74>)
 8001322:	f003 fe6d 	bl	8005000 <HAL_I2CEx_ConfigAnalogFilter>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800132c:	f000 fde0 	bl	8001ef0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_I2C1_Init+0x74>)
 8001334:	f003 feaf 	bl	8005096 <HAL_I2CEx_ConfigDigitalFilter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800133e:	f000 fdd7 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000016c 	.word	0x2000016c
 800134c:	40005400 	.word	0x40005400
 8001350:	60808cd3 	.word	0x60808cd3

08001354 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0be      	sub	sp, #248	@ 0xf8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	22d0      	movs	r2, #208	@ 0xd0
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f00b fc6b 	bl	800cc50 <memset>
  if(i2cHandle->Instance==I2C1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a26      	ldr	r2, [pc, #152]	@ (8001418 <HAL_I2C_MspInit+0xc4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d145      	bne.n	8001410 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fe72 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013a6:	f000 fda3 	bl	8001ef0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b0:	4a1a      	ldr	r2, [pc, #104]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c8:	23c0      	movs	r3, #192	@ 0xc0
 80013ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013e0:	2304      	movs	r3, #4
 80013e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <HAL_I2C_MspInit+0xcc>)
 80013ee:	f003 f985 	bl	80046fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013f8:	4a08      	ldr	r2, [pc, #32]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 80013fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_I2C_MspInit+0xc8>)
 8001404:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001410:	bf00      	nop
 8001412:	37f8      	adds	r7, #248	@ 0xf8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40005400 	.word	0x40005400
 800141c:	44020c00 	.word	0x44020c00
 8001420:	42020400 	.word	0x42020400

08001424 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001428:	2000      	movs	r0, #0
 800142a:	f003 fe81 	bl	8005130 <HAL_ICACHE_ConfigAssociativityMode>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001434:	f000 fd5c 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001438:	f003 fe9a 	bl	8005170 <HAL_ICACHE_Enable>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001442:	f000 fd55 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <__io_putchar>:
    data[2] = tcon_value & 0xFF;         // Pozostałe 8 bitów

    HAL_I2C_Master_Transmit(hi2c, MCP4662_ADDR_WRITE, data, 3, HAL_MAX_DELAY);
}
int __io_putchar(int ch) //function used to print() in usart
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b0a      	cmp	r3, #10
 8001458:	d102      	bne.n	8001460 <__io_putchar+0x14>
    __io_putchar('\r');
 800145a:	200d      	movs	r0, #13
 800145c:	f7ff fff6 	bl	800144c <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001460:	1d39      	adds	r1, r7, #4
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	2201      	movs	r2, #1
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <__io_putchar+0x2c>)
 800146a:	f009 fea1 	bl	800b1b0 <HAL_UART_Transmit>

  return 1;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000400 	.word	0x20000400

0800147c <ESP32_SendCommand>:
     else
     {
         printf("Błąd ustawiania rezystancji\r\n");
     }
}
void ESP32_SendCommand(const char* command) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7fe ff07 	bl	8000298 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4808      	ldr	r0, [pc, #32]	@ (80014b8 <ESP32_SendCommand+0x3c>)
 8001496:	f009 fe8b 	bl	800b1b0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Końcówka komendy AT
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	2202      	movs	r2, #2
 80014a0:	4906      	ldr	r1, [pc, #24]	@ (80014bc <ESP32_SendCommand+0x40>)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <ESP32_SendCommand+0x3c>)
 80014a4:	f009 fe84 	bl	800b1b0 <HAL_UART_Transmit>
    HAL_Delay(100);  // Czekaj na odpowiedź
 80014a8:	2064      	movs	r0, #100	@ 0x64
 80014aa:	f001 fb9f 	bl	8002bec <HAL_Delay>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000400 	.word	0x20000400
 80014bc:	0800d848 	.word	0x0800d848

080014c0 <I2C_Scan>:


void I2C_Scan()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
    printf("Skanowanie I2C...\r\n");
 80014c6:	4811      	ldr	r0, [pc, #68]	@ (800150c <I2C_Scan+0x4c>)
 80014c8:	f00b fae2 	bl	800ca90 <puts>
    for (uint8_t addr = 1; addr < 127; addr++)
 80014cc:	2301      	movs	r3, #1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	e013      	b.n	80014fa <I2C_Scan+0x3a>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c1, (addr << 1), 1, 100) == HAL_OK)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	b299      	uxth	r1, r3
 80014da:	2364      	movs	r3, #100	@ 0x64
 80014dc:	2201      	movs	r2, #1
 80014de:	480c      	ldr	r0, [pc, #48]	@ (8001510 <I2C_Scan+0x50>)
 80014e0:	f003 fb2b 	bl	8004b3a <HAL_I2C_IsDeviceReady>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d104      	bne.n	80014f4 <I2C_Scan+0x34>
        {
            printf("Znaleziono urządzenie na adresie: 0x%X\r\n", addr);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4809      	ldr	r0, [pc, #36]	@ (8001514 <I2C_Scan+0x54>)
 80014f0:	f00b fa66 	bl	800c9c0 <iprintf>
    for (uint8_t addr = 1; addr < 127; addr++)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	3301      	adds	r3, #1
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b7e      	cmp	r3, #126	@ 0x7e
 80014fe:	d9e8      	bls.n	80014d2 <I2C_Scan+0x12>
        }
    }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	0800d84c 	.word	0x0800d84c
 8001510:	2000016c 	.word	0x2000016c
 8001514:	0800d860 	.word	0x0800d860

08001518 <InitAnalogIndicators>:

void InitAnalogIndicators(){
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(K_BUS_SLP_GPIO_Port, K_BUS_SLP_Pin, SET); //turn off k-bus tranciver sleep mode
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001522:	481d      	ldr	r0, [pc, #116]	@ (8001598 <InitAnalogIndicators+0x80>)
 8001524:	f003 fa3c 	bl	80049a0 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(WASHER_FLU_LVL_GPIO_Port, WASHER_FLU_LVL_Pin, SET); // SET to off
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800152e:	481b      	ldr	r0, [pc, #108]	@ (800159c <InitAnalogIndicators+0x84>)
 8001530:	f003 fa36 	bl	80049a0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(COOLANT_LVL_SENS_GPIO_Port, COOLANT_LVL_SENS_Pin, SET); //SET to off
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800153a:	4818      	ldr	r0, [pc, #96]	@ (800159c <InitAnalogIndicators+0x84>)
 800153c:	f003 fa30 	bl	80049a0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_WEAR_SENS_GPIO_Port, BRAKE_WEAR_SENS_Pin, SET);//SET to off
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001546:	4815      	ldr	r0, [pc, #84]	@ (800159c <InitAnalogIndicators+0x84>)
 8001548:	f003 fa2a 	bl	80049a0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 800154c:	2200      	movs	r2, #0
 800154e:	2104      	movs	r1, #4
 8001550:	4812      	ldr	r0, [pc, #72]	@ (800159c <InitAnalogIndicators+0x84>)
 8001552:	f003 fa25 	bl	80049a0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);//SET to off temp
 8001556:	2201      	movs	r2, #1
 8001558:	2102      	movs	r1, #2
 800155a:	4810      	ldr	r0, [pc, #64]	@ (800159c <InitAnalogIndicators+0x84>)
 800155c:	f003 fa20 	bl	80049a0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BRAKE_FLU_LIGHT_GPIO_Port, BRAKE_FLU_LIGHT_Pin, SET);//SET to off
 8001560:	2201      	movs	r2, #1
 8001562:	2180      	movs	r1, #128	@ 0x80
 8001564:	480e      	ldr	r0, [pc, #56]	@ (80015a0 <InitAnalogIndicators+0x88>)
 8001566:	f003 fa1b 	bl	80049a0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET);//RESET to off temp
 800156a:	2200      	movs	r2, #0
 800156c:	2140      	movs	r1, #64	@ 0x40
 800156e:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <InitAnalogIndicators+0x88>)
 8001570:	f003 fa16 	bl	80049a0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);//RESET to off temp
 8001574:	2200      	movs	r2, #0
 8001576:	2120      	movs	r1, #32
 8001578:	4809      	ldr	r0, [pc, #36]	@ (80015a0 <InitAnalogIndicators+0x88>)
 800157a:	f003 fa11 	bl	80049a0 <HAL_GPIO_WritePin>

	 //HAL_GPIO_WritePin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin, RESET);//RESET to off ------------NOT WORKING
	 modify_can_frame_byte(FRAME_316, 0, 0x0D);
 800157e:	220d      	movs	r2, #13
 8001580:	2100      	movs	r1, #0
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fdba 	bl	80010fc <modify_can_frame_byte>
	 modify_can_frame_byte(FRAME_316, 1, 0xff);
 8001588:	22ff      	movs	r2, #255	@ 0xff
 800158a:	2101      	movs	r1, #1
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fdb5 	bl	80010fc <modify_can_frame_byte>


}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	42020800 	.word	0x42020800
 800159c:	42020400 	.word	0x42020400
 80015a0:	42020000 	.word	0x42020000

080015a4 <parse_frame>:
    uint16_t fuel_scaled = (uint16_t)((fuel_consumption / max_consumption) * 0xFFFF);
    return fuel_scaled;
}


void parse_frame(uint8_t *buffer) {
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]


    // Parsowanie danych z FrameBuffer do struktury FrameData
    uint8_t offset = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.time, &buffer[offset], sizeof(frame.time));
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4baf      	ldr	r3, [pc, #700]	@ (8001878 <parse_frame+0x2d4>)
 80015bc:	601a      	str	r2, [r3, #0]
    offset += sizeof(frame.time);
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3304      	adds	r3, #4
 80015c2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.car, &buffer[offset], sizeof(frame.car));
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4baa      	ldr	r3, [pc, #680]	@ (8001878 <parse_frame+0x2d4>)
 80015d0:	605a      	str	r2, [r3, #4]
    offset += sizeof(frame.car);
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3304      	adds	r3, #4
 80015d6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.flags, &buffer[offset], sizeof(frame.flags));
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4ba5      	ldr	r3, [pc, #660]	@ (8001878 <parse_frame+0x2d4>)
 80015e4:	811a      	strh	r2, [r3, #8]
    offset += sizeof(frame.flags);
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	3302      	adds	r3, #2
 80015ea:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.gear, &buffer[offset], sizeof(frame.gear));
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001878 <parse_frame+0x2d4>)
 80015f6:	729a      	strb	r2, [r3, #10]
    offset += sizeof(frame.gear);
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.plid, &buffer[offset], sizeof(frame.plid));
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b9c      	ldr	r3, [pc, #624]	@ (8001878 <parse_frame+0x2d4>)
 8001608:	72da      	strb	r2, [r3, #11]
    offset += sizeof(frame.plid);
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	3301      	adds	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.speed, &buffer[offset], sizeof(frame.speed));
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b97      	ldr	r3, [pc, #604]	@ (8001878 <parse_frame+0x2d4>)
 800161c:	60da      	str	r2, [r3, #12]
    offset += sizeof(frame.speed);
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	3304      	adds	r3, #4
 8001622:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.rpm, &buffer[offset], sizeof(frame.rpm));
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b92      	ldr	r3, [pc, #584]	@ (8001878 <parse_frame+0x2d4>)
 8001630:	611a      	str	r2, [r3, #16]
    offset += sizeof(frame.rpm);
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	3304      	adds	r3, #4
 8001636:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.turbo, &buffer[offset], sizeof(frame.turbo));
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b8d      	ldr	r3, [pc, #564]	@ (8001878 <parse_frame+0x2d4>)
 8001644:	615a      	str	r2, [r3, #20]
    offset += sizeof(frame.turbo);
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	3304      	adds	r3, #4
 800164a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.engTemp, &buffer[offset], sizeof(frame.engTemp));
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b88      	ldr	r3, [pc, #544]	@ (8001878 <parse_frame+0x2d4>)
 8001658:	619a      	str	r2, [r3, #24]
    offset += sizeof(frame.engTemp);
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	3304      	adds	r3, #4
 800165e:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.fuel, &buffer[offset], sizeof(frame.fuel));
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b83      	ldr	r3, [pc, #524]	@ (8001878 <parse_frame+0x2d4>)
 800166c:	61da      	str	r2, [r3, #28]
    offset += sizeof(frame.fuel);
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	3304      	adds	r3, #4
 8001672:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilPressure, &buffer[offset], sizeof(frame.oilPressure));
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b7e      	ldr	r3, [pc, #504]	@ (8001878 <parse_frame+0x2d4>)
 8001680:	621a      	str	r2, [r3, #32]
    offset += sizeof(frame.oilPressure);
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	3304      	adds	r3, #4
 8001686:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.oilTemp, &buffer[offset], sizeof(frame.oilTemp));
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b79      	ldr	r3, [pc, #484]	@ (8001878 <parse_frame+0x2d4>)
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
    offset += sizeof(frame.oilTemp);
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	3304      	adds	r3, #4
 800169a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.dashLights, &buffer[offset], sizeof(frame.dashLights));
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b74      	ldr	r3, [pc, #464]	@ (8001878 <parse_frame+0x2d4>)
 80016a8:	629a      	str	r2, [r3, #40]	@ 0x28
    offset += sizeof(frame.dashLights);
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	3304      	adds	r3, #4
 80016ae:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.showLights, &buffer[offset], sizeof(frame.showLights));
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001878 <parse_frame+0x2d4>)
 80016bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    offset += sizeof(frame.showLights);
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	3304      	adds	r3, #4
 80016c2:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.throttle, &buffer[offset], sizeof(frame.throttle));
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001878 <parse_frame+0x2d4>)
 80016d0:	631a      	str	r2, [r3, #48]	@ 0x30
    offset += sizeof(frame.throttle);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	3304      	adds	r3, #4
 80016d6:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.brake, &buffer[offset], sizeof(frame.brake));
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b65      	ldr	r3, [pc, #404]	@ (8001878 <parse_frame+0x2d4>)
 80016e4:	635a      	str	r2, [r3, #52]	@ 0x34
    offset += sizeof(frame.brake);
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	3304      	adds	r3, #4
 80016ea:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.clutch, &buffer[offset], sizeof(frame.clutch));
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b60      	ldr	r3, [pc, #384]	@ (8001878 <parse_frame+0x2d4>)
 80016f8:	639a      	str	r2, [r3, #56]	@ 0x38
    offset += sizeof(frame.clutch);
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	3304      	adds	r3, #4
 80016fe:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display1, &buffer[offset], sizeof(frame.display1));
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	441a      	add	r2, r3
 8001706:	4b5c      	ldr	r3, [pc, #368]	@ (8001878 <parse_frame+0x2d4>)
 8001708:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 800170c:	4613      	mov	r3, r2
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	6859      	ldr	r1, [r3, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display1);
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	3310      	adds	r3, #16
 800171c:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.display2, &buffer[offset], sizeof(frame.display2));
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	441a      	add	r2, r3
 8001724:	4b54      	ldr	r3, [pc, #336]	@ (8001878 <parse_frame+0x2d4>)
 8001726:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 800172a:	4613      	mov	r3, r2
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    offset += sizeof(frame.display2);
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	3310      	adds	r3, #16
 800173a:	73fb      	strb	r3, [r7, #15]

    memcpy(&frame.id, &buffer[offset], sizeof(frame.id));
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b4c      	ldr	r3, [pc, #304]	@ (8001878 <parse_frame+0x2d4>)
 8001748:	65da      	str	r2, [r3, #92]	@ 0x5c

    uint16_t hexValue_RPM = (uint16_t)(frame.rpm / 0.15625);  // Rzutowanie na uint16_t
 800174a:	4b4b      	ldr	r3, [pc, #300]	@ (8001878 <parse_frame+0x2d4>)
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ff0e 	bl	8000570 <__aeabi_f2d>
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b48      	ldr	r3, [pc, #288]	@ (800187c <parse_frame+0x2d8>)
 800175a:	f7ff f88b 	bl	8000874 <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff f96d 	bl	8000a44 <__aeabi_d2uiz>
 800176a:	4603      	mov	r3, r0
 800176c:	81bb      	strh	r3, [r7, #12]
    uint8_t lsb = hexValue_RPM & 0xFF;  // Pobranie 8 najmłodszych bitów
 800176e:	89bb      	ldrh	r3, [r7, #12]
 8001770:	72fb      	strb	r3, [r7, #11]
    uint8_t msb = (hexValue_RPM >> 8) & 0xFF;  // Pobranie 8 najbardziej znaczących bitów
 8001772:	89bb      	ldrh	r3, [r7, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b29b      	uxth	r3, r3
 8001778:	72bb      	strb	r3, [r7, #10]

    uint8_t hexValue_temperature = ((frame.engTemp + 48.0) / 0.75) ;
 800177a:	4b3f      	ldr	r3, [pc, #252]	@ (8001878 <parse_frame+0x2d4>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fef6 	bl	8000570 <__aeabi_f2d>
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	4b3d      	ldr	r3, [pc, #244]	@ (8001880 <parse_frame+0x2dc>)
 800178a:	f7fe fd93 	bl	80002b4 <__adddf3>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b3a      	ldr	r3, [pc, #232]	@ (8001884 <parse_frame+0x2e0>)
 800179c:	f7ff f86a 	bl	8000874 <__aeabi_ddiv>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f94c 	bl	8000a44 <__aeabi_d2uiz>
 80017ac:	4603      	mov	r3, r0
 80017ae:	727b      	strb	r3, [r7, #9]

    isTurboActive = frame.flags & OG_TURBO;
 80017b0:	4b31      	ldr	r3, [pc, #196]	@ (8001878 <parse_frame+0x2d4>)
 80017b2:	891b      	ldrh	r3, [r3, #8]
 80017b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <parse_frame+0x2e4>)
 80017c4:	701a      	strb	r2, [r3, #0]
    isMetric = frame.flags & OG_KM;
 80017c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001878 <parse_frame+0x2d4>)
 80017c8:	891b      	ldrh	r3, [r3, #8]
 80017ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <parse_frame+0x2e8>)
 80017da:	701a      	strb	r2, [r3, #0]
    prefersBar = frame.flags & OG_BAR;
 80017dc:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <parse_frame+0x2d4>)
 80017de:	891b      	ldrh	r3, [r3, #8]
 80017e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <parse_frame+0x2ec>)
 80017f0:	701a      	strb	r2, [r3, #0]

    isShiftLightOn = frame.showLights & DL_SHIFT;
 80017f2:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <parse_frame+0x2d4>)
 80017f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <parse_frame+0x2f0>)
 8001806:	701a      	strb	r2, [r3, #0]
    isFullBeam = frame.showLights & DL_FULLBEAM;
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <parse_frame+0x2d4>)
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <parse_frame+0x2f4>)
 800181c:	701a      	strb	r2, [r3, #0]
    isHandbrakeOn = frame.showLights & DL_HANDBRAKE;
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <parse_frame+0x2d4>)
 8001820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf14      	ite	ne
 800182a:	2301      	movne	r3, #1
 800182c:	2300      	moveq	r3, #0
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <parse_frame+0x2f8>)
 8001832:	701a      	strb	r2, [r3, #0]
    isTractionCtrl = frame.showLights & DL_TC;
 8001834:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <parse_frame+0x2d4>)
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <parse_frame+0x2fc>)
 8001848:	701a      	strb	r2, [r3, #0]
    isABSActive = frame.showLights & DL_ABS;
 800184a:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <parse_frame+0x2d4>)
 800184c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <parse_frame+0x300>)
 800185e:	701a      	strb	r2, [r3, #0]
    isOilWarning = frame.showLights & DL_OILWARN;
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <parse_frame+0x2d4>)
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf14      	ite	ne
 800186c:	2301      	movne	r3, #1
 800186e:	2300      	moveq	r3, #0
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <parse_frame+0x304>)
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e019      	b.n	80018ac <parse_frame+0x308>
 8001878:	200002a4 	.word	0x200002a4
 800187c:	3fc40000 	.word	0x3fc40000
 8001880:	40480000 	.word	0x40480000
 8001884:	3fe80000 	.word	0x3fe80000
 8001888:	20000308 	.word	0x20000308
 800188c:	20000309 	.word	0x20000309
 8001890:	2000030a 	.word	0x2000030a
 8001894:	2000030b 	.word	0x2000030b
 8001898:	2000030c 	.word	0x2000030c
 800189c:	2000030d 	.word	0x2000030d
 80018a0:	2000030e 	.word	0x2000030e
 80018a4:	2000030f 	.word	0x2000030f
 80018a8:	20000310 	.word	0x20000310
    isBatteryWarning = frame.showLights & DL_BATTERY;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <parse_frame+0x380>)
 80018ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf14      	ite	ne
 80018b8:	2301      	movne	r3, #1
 80018ba:	2300      	moveq	r3, #0
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <parse_frame+0x384>)
 80018c0:	701a      	strb	r2, [r3, #0]
    isLeftSignal = frame.showLights & DL_SIGNAL_L;
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <parse_frame+0x380>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <parse_frame+0x388>)
 80018d6:	701a      	strb	r2, [r3, #0]
    isRightSignal = frame.showLights & DL_SIGNAL_R;
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <parse_frame+0x380>)
 80018da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf14      	ite	ne
 80018e4:	2301      	movne	r3, #1
 80018e6:	2300      	moveq	r3, #0
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <parse_frame+0x38c>)
 80018ec:	701a      	strb	r2, [r3, #0]

    modify_can_frame_byte(FRAME_316, 2, lsb);  // Modyfikacja bajtu w ramce CAN
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	461a      	mov	r2, r3
 80018f2:	2102      	movs	r1, #2
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fc01 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_316, 3, msb);  // Modyfikacja bajtu w ramce CAN
 80018fa:	7abb      	ldrb	r3, [r7, #10]
 80018fc:	461a      	mov	r2, r3
 80018fe:	2103      	movs	r1, #3
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff fbfb 	bl	80010fc <modify_can_frame_byte>
    modify_can_frame_byte(FRAME_329, 1, hexValue_temperature);
 8001906:	7a7b      	ldrb	r3, [r7, #9]
 8001908:	461a      	mov	r2, r3
 800190a:	2101      	movs	r1, #1
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff fbf5 	bl	80010fc <modify_can_frame_byte>

    HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8001912:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001916:	4807      	ldr	r0, [pc, #28]	@ (8001934 <parse_frame+0x390>)
 8001918:	f003 f85a 	bl	80049d0 <HAL_GPIO_TogglePin>
//    uint8_t fuel_lsb = fuel_value & 0xFF;
//    uint8_t fuel_msb = (fuel_value >> 8) & 0xFF;
//
//    modify_can_frame_byte(FRAME_545, 1, fuel_lsb);
//    modify_can_frame_byte(FRAME_545, 2, fuel_msb);
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	200002a4 	.word	0x200002a4
 8001928:	20000311 	.word	0x20000311
 800192c:	20000312 	.word	0x20000312
 8001930:	20000313 	.word	0x20000313
 8001934:	42020000 	.word	0x42020000

08001938 <calculate_checksum>:


uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8001948:	2300      	movs	r3, #0
 800194a:	73bb      	strb	r3, [r7, #14]
 800194c:	e009      	b.n	8001962 <calculate_checksum+0x2a>
        checksum ^= data[i];
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	4053      	eors	r3, r2
 800195a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	3301      	adds	r3, #1
 8001960:	73bb      	strb	r3, [r7, #14]
 8001962:	7bba      	ldrb	r2, [r7, #14]
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	429a      	cmp	r2, r3
 8001968:	d3f1      	bcc.n	800194e <calculate_checksum+0x16>
    }
    return checksum;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <Send_KBUS_frame>:

void Send_KBUS_frame(uint8_t Source_ID, uint8_t Dest_ID, uint8_t command, uint8_t Byte1, uint8_t Byte2, uint8_t Byte3, uint8_t Byte4, uint8_t size )
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	4604      	mov	r4, r0
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4623      	mov	r3, r4
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	4603      	mov	r3, r0
 800198c:	71bb      	strb	r3, [r7, #6]
 800198e:	460b      	mov	r3, r1
 8001990:	717b      	strb	r3, [r7, #5]
 8001992:	4613      	mov	r3, r2
 8001994:	713b      	strb	r3, [r7, #4]
	uint8_t frame[10];
	//uint8_t lenght;

	frame[0] = Source_ID; //LM 0xd0 → Broadcast 0xbf
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	733b      	strb	r3, [r7, #12]
	//frame[1] = lenght;
	frame[2] = Dest_ID;
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	73bb      	strb	r3, [r7, #14]
	frame[3] = command;
 800199e:	797b      	ldrb	r3, [r7, #5]
 80019a0:	73fb      	strb	r3, [r7, #15]
	frame[4] = Byte1;
 80019a2:	793b      	ldrb	r3, [r7, #4]
 80019a4:	743b      	strb	r3, [r7, #16]
	frame[5] = Byte2;
 80019a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019aa:	747b      	strb	r3, [r7, #17]
	frame[6] = Byte3;
 80019ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019b0:	74bb      	strb	r3, [r7, #18]
	frame[7] = Byte4;
 80019b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80019b6:	74fb      	strb	r3, [r7, #19]
	frame[8] = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	753b      	strb	r3, [r7, #20]

	//lenght = sizeof(frame) - 2;
	frame[1] = size; //lenght
 80019bc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80019c0:	737b      	strb	r3, [r7, #13]
	frame[8] = calculate_checksum(frame, size+1);
 80019c2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ffb1 	bl	8001938 <calculate_checksum>
 80019d6:	4603      	mov	r3, r0
 80019d8:	753b      	strb	r3, [r7, #20]
	frame[9] = '\n';
 80019da:	230a      	movs	r3, #10
 80019dc:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, frame, sizeof(frame), 100);
 80019de:	f107 010c 	add.w	r1, r7, #12
 80019e2:	2364      	movs	r3, #100	@ 0x64
 80019e4:	220a      	movs	r2, #10
 80019e6:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <Send_KBUS_frame+0x7c>)
 80019e8:	f009 fbe2 	bl	800b1b0 <HAL_UART_Transmit>
}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	20000494 	.word	0x20000494

080019f8 <process_frame>:


void process_frame(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
    if (frameReady) {
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <process_frame+0x1c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <process_frame+0x18>
        parse_frame(FrameBuffer);
 8001a04:	4804      	ldr	r0, [pc, #16]	@ (8001a18 <process_frame+0x20>)
 8001a06:	f7ff fdcd 	bl	80015a4 <parse_frame>
        frameReady = false;
 8001a0a:	4b02      	ldr	r3, [pc, #8]	@ (8001a14 <process_frame+0x1c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
    }
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200002a2 	.word	0x200002a2
 8001a18:	20000240 	.word	0x20000240

08001a1c <Set_PWM_Frequency>:

void Set_PWM_Frequency(uint16_t speed_kmh) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
    uint32_t freq = MIN_FREQ + ((MAX_FREQ - MIN_FREQ) * speed_kmh) / MAX_SPEED;
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	f240 62d1 	movw	r2, #1745	@ 0x6d1
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	4a22      	ldr	r2, [pc, #136]	@ (8001abc <Set_PWM_Frequency+0xa0>)
 8001a32:	fb82 1203 	smull	r1, r2, r2, r3
 8001a36:	441a      	add	r2, r3
 8001a38:	1212      	asrs	r2, r2, #8
 8001a3a:	17db      	asrs	r3, r3, #31
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	3319      	adds	r3, #25
 8001a40:	60fb      	str	r3, [r7, #12]

    uint32_t arr_value, psc_value;

    if (freq < 3800) {
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d817      	bhi.n	8001a7c <Set_PWM_Frequency+0x60>
        psc_value = (250000000 / (65536 * freq));
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <Set_PWM_Frequency+0xa4>)
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	613b      	str	r3, [r7, #16]
        if (psc_value > 65535) psc_value = 65535;  // PSC nie może przekroczyć 16 bitów
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5e:	d302      	bcc.n	8001a66 <Set_PWM_Frequency+0x4a>
 8001a60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a64:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / ((psc_value + 1) * freq)) - 1;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	4a13      	ldr	r2, [pc, #76]	@ (8001ac0 <Set_PWM_Frequency+0xa4>)
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e007      	b.n	8001a8c <Set_PWM_Frequency+0x70>
    } else {
        psc_value = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
        arr_value = (250000000 / freq) - 1;
 8001a80:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac0 <Set_PWM_Frequency+0xa4>)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
    }

    if (arr_value > 65535) arr_value = 65535;  // Ograniczenie ARR do 16 bitów
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a92:	d302      	bcc.n	8001a9a <Set_PWM_Frequency+0x7e>
 8001a94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a98:	617b      	str	r3, [r7, #20]
    //printf("Speed: %d km/h, Freq: %lu Hz, PSC: %lu, ARR: %lu\n", speed_kmh, freq, psc_value, arr_value);

    __HAL_TIM_SET_PRESCALER(&htim1, psc_value);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <Set_PWM_Frequency+0xa8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr_value);
 8001aa2:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <Set_PWM_Frequency+0xa8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001aaa:	4a06      	ldr	r2, [pc, #24]	@ (8001ac4 <Set_PWM_Frequency+0xa8>)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	60d3      	str	r3, [r2, #12]
    //__HAL_TIM_SET_COUNTER(&htim1, 0);

}
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	f2b9d649 	.word	0xf2b9d649
 8001ac0:	0ee6b280 	.word	0x0ee6b280
 8001ac4:	2000031c 	.word	0x2000031c

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ace:	f000 ffcf 	bl	8002a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad2:	f000 f877 	bl	8001bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad6:	f7ff fb5d 	bl	8001194 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001ada:	f7ff fb3b 	bl	8001154 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001ade:	f000 fdfb 	bl	80026d8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001ae2:	f000 fbcb 	bl	800227c <MX_TIM1_Init>
  MX_ICACHE_Init();
 8001ae6:	f7ff fc9d 	bl	8001424 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 8001aea:	f7ff f9a7 	bl	8000e3c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8001aee:	f000 fc77 	bl	80023e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001af2:	f000 fe3d 	bl	8002770 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001af6:	f000 fce7 	bl	80024c8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001afa:	f7ff fbeb 	bl	80012d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001afe:	2104      	movs	r1, #4
 8001b00:	4827      	ldr	r0, [pc, #156]	@ (8001ba0 <main+0xd8>)
 8001b02:	f007 ff0b 	bl	800991c <HAL_TIM_PWM_Start>
  ESP32_SendCommand("AT+RST");  // Resetuj ESP32
 8001b06:	4827      	ldr	r0, [pc, #156]	@ (8001ba4 <main+0xdc>)
 8001b08:	f7ff fcb8 	bl	800147c <ESP32_SendCommand>
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWMODE=1");  // Ustaw tryb stacji (klient Wi-Fi)
 // HAL_Delay(1000);
 // ESP32_SendCommand("AT+CWJAP=\"PLAY_Swiatlowod_19A1\",\"t8Xv9auf7Z#D\"");  // Połącz z Wi-Fi
  HAL_Delay(5000);
 8001b0c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001b10:	f001 f86c 	bl	8002bec <HAL_Delay>
  ESP32_SendCommand("AT+CIPSTART=\"UDP\",\"0.0.0.0\",12345,12345,2");  // Ustaw tryb UDP
 8001b14:	4824      	ldr	r0, [pc, #144]	@ (8001ba8 <main+0xe0>)
 8001b16:	f7ff fcb1 	bl	800147c <ESP32_SendCommand>
  HAL_Delay(1000);
 8001b1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b1e:	f001 f865 	bl	8002bec <HAL_Delay>
  HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001b22:	2201      	movs	r2, #1
 8001b24:	4921      	ldr	r1, [pc, #132]	@ (8001bac <main+0xe4>)
 8001b26:	4822      	ldr	r0, [pc, #136]	@ (8001bb0 <main+0xe8>)
 8001b28:	f009 fbe0 	bl	800b2ec <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8001b2c:	4821      	ldr	r0, [pc, #132]	@ (8001bb4 <main+0xec>)
 8001b2e:	f007 fd85 	bl	800963c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001b32:	4821      	ldr	r0, [pc, #132]	@ (8001bb8 <main+0xf0>)
 8001b34:	f007 fd82 	bl	800963c <HAL_TIM_Base_Start_IT>
  InitCANFrames();
 8001b38:	f7ff fa64 	bl	8001004 <InitCANFrames>
  InitAnalogIndicators();
 8001b3c:	f7ff fcec 	bl	8001518 <InitAnalogIndicators>


  uint8_t increasing0 = 1, increasing1 = 1; // Flagi dla obu wiperów
 8001b40:	2301      	movs	r3, #1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	2301      	movs	r3, #1
 8001b46:	71bb      	strb	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 process_frame();
 8001b48:	f7ff ff56 	bl	80019f8 <process_frame>
	 speed = frame.speed * 3.6;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <main+0xf4>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fd0d 	bl	8000570 <__aeabi_f2d>
 8001b56:	a310      	add	r3, pc, #64	@ (adr r3, 8001b98 <main+0xd0>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fd60 	bl	8000620 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe ff8c 	bl	8000a84 <__aeabi_d2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <main+0xf8>)
 8001b70:	6013      	str	r3, [r2, #0]
     Set_PWM_Frequency(speed);
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <main+0xf8>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7c:	ee17 3a90 	vmov	r3, s15
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff4a 	bl	8001a1c <Set_PWM_Frequency>
//         }
//
//
//         //HAL_Delay(50); // Czekaj dla stabilności
//     }
     HAL_Delay(250); // Opóźnienie dla stabilnego działania
 8001b88:	20fa      	movs	r0, #250	@ 0xfa
 8001b8a:	f001 f82f 	bl	8002bec <HAL_Delay>

//////////////////////////////////////

     I2C_Scan();
 8001b8e:	f7ff fc97 	bl	80014c0 <I2C_Scan>
	 process_frame();
 8001b92:	bf00      	nop
 8001b94:	e7d8      	b.n	8001b48 <main+0x80>
 8001b96:	bf00      	nop
 8001b98:	cccccccd 	.word	0xcccccccd
 8001b9c:	400ccccc 	.word	0x400ccccc
 8001ba0:	2000031c 	.word	0x2000031c
 8001ba4:	0800d88c 	.word	0x0800d88c
 8001ba8:	0800d894 	.word	0x0800d894
 8001bac:	200001c0 	.word	0x200001c0
 8001bb0:	20000400 	.word	0x20000400
 8001bb4:	20000368 	.word	0x20000368
 8001bb8:	200003b4 	.word	0x200003b4
 8001bbc:	200002a4 	.word	0x200002a4
 8001bc0:	20000304 	.word	0x20000304

08001bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b09c      	sub	sp, #112	@ 0x70
 8001bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	2250      	movs	r2, #80	@ 0x50
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f00b f83c 	bl	800cc50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001bea:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca0 <SystemClock_Config+0xdc>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca0 <SystemClock_Config+0xdc>)
 8001bf0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001bf4:	6113      	str	r3, [r2, #16]
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca0 <SystemClock_Config+0xdc>)
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c02:	bf00      	nop
 8001c04:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <SystemClock_Config+0xdc>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d1f9      	bne.n	8001c04 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8001c26:	233e      	movs	r3, #62	@ 0x3e
 8001c28:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c32:	2302      	movs	r3, #2
 8001c34:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8001c36:	230c      	movs	r3, #12
 8001c38:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 faa1 	bl	8005190 <HAL_RCC_OscConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c54:	f000 f94c 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c58:	231f      	movs	r3, #31
 8001c5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	2105      	movs	r1, #5
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fec2 	bl	8005a00 <HAL_RCC_ClockConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c82:	f000 f935 	bl	8001ef0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <SystemClock_Config+0xe0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <SystemClock_Config+0xe0>)
 8001c90:	f043 0320 	orr.w	r3, r3, #32
 8001c94:	6013      	str	r3, [r2, #0]
}
 8001c96:	bf00      	nop
 8001c98:	3770      	adds	r7, #112	@ 0x70
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	44020800 	.word	0x44020800
 8001ca4:	40022000 	.word	0x40022000

08001ca8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    static uint8_t byte; // Przechowywany bajt
    HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8001cb0:	2108      	movs	r1, #8
 8001cb2:	482e      	ldr	r0, [pc, #184]	@ (8001d6c <HAL_UART_RxCpltCallback+0xc4>)
 8001cb4:	f002 fe8c 	bl	80049d0 <HAL_GPIO_TogglePin>
    if (huart->Instance == USART1) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8001d70 <HAL_UART_RxCpltCallback+0xc8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d150      	bne.n	8001d64 <HAL_UART_RxCpltCallback+0xbc>
        byte = UartBuffer[0]; // Odbieramy bajt po bajcie
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d74 <HAL_UART_RxCpltCallback+0xcc>)
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <HAL_UART_RxCpltCallback+0xd0>)
 8001cc8:	701a      	strb	r2, [r3, #0]

        // Sprawdzamy nagłówek "+IPD"
        if (headerMatch < 4) {
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <HAL_UART_RxCpltCallback+0xd4>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d813      	bhi.n	8001cfa <HAL_UART_RxCpltCallback+0x52>
            if (byte == HEADER[headerMatch]) {
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_UART_RxCpltCallback+0xd4>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <HAL_UART_RxCpltCallback+0xd8>)
 8001cda:	5c9a      	ldrb	r2, [r3, r2]
 8001cdc:	4b26      	ldr	r3, [pc, #152]	@ (8001d78 <HAL_UART_RxCpltCallback+0xd0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_UART_RxCpltCallback+0x4a>
                headerMatch++;
 8001ce4:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <HAL_UART_RxCpltCallback+0xd4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <HAL_UART_RxCpltCallback+0xd4>)
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e033      	b.n	8001d5a <HAL_UART_RxCpltCallback+0xb2>
            } else {
                headerMatch = 0; // Reset, jeśli się nie zgadza
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <HAL_UART_RxCpltCallback+0xd4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e02f      	b.n	8001d5a <HAL_UART_RxCpltCallback+0xb2>
            }
        } else if (headerMatch == 4) {
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_UART_RxCpltCallback+0xd4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d10d      	bne.n	8001d1e <HAL_UART_RxCpltCallback+0x76>
            // Oczekujemy na długość ramki, pomijamy "xx:"
            if (byte == ':') {
 8001d02:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <HAL_UART_RxCpltCallback+0xd0>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d08:	d127      	bne.n	8001d5a <HAL_UART_RxCpltCallback+0xb2>
                headerMatch++; // Przechodzimy do odbioru danych
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <HAL_UART_RxCpltCallback+0xd4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <HAL_UART_RxCpltCallback+0xd4>)
 8001d14:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;
 8001d16:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_UART_RxCpltCallback+0xdc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e01d      	b.n	8001d5a <HAL_UART_RxCpltCallback+0xb2>
            }
        } else {
            // Odbiór danych ramki
            if (frameIndex < 96 ) {
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_UART_RxCpltCallback+0xdc>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b5f      	cmp	r3, #95	@ 0x5f
 8001d24:	d80a      	bhi.n	8001d3c <HAL_UART_RxCpltCallback+0x94>
                FrameBuffer[frameIndex++] = byte;
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <HAL_UART_RxCpltCallback+0xdc>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	b2d1      	uxtb	r1, r2
 8001d2e:	4a15      	ldr	r2, [pc, #84]	@ (8001d84 <HAL_UART_RxCpltCallback+0xdc>)
 8001d30:	7011      	strb	r1, [r2, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_UART_RxCpltCallback+0xd0>)
 8001d36:	7819      	ldrb	r1, [r3, #0]
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <HAL_UART_RxCpltCallback+0xe0>)
 8001d3a:	5499      	strb	r1, [r3, r2]
            }

            if (frameIndex >= 96 ) {
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_UART_RxCpltCallback+0xdc>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b5f      	cmp	r3, #95	@ 0x5f
 8001d42:	d90a      	bls.n	8001d5a <HAL_UART_RxCpltCallback+0xb2>
                frameReady = true;  // Pełna ramka odebrana
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_UART_RxCpltCallback+0xe4>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
                process_frame();
 8001d4a:	f7ff fe55 	bl	80019f8 <process_frame>
                headerMatch = 0;    // Reset detekcji nagłówka
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_UART_RxCpltCallback+0xd4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
                frameIndex = 0;     // Reset indeksu bufora ramki
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_UART_RxCpltCallback+0xdc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
            }}
        HAL_UART_Receive_DMA(&huart1, UartBuffer, 1);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4905      	ldr	r1, [pc, #20]	@ (8001d74 <HAL_UART_RxCpltCallback+0xcc>)
 8001d5e:	480c      	ldr	r0, [pc, #48]	@ (8001d90 <HAL_UART_RxCpltCallback+0xe8>)
 8001d60:	f009 fac4 	bl	800b2ec <HAL_UART_Receive_DMA>
    }
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	42020400 	.word	0x42020400
 8001d70:	40013800 	.word	0x40013800
 8001d74:	200001c0 	.word	0x200001c0
 8001d78:	20000314 	.word	0x20000314
 8001d7c:	200002a0 	.word	0x200002a0
 8001d80:	0800d8c0 	.word	0x0800d8c0
 8001d84:	200002a1 	.word	0x200002a1
 8001d88:	20000240 	.word	0x20000240
 8001d8c:	200002a2 	.word	0x200002a2
 8001d90:	20000400 	.word	0x20000400

08001d94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	6078      	str	r0, [r7, #4]
	 if (htim == &htim2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a49      	ldr	r2, [pc, #292]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d108      	bne.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x22>
	 {
	     SendCANFrame(FRAME_316);  // Wysyła ramkę o ID 0x316
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff f981 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_329);  // Wysyła ramkę o ID 0x329
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7ff f97e 	bl	80010ac <SendCANFrame>
	     SendCANFrame(FRAME_545);  // Wysyła ramkę o ID 0x545
 8001db0:	2002      	movs	r0, #2
 8001db2:	f7ff f97b 	bl	80010ac <SendCANFrame>

	 }
	 if (htim == &htim3)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a43      	ldr	r2, [pc, #268]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d17d      	bne.n	8001eba <HAL_TIM_PeriodElapsedCallback+0x126>
	 {
		bool anyConditionMet = false;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]
		uint8_t command = 0x00;  // Domyślnie brak sygnału
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73bb      	strb	r3, [r7, #14]
		if (isFullBeam) {
 8001dc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_PeriodElapsedCallback+0x42>
			command = BEAM_LOW | PARKING | BEAM_HIGH;
 8001dce:	2307      	movs	r3, #7
 8001dd0:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
		}
		if (isLeftSignal) {
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x56>
			command = command | TURN_LEFT;
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	f043 0320 	orr.w	r3, r3, #32
 8001de4:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
		}
		if (isRightSignal) {
 8001dea:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_TIM_PeriodElapsedCallback+0x6a>
			command = command | TURN_RIGHT;
 8001df2:	7bbb      	ldrb	r3, [r7, #14]
 8001df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001df8:	73bb      	strb	r3, [r7, #14]
			anyConditionMet = true;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
		}
		if (!anyConditionMet) {
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	f083 0301 	eor.w	r3, r3, #1
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00d      	beq.n	8001e26 <HAL_TIM_PeriodElapsedCallback+0x92>
			Send_KBUS_frame(LM, Broadcast, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x07);//, 0x83, 0x0a, 0x3f
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	9303      	str	r3, [sp, #12]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	2300      	movs	r3, #0
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	2300      	movs	r3, #0
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	225b      	movs	r2, #91	@ 0x5b
 8001e1e:	21bf      	movs	r1, #191	@ 0xbf
 8001e20:	20d0      	movs	r0, #208	@ 0xd0
 8001e22:	f7ff fda9 	bl	8001978 <Send_KBUS_frame>
		}
		Send_KBUS_frame(LM, Broadcast, 0x5B, command, 0x00, 0x00, 0x00, 0x07);
 8001e26:	7bbb      	ldrb	r3, [r7, #14]
 8001e28:	2207      	movs	r2, #7
 8001e2a:	9203      	str	r2, [sp, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	9202      	str	r2, [sp, #8]
 8001e30:	2200      	movs	r2, #0
 8001e32:	9201      	str	r2, [sp, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	9200      	str	r2, [sp, #0]
 8001e38:	225b      	movs	r2, #91	@ 0x5b
 8001e3a:	21bf      	movs	r1, #191	@ 0xbf
 8001e3c:	20d0      	movs	r0, #208	@ 0xd0
 8001e3e:	f7ff fd9b 	bl	8001978 <Send_KBUS_frame>

		if (isHandbrakeOn) {
 8001e42:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0xc2>
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, SET);//SET to off temp
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	4823      	ldr	r0, [pc, #140]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e50:	f002 fda6 	bl	80049a0 <HAL_GPIO_WritePin>
 8001e54:	e004      	b.n	8001e60 <HAL_TIM_PeriodElapsedCallback+0xcc>
		}else
			HAL_GPIO_WritePin(PARKING_BRAKE_GPIO_Port, PARKING_BRAKE_Pin, RESET);//SET to off temp
 8001e56:	2200      	movs	r2, #0
 8001e58:	2104      	movs	r1, #4
 8001e5a:	4820      	ldr	r0, [pc, #128]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e5c:	f002 fda0 	bl	80049a0 <HAL_GPIO_WritePin>
		if (isOilWarning) {
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0xe0>
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, SET); //SET on
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2140      	movs	r1, #64	@ 0x40
 8001e6c:	481d      	ldr	r0, [pc, #116]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e6e:	f002 fd97 	bl	80049a0 <HAL_GPIO_WritePin>
 8001e72:	e004      	b.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0xea>
		}else
			HAL_GPIO_WritePin(OIL_LIGHT_GPIO_Port, OIL_LIGHT_Pin, RESET); //SET to off temp
 8001e74:	2200      	movs	r2, #0
 8001e76:	2140      	movs	r1, #64	@ 0x40
 8001e78:	481a      	ldr	r0, [pc, #104]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e7a:	f002 fd91 	bl	80049a0 <HAL_GPIO_WritePin>
		if (isBatteryWarning) {
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0xfe>
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	2120      	movs	r1, #32
 8001e8a:	4816      	ldr	r0, [pc, #88]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e8c:	f002 fd88 	bl	80049a0 <HAL_GPIO_WritePin>
 8001e90:	e004      	b.n	8001e9c <HAL_TIM_PeriodElapsedCallback+0x108>
		}else
			HAL_GPIO_WritePin(BATT_CHARGE_LIGHT_GPIO_Port, BATT_CHARGE_LIGHT_Pin, RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2120      	movs	r1, #32
 8001e96:	4813      	ldr	r0, [pc, #76]	@ (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e98:	f002 fd82 	bl	80049a0 <HAL_GPIO_WritePin>
		if (isABSActive) {
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	480c      	ldr	r0, [pc, #48]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001eaa:	f002 fd79 	bl	80049a0 <HAL_GPIO_WritePin>
		}else
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
	 }
}
 8001eae:	e004      	b.n	8001eba <HAL_TIM_PeriodElapsedCallback+0x126>
			HAL_GPIO_WritePin(ABS_GPIO_Port, ABS_Pin, SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4809      	ldr	r0, [pc, #36]	@ (8001edc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001eb6:	f002 fd73 	bl	80049a0 <HAL_GPIO_WritePin>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000368 	.word	0x20000368
 8001ec8:	200003b4 	.word	0x200003b4
 8001ecc:	2000030c 	.word	0x2000030c
 8001ed0:	20000312 	.word	0x20000312
 8001ed4:	20000313 	.word	0x20000313
 8001ed8:	2000030d 	.word	0x2000030d
 8001edc:	42020400 	.word	0x42020400
 8001ee0:	20000310 	.word	0x20000310
 8001ee4:	42020000 	.word	0x42020000
 8001ee8:	20000311 	.word	0x20000311
 8001eec:	2000030f 	.word	0x2000030f

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);  // Diagnostyka
 8001ef8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001efc:	4801      	ldr	r0, [pc, #4]	@ (8001f04 <Error_Handler+0x14>)
 8001efe:	f002 fd67 	bl	80049d0 <HAL_GPIO_TogglePin>
 8001f02:	e7f9      	b.n	8001ef8 <Error_Handler+0x8>
 8001f04:	42020000 	.word	0x42020000

08001f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f1a:	bf00      	nop
 8001f1c:	e7fd      	b.n	8001f1a <NMI_Handler+0x4>

08001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	bf00      	nop
 8001f24:	e7fd      	b.n	8001f22 <HardFault_Handler+0x4>

08001f26 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2a:	bf00      	nop
 8001f2c:	e7fd      	b.n	8001f2a <MemManage_Handler+0x4>

08001f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f32:	bf00      	nop
 8001f34:	e7fd      	b.n	8001f32 <BusFault_Handler+0x4>

08001f36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3a:	bf00      	nop
 8001f3c:	e7fd      	b.n	8001f3a <UsageFault_Handler+0x4>

08001f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 fe1e 	bl	8002bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <GPDMA1_Channel0_IRQHandler+0x10>)
 8001f7a:	f001 fa1c 	bl	80033b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000528 	.word	0x20000528

08001f88 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <FDCAN1_IT0_IRQHandler+0x10>)
 8001f8e:	f002 f93d 	bl	800420c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000108 	.word	0x20000108

08001f9c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <FDCAN1_IT1_IRQHandler+0x10>)
 8001fa2:	f002 f933 	bl	800420c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000108 	.word	0x20000108

08001fb0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 Break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <TIM1_BRK_IRQHandler+0x10>)
 8001fb6:	f007 fdf5 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000031c 	.word	0x2000031c

08001fc4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <TIM1_UP_IRQHandler+0x10>)
 8001fca:	f007 fdeb 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000031c 	.word	0x2000031c

08001fd8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001fde:	f007 fde1 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000031c 	.word	0x2000031c

08001fec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 Capture Compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <TIM1_CC_IRQHandler+0x10>)
 8001ff2:	f007 fdd7 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000031c 	.word	0x2000031c

08002000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <TIM2_IRQHandler+0x10>)
 8002006:	f007 fdcd 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000368 	.word	0x20000368

08002014 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002018:	4802      	ldr	r0, [pc, #8]	@ (8002024 <TIM3_IRQHandler+0x10>)
 800201a:	f007 fdc3 	bl	8009ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200003b4 	.word	0x200003b4

08002028 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <USART1_IRQHandler+0x10>)
 800202e:	f009 f9af 	bl	800b390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000400 	.word	0x20000400

0800203c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e00a      	b.n	8002064 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800204e:	f3af 8000 	nop.w
 8002052:	4601      	mov	r1, r0
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	b2ca      	uxtb	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	dbf0      	blt.n	800204e <_read+0x12>
  }

  return len;
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e009      	b.n	800209c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	60ba      	str	r2, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f9db 	bl	800144c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbf1      	blt.n	8002088 <_write+0x12>
  }
  return len;
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_close>:

int _close(int file)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020d6:	605a      	str	r2, [r3, #4]
  return 0;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_isatty>:

int _isatty(int file)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ee:	2301      	movs	r3, #1
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002120:	4a14      	ldr	r2, [pc, #80]	@ (8002174 <_sbrk+0x5c>)
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <_sbrk+0x60>)
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800212c:	4b13      	ldr	r3, [pc, #76]	@ (800217c <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <_sbrk+0x64>)
 8002136:	4a12      	ldr	r2, [pc, #72]	@ (8002180 <_sbrk+0x68>)
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	d207      	bcs.n	8002158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002148:	f00a fdd0 	bl	800ccec <__errno>
 800214c:	4603      	mov	r3, r0
 800214e:	220c      	movs	r2, #12
 8002150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	e009      	b.n	800216c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215e:	4b07      	ldr	r3, [pc, #28]	@ (800217c <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <_sbrk+0x64>)
 8002168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20044000 	.word	0x20044000
 8002178:	00000400 	.word	0x00000400
 800217c:	20000318 	.word	0x20000318
 8002180:	200006f0 	.word	0x200006f0

08002184 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800218a:	4b35      	ldr	r3, [pc, #212]	@ (8002260 <SystemInit+0xdc>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002190:	4a33      	ldr	r2, [pc, #204]	@ (8002260 <SystemInit+0xdc>)
 8002192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002196:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800219a:	4b32      	ldr	r3, [pc, #200]	@ (8002264 <SystemInit+0xe0>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80021a0:	4b30      	ldr	r3, [pc, #192]	@ (8002264 <SystemInit+0xe0>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80021a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002264 <SystemInit+0xe0>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80021ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002264 <SystemInit+0xe0>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	492c      	ldr	r1, [pc, #176]	@ (8002264 <SystemInit+0xe0>)
 80021b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <SystemInit+0xe4>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80021b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <SystemInit+0xe0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80021be:	4b29      	ldr	r3, [pc, #164]	@ (8002264 <SystemInit+0xe0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80021c4:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <SystemInit+0xe0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80021ca:	4b26      	ldr	r3, [pc, #152]	@ (8002264 <SystemInit+0xe0>)
 80021cc:	4a27      	ldr	r2, [pc, #156]	@ (800226c <SystemInit+0xe8>)
 80021ce:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <SystemInit+0xe0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80021d6:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <SystemInit+0xe0>)
 80021d8:	4a24      	ldr	r2, [pc, #144]	@ (800226c <SystemInit+0xe8>)
 80021da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80021dc:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <SystemInit+0xe0>)
 80021de:	2200      	movs	r2, #0
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80021e2:	4b20      	ldr	r3, [pc, #128]	@ (8002264 <SystemInit+0xe0>)
 80021e4:	4a21      	ldr	r2, [pc, #132]	@ (800226c <SystemInit+0xe8>)
 80021e6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80021e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <SystemInit+0xe0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80021ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <SystemInit+0xe0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <SystemInit+0xe0>)
 80021f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <SystemInit+0xe0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002200:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <SystemInit+0xdc>)
 8002202:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002206:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002208:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <SystemInit+0xec>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002210:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002218:	d003      	beq.n	8002222 <SystemInit+0x9e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002220:	d117      	bne.n	8002252 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002222:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <SystemInit+0xec>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <SystemInit+0xec>)
 8002230:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <SystemInit+0xf0>)
 8002232:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002234:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <SystemInit+0xec>)
 8002236:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <SystemInit+0xf4>)
 8002238:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <SystemInit+0xec>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a0c      	ldr	r2, [pc, #48]	@ (8002270 <SystemInit+0xec>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <SystemInit+0xec>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a09      	ldr	r2, [pc, #36]	@ (8002270 <SystemInit+0xec>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	61d3      	str	r3, [r2, #28]
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00
 8002264:	44020c00 	.word	0x44020c00
 8002268:	eae2eae3 	.word	0xeae2eae3
 800226c:	01010280 	.word	0x01010280
 8002270:	40022000 	.word	0x40022000
 8002274:	08192a3b 	.word	0x08192a3b
 8002278:	4c5d6e7f 	.word	0x4c5d6e7f

0800227c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b09c      	sub	sp, #112	@ 0x70
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002282:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800229c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	615a      	str	r2, [r3, #20]
 80022ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2234      	movs	r2, #52	@ 0x34
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f00a fcca 	bl	800cc50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022bc:	4b46      	ldr	r3, [pc, #280]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80022be:	4a47      	ldr	r2, [pc, #284]	@ (80023dc <MX_TIM1_Init+0x160>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 80022c2:	4b45      	ldr	r3, [pc, #276]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80022c4:	2231      	movs	r2, #49	@ 0x31
 80022c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b43      	ldr	r3, [pc, #268]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022ce:	4b42      	ldr	r3, [pc, #264]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80022d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d6:	4b40      	ldr	r3, [pc, #256]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022dc:	4b3e      	ldr	r3, [pc, #248]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022e2:	4b3d      	ldr	r3, [pc, #244]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022e8:	483b      	ldr	r0, [pc, #236]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80022ea:	f007 f94f 	bl	800958c <HAL_TIM_Base_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80022f4:	f7ff fdfc 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002302:	4619      	mov	r1, r3
 8002304:	4834      	ldr	r0, [pc, #208]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 8002306:	f007 ff2b 	bl	800a160 <HAL_TIM_ConfigClockSource>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002310:	f7ff fdee 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002314:	4830      	ldr	r0, [pc, #192]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 8002316:	f007 faa0 	bl	800985a <HAL_TIM_PWM_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002320:	f7ff fde6 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002328:	2300      	movs	r3, #0
 800232a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002330:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002334:	4619      	mov	r1, r3
 8002336:	4828      	ldr	r0, [pc, #160]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 8002338:	f008 fd3a 	bl	800adb0 <HAL_TIMEx_MasterConfigSynchronization>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002342:	f7ff fdd5 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002346:	2360      	movs	r3, #96	@ 0x60
 8002348:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 800234a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800234e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002350:	2300      	movs	r3, #0
 8002352:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002354:	2300      	movs	r3, #0
 8002356:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002364:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002368:	2204      	movs	r2, #4
 800236a:	4619      	mov	r1, r3
 800236c:	481a      	ldr	r0, [pc, #104]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 800236e:	f007 fde3 	bl	8009f38 <HAL_TIM_PWM_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002378:	f7ff fdba 	bl	8001ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002390:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002394:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4807      	ldr	r0, [pc, #28]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80023ba:	f008 fdc9 	bl	800af50 <HAL_TIMEx_ConfigBreakDeadTime>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80023c4:	f7ff fd94 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023c8:	4803      	ldr	r0, [pc, #12]	@ (80023d8 <MX_TIM1_Init+0x15c>)
 80023ca:	f000 f949 	bl	8002660 <HAL_TIM_MspPostInit>

}
 80023ce:	bf00      	nop
 80023d0:	3770      	adds	r7, #112	@ 0x70
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000031c 	.word	0x2000031c
 80023dc:	40012c00 	.word	0x40012c00

080023e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	@ 0x38
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002400:	463b      	mov	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]
 800240c:	611a      	str	r2, [r3, #16]
 800240e:	615a      	str	r2, [r3, #20]
 8002410:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002412:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 8002414:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002418:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49;
 800241a:	4b2a      	ldr	r3, [pc, #168]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 800241c:	2231      	movs	r2, #49	@ 0x31
 800241e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002420:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8002426:	4b27      	ldr	r3, [pc, #156]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 8002428:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800242c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242e:	4b25      	ldr	r3, [pc, #148]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002434:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800243a:	4822      	ldr	r0, [pc, #136]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 800243c:	f007 f8a6 	bl	800958c <HAL_TIM_Base_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002446:	f7ff fd53 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800244a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800244e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002450:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002454:	4619      	mov	r1, r3
 8002456:	481b      	ldr	r0, [pc, #108]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 8002458:	f007 fe82 	bl	800a160 <HAL_TIM_ConfigClockSource>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002462:	f7ff fd45 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002466:	4817      	ldr	r0, [pc, #92]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 8002468:	f007 f996 	bl	8009798 <HAL_TIM_OC_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002472:	f7ff fd3d 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	480f      	ldr	r0, [pc, #60]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 8002486:	f008 fc93 	bl	800adb0 <HAL_TIMEx_MasterConfigSynchronization>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002490:	f7ff fd2e 	bl	8001ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002494:	2300      	movs	r3, #0
 8002496:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024a4:	463b      	mov	r3, r7
 80024a6:	2204      	movs	r2, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	@ (80024c4 <MX_TIM2_Init+0xe4>)
 80024ac:	f007 fcca 	bl	8009e44 <HAL_TIM_OC_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80024b6:	f7ff fd1b 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	3738      	adds	r7, #56	@ 0x38
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000368 	.word	0x20000368

080024c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ce:	f107 0310 	add.w	r3, r7, #16
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <MX_TIM3_Init+0x98>)
 80024e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002564 <MX_TIM3_Init+0x9c>)
 80024ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <MX_TIM3_Init+0x98>)
 80024ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <MX_TIM3_Init+0x98>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80024fa:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <MX_TIM3_Init+0x98>)
 80024fc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002500:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002502:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <MX_TIM3_Init+0x98>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002508:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <MX_TIM3_Init+0x98>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800250e:	4814      	ldr	r0, [pc, #80]	@ (8002560 <MX_TIM3_Init+0x98>)
 8002510:	f007 f83c 	bl	800958c <HAL_TIM_Base_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800251a:	f7ff fce9 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002522:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	4619      	mov	r1, r3
 800252a:	480d      	ldr	r0, [pc, #52]	@ (8002560 <MX_TIM3_Init+0x98>)
 800252c:	f007 fe18 	bl	800a160 <HAL_TIM_ConfigClockSource>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002536:	f7ff fcdb 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4806      	ldr	r0, [pc, #24]	@ (8002560 <MX_TIM3_Init+0x98>)
 8002548:	f008 fc32 	bl	800adb0 <HAL_TIMEx_MasterConfigSynchronization>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002552:	f7ff fccd 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200003b4 	.word	0x200003b4
 8002564:	40000400 	.word	0x40000400

08002568 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a37      	ldr	r2, [pc, #220]	@ (8002654 <HAL_TIM_Base_MspInit+0xec>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12f      	bne.n	80025da <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800257a:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HAL_TIM_Base_MspInit+0xf0>)
 800257c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002580:	4a35      	ldr	r2, [pc, #212]	@ (8002658 <HAL_TIM_Base_MspInit+0xf0>)
 8002582:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002586:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800258a:	4b33      	ldr	r3, [pc, #204]	@ (8002658 <HAL_TIM_Base_MspInit+0xf0>)
 800258c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	2029      	movs	r0, #41	@ 0x29
 800259e:	f000 fc01 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80025a2:	2029      	movs	r0, #41	@ 0x29
 80025a4:	f000 fc18 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2102      	movs	r1, #2
 80025ac:	202a      	movs	r0, #42	@ 0x2a
 80025ae:	f000 fbf9 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80025b2:	202a      	movs	r0, #42	@ 0x2a
 80025b4:	f000 fc10 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 2, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2102      	movs	r1, #2
 80025bc:	202b      	movs	r0, #43	@ 0x2b
 80025be:	f000 fbf1 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80025c2:	202b      	movs	r0, #43	@ 0x2b
 80025c4:	f000 fc08 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2102      	movs	r1, #2
 80025cc:	202c      	movs	r0, #44	@ 0x2c
 80025ce:	f000 fbe9 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80025d2:	202c      	movs	r0, #44	@ 0x2c
 80025d4:	f000 fc00 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025d8:	e038      	b.n	800264c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e2:	d117      	bne.n	8002614 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <HAL_TIM_Base_MspInit+0xf0>)
 80025e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <HAL_TIM_Base_MspInit+0xf0>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80025f4:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <HAL_TIM_Base_MspInit+0xf0>)
 80025f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2103      	movs	r1, #3
 8002606:	202d      	movs	r0, #45	@ 0x2d
 8002608:	f000 fbcc 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800260c:	202d      	movs	r0, #45	@ 0x2d
 800260e:	f000 fbe3 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
}
 8002612:	e01b      	b.n	800264c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a10      	ldr	r2, [pc, #64]	@ (800265c <HAL_TIM_Base_MspInit+0xf4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d116      	bne.n	800264c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_TIM_Base_MspInit+0xf0>)
 8002620:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002624:	4a0c      	ldr	r2, [pc, #48]	@ (8002658 <HAL_TIM_Base_MspInit+0xf0>)
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_TIM_Base_MspInit+0xf0>)
 8002630:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2106      	movs	r1, #6
 8002640:	202e      	movs	r0, #46	@ 0x2e
 8002642:	f000 fbaf 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002646:	202e      	movs	r0, #46	@ 0x2e
 8002648:	f000 fbc6 	bl	8002dd8 <HAL_NVIC_EnableIRQ>
}
 800264c:	bf00      	nop
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40012c00 	.word	0x40012c00
 8002658:	44020c00 	.word	0x44020c00
 800265c:	40000400 	.word	0x40000400

08002660 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a13      	ldr	r2, [pc, #76]	@ (80026cc <HAL_TIM_MspPostInit+0x6c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d11f      	bne.n	80026c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <HAL_TIM_MspPostInit+0x70>)
 8002684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002688:	4a11      	ldr	r2, [pc, #68]	@ (80026d0 <HAL_TIM_MspPostInit+0x70>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002692:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <HAL_TIM_MspPostInit+0x70>)
 8002694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	4619      	mov	r1, r3
 80026bc:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <HAL_TIM_MspPostInit+0x74>)
 80026be:	f002 f81d 	bl	80046fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	44020c00 	.word	0x44020c00
 80026d4:	42020000 	.word	0x42020000

080026d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel0;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026dc:	4b22      	ldr	r3, [pc, #136]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 80026de:	4a23      	ldr	r2, [pc, #140]	@ (800276c <MX_USART1_UART_Init+0x94>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026e2:	4b21      	ldr	r3, [pc, #132]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 80026e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270e:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002714:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271a:	4b13      	ldr	r3, [pc, #76]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 800271c:	2200      	movs	r2, #0
 800271e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002720:	4811      	ldr	r0, [pc, #68]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 8002722:	f008 fcf5 	bl	800b110 <HAL_UART_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800272c:	f7ff fbe0 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002730:	2100      	movs	r1, #0
 8002732:	480d      	ldr	r0, [pc, #52]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 8002734:	f009 ffb7 	bl	800c6a6 <HAL_UARTEx_SetTxFifoThreshold>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800273e:	f7ff fbd7 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002742:	2100      	movs	r1, #0
 8002744:	4808      	ldr	r0, [pc, #32]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 8002746:	f009 ffec 	bl	800c722 <HAL_UARTEx_SetRxFifoThreshold>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002750:	f7ff fbce 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	@ (8002768 <MX_USART1_UART_Init+0x90>)
 8002756:	f009 ff6d 	bl	800c634 <HAL_UARTEx_DisableFifoMode>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002760:	f7ff fbc6 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000400 	.word	0x20000400
 800276c:	40013800 	.word	0x40013800

08002770 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002774:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 8002776:	4a24      	ldr	r2, [pc, #144]	@ (8002808 <MX_USART2_UART_Init+0x98>)
 8002778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800277a:	4b22      	ldr	r3, [pc, #136]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 800277c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002782:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 8002784:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002788:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800278a:	4b1e      	ldr	r3, [pc, #120]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002790:	4b1c      	ldr	r3, [pc, #112]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 8002792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002798:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 800279a:	220c      	movs	r2, #12
 800279c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279e:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a4:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027aa:	4b16      	ldr	r3, [pc, #88]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027bc:	4811      	ldr	r0, [pc, #68]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 80027be:	f008 fca7 	bl	800b110 <HAL_UART_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80027c8:	f7ff fb92 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027cc:	2100      	movs	r1, #0
 80027ce:	480d      	ldr	r0, [pc, #52]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 80027d0:	f009 ff69 	bl	800c6a6 <HAL_UARTEx_SetTxFifoThreshold>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80027da:	f7ff fb89 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027de:	2100      	movs	r1, #0
 80027e0:	4808      	ldr	r0, [pc, #32]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 80027e2:	f009 ff9e 	bl	800c722 <HAL_UARTEx_SetRxFifoThreshold>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80027ec:	f7ff fb80 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027f0:	4804      	ldr	r0, [pc, #16]	@ (8002804 <MX_USART2_UART_Init+0x94>)
 80027f2:	f009 ff1f 	bl	800c634 <HAL_UARTEx_DisableFifoMode>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80027fc:	f7ff fb78 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000494 	.word	0x20000494
 8002808:	40004400 	.word	0x40004400

0800280c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b0c0      	sub	sp, #256	@ 0x100
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002824:	f107 0318 	add.w	r3, r7, #24
 8002828:	22d0      	movs	r2, #208	@ 0xd0
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f00a fa0f 	bl	800cc50 <memset>
  if(uartHandle->Instance==USART1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a72      	ldr	r2, [pc, #456]	@ (8002a00 <HAL_UART_MspInit+0x1f4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	f040 8091 	bne.w	8002960 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800283e:	f04f 0201 	mov.w	r2, #1
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800284a:	2300      	movs	r3, #0
 800284c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800284e:	f107 0318 	add.w	r3, r7, #24
 8002852:	4618      	mov	r0, r3
 8002854:	f003 fc16 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800285e:	f7ff fb47 	bl	8001ef0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002862:	4b68      	ldr	r3, [pc, #416]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 8002864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002868:	4a66      	ldr	r2, [pc, #408]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 800286a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800286e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002872:	4b64      	ldr	r3, [pc, #400]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 8002874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002880:	4b60      	ldr	r3, [pc, #384]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 8002882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002886:	4a5f      	ldr	r2, [pc, #380]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002890:	4b5c      	ldr	r3, [pc, #368]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 8002892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800289e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80028a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80028b8:	2304      	movs	r3, #4
 80028ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028be:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80028c2:	4619      	mov	r1, r3
 80028c4:	4850      	ldr	r0, [pc, #320]	@ (8002a08 <HAL_UART_MspInit+0x1fc>)
 80028c6:	f001 ff19 	bl	80046fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80028ca:	4b50      	ldr	r3, [pc, #320]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 80028cc:	4a50      	ldr	r2, [pc, #320]	@ (8002a10 <HAL_UART_MspInit+0x204>)
 80028ce:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 80028d0:	4b4e      	ldr	r3, [pc, #312]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 80028d2:	2215      	movs	r2, #21
 80028d4:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80028d6:	4b4d      	ldr	r3, [pc, #308]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028dc:	4b4b      	ldr	r3, [pc, #300]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80028e2:	4b4a      	ldr	r3, [pc, #296]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80028e8:	4b48      	ldr	r3, [pc, #288]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80028ee:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80028f4:	4b45      	ldr	r3, [pc, #276]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80028fa:	4b44      	ldr	r3, [pc, #272]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8002900:	4b42      	ldr	r3, [pc, #264]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 8002902:	2201      	movs	r2, #1
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8002906:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 8002908:	2201      	movs	r2, #1
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800290c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 800290e:	2200      	movs	r2, #0
 8002910:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002912:	4b3e      	ldr	r3, [pc, #248]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8002918:	4b3c      	ldr	r3, [pc, #240]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 800291a:	2200      	movs	r2, #0
 800291c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800291e:	483b      	ldr	r0, [pc, #236]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 8002920:	f000 fb18 	bl	8002f54 <HAL_DMA_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 800292a:	f7ff fae1 	bl	8001ef0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel0);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a36      	ldr	r2, [pc, #216]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 8002932:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002936:	4a35      	ldr	r2, [pc, #212]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800293c:	2110      	movs	r1, #16
 800293e:	4833      	ldr	r0, [pc, #204]	@ (8002a0c <HAL_UART_MspInit+0x200>)
 8002940:	f000 fe9a 	bl	8003678 <HAL_DMA_ConfigChannelAttributes>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800294a:	f7ff fad1 	bl	8001ef0 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2101      	movs	r1, #1
 8002952:	203a      	movs	r0, #58	@ 0x3a
 8002954:	f000 fa26 	bl	8002da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002958:	203a      	movs	r0, #58	@ 0x3a
 800295a:	f000 fa3d 	bl	8002dd8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800295e:	e049      	b.n	80029f4 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2b      	ldr	r2, [pc, #172]	@ (8002a14 <HAL_UART_MspInit+0x208>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d144      	bne.n	80029f4 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800296a:	f04f 0202 	mov.w	r2, #2
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002976:	2300      	movs	r3, #0
 8002978:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800297a:	f107 0318 	add.w	r3, r7, #24
 800297e:	4618      	mov	r0, r3
 8002980:	f003 fb80 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_UART_MspInit+0x182>
      Error_Handler();
 800298a:	f7ff fab1 	bl	8001ef0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800298e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 8002990:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002994:	4a1b      	ldr	r2, [pc, #108]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 8002996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800299a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 80029a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ac:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 80029ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b2:	4a14      	ldr	r2, [pc, #80]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_UART_MspInit+0x1f8>)
 80029be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ca:	230c      	movs	r3, #12
 80029cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029e2:	2307      	movs	r3, #7
 80029e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80029ec:	4619      	mov	r1, r3
 80029ee:	480a      	ldr	r0, [pc, #40]	@ (8002a18 <HAL_UART_MspInit+0x20c>)
 80029f0:	f001 fe84 	bl	80046fc <HAL_GPIO_Init>
}
 80029f4:	bf00      	nop
 80029f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40013800 	.word	0x40013800
 8002a04:	44020c00 	.word	0x44020c00
 8002a08:	42020400 	.word	0x42020400
 8002a0c:	20000528 	.word	0x20000528
 8002a10:	40020050 	.word	0x40020050
 8002a14:	40004400 	.word	0x40004400
 8002a18:	42020000 	.word	0x42020000

08002a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a1c:	480d      	ldr	r0, [pc, #52]	@ (8002a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a20:	f7ff fbb0 	bl	8002184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a24:	480c      	ldr	r0, [pc, #48]	@ (8002a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a26:	490d      	ldr	r1, [pc, #52]	@ (8002a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a28:	4a0d      	ldr	r2, [pc, #52]	@ (8002a60 <LoopForever+0xe>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a68 <LoopForever+0x16>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a4a:	f00a f955 	bl	800ccf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4e:	f7ff f83b 	bl	8001ac8 <main>

08002a52 <LoopForever>:

LoopForever:
    b LoopForever
 8002a52:	e7fe      	b.n	8002a52 <LoopForever>
  ldr   r0, =_estack
 8002a54:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8002a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a5c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002a60:	0800d95c 	.word	0x0800d95c
  ldr r2, =_sbss
 8002a64:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002a68:	200006f0 	.word	0x200006f0

08002a6c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a6c:	e7fe      	b.n	8002a6c <ADC1_IRQHandler>
	...

08002a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a74:	2003      	movs	r0, #3
 8002a76:	f000 f98a 	bl	8002d8e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a7a:	f003 f979 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <HAL_Init+0x44>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	490b      	ldr	r1, [pc, #44]	@ (8002ab8 <HAL_Init+0x48>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <HAL_Init+0x4c>)
 8002a92:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002a94:	2004      	movs	r0, #4
 8002a96:	f000 f9cf 	bl	8002e38 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f000 f810 	bl	8002ac0 <HAL_InitTick>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e002      	b.n	8002ab0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002aaa:	f7ff fa2d 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	44020c00 	.word	0x44020c00
 8002ab8:	0800d8c8 	.word	0x0800d8c8
 8002abc:	20000084 	.word	0x20000084

08002ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002acc:	4b33      	ldr	r3, [pc, #204]	@ (8002b9c <HAL_InitTick+0xdc>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e05c      	b.n	8002b92 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002ad8:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_InitTick+0xe0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d10c      	bne.n	8002afe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba4 <HAL_InitTick+0xe4>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b9c <HAL_InitTick+0xdc>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4619      	mov	r1, r3
 8002aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e037      	b.n	8002b6e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002afe:	f000 f9f3 	bl	8002ee8 <HAL_SYSTICK_GetCLKSourceConfig>
 8002b02:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d023      	beq.n	8002b52 <HAL_InitTick+0x92>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d82d      	bhi.n	8002b6c <HAL_InitTick+0xac>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_InitTick+0x5e>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d00d      	beq.n	8002b38 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002b1c:	e026      	b.n	8002b6c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002b1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ba4 <HAL_InitTick+0xe4>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b1e      	ldr	r3, [pc, #120]	@ (8002b9c <HAL_InitTick+0xdc>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	4619      	mov	r1, r3
 8002b28:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002b2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	60fb      	str	r3, [r7, #12]
        break;
 8002b36:	e01a      	b.n	8002b6e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002b38:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_InitTick+0xdc>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b46:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	60fb      	str	r3, [r7, #12]
        break;
 8002b50:	e00d      	b.n	8002b6e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_InitTick+0xdc>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	60fb      	str	r3, [r7, #12]
        break;
 8002b6a:	e000      	b.n	8002b6e <HAL_InitTick+0xae>
        break;
 8002b6c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f940 	bl	8002df4 <HAL_SYSTICK_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e009      	b.n	8002b92 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	f04f 30ff 	mov.w	r0, #4294967295
 8002b86:	f000 f90d 	bl	8002da4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002b8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ba8 <HAL_InitTick+0xe8>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	2000008c 	.word	0x2000008c
 8002ba0:	e000e010 	.word	0xe000e010
 8002ba4:	20000084 	.word	0x20000084
 8002ba8:	20000088 	.word	0x20000088

08002bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_IncTick+0x20>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_IncTick+0x24>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	4a04      	ldr	r2, [pc, #16]	@ (8002bd0 <HAL_IncTick+0x24>)
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	2000008c 	.word	0x2000008c
 8002bd0:	200005a0 	.word	0x200005a0

08002bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <HAL_GetTick+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	200005a0 	.word	0x200005a0

08002bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff ffee 	bl	8002bd4 <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d005      	beq.n	8002c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_Delay+0x44>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c12:	bf00      	nop
 8002c14:	f7ff ffde 	bl	8002bd4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f7      	bhi.n	8002c14 <HAL_Delay+0x28>
  {
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	2000008c 	.word	0x2000008c

08002c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c66:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60d3      	str	r3, [r2, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	@ (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0b      	blt.n	8002cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4907      	ldr	r1, [pc, #28]	@ (8002cd0 <__NVIC_EnableIRQ+0x38>)
 8002cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	@ (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	4313      	orrs	r3, r2
         );
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	@ 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ff4c 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002db2:	f7ff ff63 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002db6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	6978      	ldr	r0, [r7, #20]
 8002dbe:	f7ff ffb3 	bl	8002d28 <NVIC_EncodePriority>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff82 	bl	8002cd4 <__NVIC_SetPriority>
}
 8002dd0:	bf00      	nop
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff56 	bl	8002c98 <__NVIC_EnableIRQ>
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e04:	d301      	bcc.n	8002e0a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002e06:	2301      	movs	r3, #1
 8002e08:	e00d      	b.n	8002e26 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e34 <HAL_SYSTICK_Config+0x40>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002e12:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <HAL_SYSTICK_Config+0x40>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_SYSTICK_Config+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a05      	ldr	r2, [pc, #20]	@ (8002e34 <HAL_SYSTICK_Config+0x40>)
 8002e1e:	f043 0303 	orr.w	r3, r3, #3
 8002e22:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e010 	.word	0xe000e010

08002e38 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d844      	bhi.n	8002ed0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002e46:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e6f 	.word	0x08002e6f
 8002e50:	08002e8d 	.word	0x08002e8d
 8002e54:	08002eaf 	.word	0x08002eaf
 8002e58:	08002ed1 	.word	0x08002ed1
 8002e5c:	08002e61 	.word	0x08002e61
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002e60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6013      	str	r3, [r2, #0]
      break;
 8002e6c:	e031      	b.n	8002ed2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e80:	4a18      	ldr	r2, [pc, #96]	@ (8002ee4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e82:	f023 030c 	bic.w	r3, r3, #12
 8002e86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002e8a:	e022      	b.n	8002ed2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002e8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a13      	ldr	r2, [pc, #76]	@ (8002ee0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e92:	f023 0304 	bic.w	r3, r3, #4
 8002e96:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002e98:	4b12      	ldr	r3, [pc, #72]	@ (8002ee4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e9e:	f023 030c 	bic.w	r3, r3, #12
 8002ea2:	4a10      	ldr	r2, [pc, #64]	@ (8002ee4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002eac:	e011      	b.n	8002ed2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002eae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002eba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ebc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ec0:	f023 030c 	bic.w	r3, r3, #12
 8002ec4:	4a07      	ldr	r2, [pc, #28]	@ (8002ee4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002ec6:	f043 0308 	orr.w	r3, r3, #8
 8002eca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002ece:	e000      	b.n	8002ed2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002ed0:	bf00      	nop
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010
 8002ee4:	44020c00 	.word	0x44020c00

08002ee8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002eee:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002efa:	2304      	movs	r3, #4
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	e01e      	b.n	8002f3e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002f00:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d00f      	beq.n	8002f32 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d80f      	bhi.n	8002f38 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d003      	beq.n	8002f2c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002f24:	e008      	b.n	8002f38 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
        break;
 8002f2a:	e008      	b.n	8002f3e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	607b      	str	r3, [r7, #4]
        break;
 8002f30:	e005      	b.n	8002f3e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002f32:	2302      	movs	r3, #2
 8002f34:	607b      	str	r3, [r7, #4]
        break;
 8002f36:	e002      	b.n	8002f3e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
        break;
 8002f3c:	bf00      	nop
    }
  }
  return systick_source;
 8002f3e:	687b      	ldr	r3, [r7, #4]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000e010 	.word	0xe000e010
 8002f50:	44020c00 	.word	0x44020c00

08002f54 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff fe3a 	bl	8002bd4 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0db      	b.n	8003124 <HAL_DMA_Init+0x1d0>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6e      	ldr	r2, [pc, #440]	@ (800312c <HAL_DMA_Init+0x1d8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f000 809f 	beq.w	80030b6 <HAL_DMA_Init+0x162>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a6c      	ldr	r2, [pc, #432]	@ (8003130 <HAL_DMA_Init+0x1dc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	f000 8099 	beq.w	80030b6 <HAL_DMA_Init+0x162>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a6a      	ldr	r2, [pc, #424]	@ (8003134 <HAL_DMA_Init+0x1e0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	f000 8093 	beq.w	80030b6 <HAL_DMA_Init+0x162>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a68      	ldr	r2, [pc, #416]	@ (8003138 <HAL_DMA_Init+0x1e4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	f000 808d 	beq.w	80030b6 <HAL_DMA_Init+0x162>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a66      	ldr	r2, [pc, #408]	@ (800313c <HAL_DMA_Init+0x1e8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	f000 8087 	beq.w	80030b6 <HAL_DMA_Init+0x162>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a64      	ldr	r2, [pc, #400]	@ (8003140 <HAL_DMA_Init+0x1ec>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	f000 8081 	beq.w	80030b6 <HAL_DMA_Init+0x162>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a62      	ldr	r2, [pc, #392]	@ (8003144 <HAL_DMA_Init+0x1f0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d07b      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a61      	ldr	r2, [pc, #388]	@ (8003148 <HAL_DMA_Init+0x1f4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d076      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a5f      	ldr	r2, [pc, #380]	@ (800314c <HAL_DMA_Init+0x1f8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d071      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8003150 <HAL_DMA_Init+0x1fc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d06c      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a5c      	ldr	r2, [pc, #368]	@ (8003154 <HAL_DMA_Init+0x200>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d067      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5b      	ldr	r2, [pc, #364]	@ (8003158 <HAL_DMA_Init+0x204>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d062      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a59      	ldr	r2, [pc, #356]	@ (800315c <HAL_DMA_Init+0x208>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d05d      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a58      	ldr	r2, [pc, #352]	@ (8003160 <HAL_DMA_Init+0x20c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d058      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a56      	ldr	r2, [pc, #344]	@ (8003164 <HAL_DMA_Init+0x210>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d053      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a55      	ldr	r2, [pc, #340]	@ (8003168 <HAL_DMA_Init+0x214>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d04e      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a53      	ldr	r2, [pc, #332]	@ (800316c <HAL_DMA_Init+0x218>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d049      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a52      	ldr	r2, [pc, #328]	@ (8003170 <HAL_DMA_Init+0x21c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d044      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a50      	ldr	r2, [pc, #320]	@ (8003174 <HAL_DMA_Init+0x220>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d03f      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a4f      	ldr	r2, [pc, #316]	@ (8003178 <HAL_DMA_Init+0x224>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d03a      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a4d      	ldr	r2, [pc, #308]	@ (800317c <HAL_DMA_Init+0x228>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d035      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a4c      	ldr	r2, [pc, #304]	@ (8003180 <HAL_DMA_Init+0x22c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d030      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a4a      	ldr	r2, [pc, #296]	@ (8003184 <HAL_DMA_Init+0x230>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d02b      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a49      	ldr	r2, [pc, #292]	@ (8003188 <HAL_DMA_Init+0x234>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d026      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a47      	ldr	r2, [pc, #284]	@ (800318c <HAL_DMA_Init+0x238>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d021      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a46      	ldr	r2, [pc, #280]	@ (8003190 <HAL_DMA_Init+0x23c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d01c      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a44      	ldr	r2, [pc, #272]	@ (8003194 <HAL_DMA_Init+0x240>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d017      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a43      	ldr	r2, [pc, #268]	@ (8003198 <HAL_DMA_Init+0x244>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d012      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a41      	ldr	r2, [pc, #260]	@ (800319c <HAL_DMA_Init+0x248>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a40      	ldr	r2, [pc, #256]	@ (80031a0 <HAL_DMA_Init+0x24c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d008      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a3e      	ldr	r2, [pc, #248]	@ (80031a4 <HAL_DMA_Init+0x250>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d003      	beq.n	80030b6 <HAL_DMA_Init+0x162>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a3d      	ldr	r2, [pc, #244]	@ (80031a8 <HAL_DMA_Init+0x254>)
 80030b4:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0206 	orr.w	r2, r2, #6
 80030d4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80030d6:	e00f      	b.n	80030f8 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80030d8:	f7ff fd7c 	bl	8002bd4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d908      	bls.n	80030f8 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2210      	movs	r2, #16
 80030ea:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2203      	movs	r2, #3
 80030f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e015      	b.n	8003124 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e8      	bne.n	80030d8 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fb18 	bl	800373c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40020050 	.word	0x40020050
 8003130:	50020050 	.word	0x50020050
 8003134:	400200d0 	.word	0x400200d0
 8003138:	500200d0 	.word	0x500200d0
 800313c:	40020150 	.word	0x40020150
 8003140:	50020150 	.word	0x50020150
 8003144:	400201d0 	.word	0x400201d0
 8003148:	500201d0 	.word	0x500201d0
 800314c:	40020250 	.word	0x40020250
 8003150:	50020250 	.word	0x50020250
 8003154:	400202d0 	.word	0x400202d0
 8003158:	500202d0 	.word	0x500202d0
 800315c:	40020350 	.word	0x40020350
 8003160:	50020350 	.word	0x50020350
 8003164:	400203d0 	.word	0x400203d0
 8003168:	500203d0 	.word	0x500203d0
 800316c:	40021050 	.word	0x40021050
 8003170:	50021050 	.word	0x50021050
 8003174:	400210d0 	.word	0x400210d0
 8003178:	500210d0 	.word	0x500210d0
 800317c:	40021150 	.word	0x40021150
 8003180:	50021150 	.word	0x50021150
 8003184:	400211d0 	.word	0x400211d0
 8003188:	500211d0 	.word	0x500211d0
 800318c:	40021250 	.word	0x40021250
 8003190:	50021250 	.word	0x50021250
 8003194:	400212d0 	.word	0x400212d0
 8003198:	500212d0 	.word	0x500212d0
 800319c:	40021350 	.word	0x40021350
 80031a0:	50021350 	.word	0x50021350
 80031a4:	400213d0 	.word	0x400213d0
 80031a8:	500213d0 	.word	0x500213d0

080031ac <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e04f      	b.n	8003264 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_DMA_Start_IT+0x26>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e048      	b.n	8003264 <HAL_DMA_Start_IT+0xb8>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d136      	bne.n	8003254 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fa78 	bl	80036f0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800320e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003226:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800323e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e007      	b.n	8003264 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2240      	movs	r2, #64	@ 0x40
 8003258:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003274:	f7ff fcae 	bl	8002bd4 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e06b      	b.n	800335c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d008      	beq.n	80032a2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e05c      	b.n	800335c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0204 	orr.w	r2, r2, #4
 80032b0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2205      	movs	r2, #5
 80032b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80032ba:	e020      	b.n	80032fe <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80032bc:	f7ff fc8a 	bl	8002bd4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d919      	bls.n	80032fe <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	f043 0210 	orr.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2203      	movs	r2, #3
 80032da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ee:	2201      	movs	r2, #1
 80032f0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e02e      	b.n	800335c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0d7      	beq.n	80032bc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0202 	orr.w	r2, r2, #2
 800331a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2204      	movs	r2, #4
 8003320:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800332c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003346:	2201      	movs	r2, #1
 8003348:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e019      	b.n	80033aa <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d004      	beq.n	800338c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e00e      	b.n	80033aa <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2204      	movs	r2, #4
 8003390:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033a2:	f043 0304 	orr.w	r3, r3, #4
 80033a6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80033c6:	f023 030f 	bic.w	r3, r3, #15
 80033ca:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d4:	3b50      	subs	r3, #80	@ 0x50
 80033d6:	09db      	lsrs	r3, r3, #7
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2201      	movs	r2, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 813b 	beq.w	800366c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d011      	beq.n	8003428 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800341a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003432:	2b00      	cmp	r3, #0
 8003434:	d011      	beq.n	800345a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800344c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	f043 0202 	orr.w	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d011      	beq.n	800348c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800347e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034b0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b6:	f043 0208 	orr.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e2:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d04c      	beq.n	800359c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d045      	beq.n	800359c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003518:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b04      	cmp	r3, #4
 8003524:	d12e      	bne.n	8003584 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003534:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0202 	orr.w	r2, r2, #2
 8003544:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355e:	2201      	movs	r2, #1
 8003560:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d07a      	beq.n	8003670 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
        }

        return;
 8003582:	e075      	b.n	8003670 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2205      	movs	r2, #5
 8003588:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d039      	beq.n	800361e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d032      	beq.n	800361e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d012      	beq.n	80035ea <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d111      	bne.n	80035fc <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e4:	2201      	movs	r2, #1
 80035e6:	731a      	strb	r2, [r3, #12]
 80035e8:	e008      	b.n	80035fc <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003604:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	2b00      	cmp	r3, #0
 8003624:	d025      	beq.n	8003672 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0202 	orr.w	r2, r2, #2
 8003634:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364e:	2201      	movs	r2, #1
 8003650:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
 800366a:	e002      	b.n	8003672 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800366c:	bf00      	nop
 800366e:	e000      	b.n	8003672 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003670:	bf00      	nop
    }
  }
}
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e02b      	b.n	80036e4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003694:	f023 030f 	bic.w	r3, r3, #15
 8003698:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a2:	3b50      	subs	r3, #80	@ 0x50
 80036a4:	09db      	lsrs	r3, r3, #7
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2201      	movs	r2, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d012      	beq.n	80036e2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f003 0311 	and.w	r3, r3, #17
 80036c2:	2b11      	cmp	r3, #17
 80036c4:	d106      	bne.n	80036d4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	e006      	b.n	80036e2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	43db      	mvns	r3, r3
 80036dc:	401a      	ands	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	b291      	uxth	r1, r2
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	430b      	orrs	r3, r1
 8003712:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800371c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	430a      	orrs	r2, r1
 800375c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a53      	ldr	r2, [pc, #332]	@ (80038c8 <DMA_Init+0x18c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	f000 80a0 	beq.w	80038c2 <DMA_Init+0x186>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a51      	ldr	r2, [pc, #324]	@ (80038cc <DMA_Init+0x190>)
 8003788:	4293      	cmp	r3, r2
 800378a:	f000 809a 	beq.w	80038c2 <DMA_Init+0x186>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a4f      	ldr	r2, [pc, #316]	@ (80038d0 <DMA_Init+0x194>)
 8003794:	4293      	cmp	r3, r2
 8003796:	f000 8094 	beq.w	80038c2 <DMA_Init+0x186>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4d      	ldr	r2, [pc, #308]	@ (80038d4 <DMA_Init+0x198>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	f000 808e 	beq.w	80038c2 <DMA_Init+0x186>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a4b      	ldr	r2, [pc, #300]	@ (80038d8 <DMA_Init+0x19c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	f000 8088 	beq.w	80038c2 <DMA_Init+0x186>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a49      	ldr	r2, [pc, #292]	@ (80038dc <DMA_Init+0x1a0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	f000 8082 	beq.w	80038c2 <DMA_Init+0x186>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a47      	ldr	r2, [pc, #284]	@ (80038e0 <DMA_Init+0x1a4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d07c      	beq.n	80038c2 <DMA_Init+0x186>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a45      	ldr	r2, [pc, #276]	@ (80038e4 <DMA_Init+0x1a8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d077      	beq.n	80038c2 <DMA_Init+0x186>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a44      	ldr	r2, [pc, #272]	@ (80038e8 <DMA_Init+0x1ac>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d072      	beq.n	80038c2 <DMA_Init+0x186>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a42      	ldr	r2, [pc, #264]	@ (80038ec <DMA_Init+0x1b0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d06d      	beq.n	80038c2 <DMA_Init+0x186>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a41      	ldr	r2, [pc, #260]	@ (80038f0 <DMA_Init+0x1b4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d068      	beq.n	80038c2 <DMA_Init+0x186>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a3f      	ldr	r2, [pc, #252]	@ (80038f4 <DMA_Init+0x1b8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d063      	beq.n	80038c2 <DMA_Init+0x186>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a3e      	ldr	r2, [pc, #248]	@ (80038f8 <DMA_Init+0x1bc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d05e      	beq.n	80038c2 <DMA_Init+0x186>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a3c      	ldr	r2, [pc, #240]	@ (80038fc <DMA_Init+0x1c0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d059      	beq.n	80038c2 <DMA_Init+0x186>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3b      	ldr	r2, [pc, #236]	@ (8003900 <DMA_Init+0x1c4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d054      	beq.n	80038c2 <DMA_Init+0x186>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a39      	ldr	r2, [pc, #228]	@ (8003904 <DMA_Init+0x1c8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d04f      	beq.n	80038c2 <DMA_Init+0x186>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a38      	ldr	r2, [pc, #224]	@ (8003908 <DMA_Init+0x1cc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d04a      	beq.n	80038c2 <DMA_Init+0x186>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a36      	ldr	r2, [pc, #216]	@ (800390c <DMA_Init+0x1d0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d045      	beq.n	80038c2 <DMA_Init+0x186>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a35      	ldr	r2, [pc, #212]	@ (8003910 <DMA_Init+0x1d4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d040      	beq.n	80038c2 <DMA_Init+0x186>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a33      	ldr	r2, [pc, #204]	@ (8003914 <DMA_Init+0x1d8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d03b      	beq.n	80038c2 <DMA_Init+0x186>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a32      	ldr	r2, [pc, #200]	@ (8003918 <DMA_Init+0x1dc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d036      	beq.n	80038c2 <DMA_Init+0x186>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a30      	ldr	r2, [pc, #192]	@ (800391c <DMA_Init+0x1e0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d031      	beq.n	80038c2 <DMA_Init+0x186>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2f      	ldr	r2, [pc, #188]	@ (8003920 <DMA_Init+0x1e4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d02c      	beq.n	80038c2 <DMA_Init+0x186>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2d      	ldr	r2, [pc, #180]	@ (8003924 <DMA_Init+0x1e8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d027      	beq.n	80038c2 <DMA_Init+0x186>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2c      	ldr	r2, [pc, #176]	@ (8003928 <DMA_Init+0x1ec>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d022      	beq.n	80038c2 <DMA_Init+0x186>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2a      	ldr	r2, [pc, #168]	@ (800392c <DMA_Init+0x1f0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01d      	beq.n	80038c2 <DMA_Init+0x186>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a29      	ldr	r2, [pc, #164]	@ (8003930 <DMA_Init+0x1f4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d018      	beq.n	80038c2 <DMA_Init+0x186>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a27      	ldr	r2, [pc, #156]	@ (8003934 <DMA_Init+0x1f8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <DMA_Init+0x186>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a26      	ldr	r2, [pc, #152]	@ (8003938 <DMA_Init+0x1fc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <DMA_Init+0x186>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a24      	ldr	r2, [pc, #144]	@ (800393c <DMA_Init+0x200>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <DMA_Init+0x186>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a23      	ldr	r2, [pc, #140]	@ (8003940 <DMA_Init+0x204>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <DMA_Init+0x186>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a21      	ldr	r2, [pc, #132]	@ (8003944 <DMA_Init+0x208>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d142      	bne.n	8003948 <DMA_Init+0x20c>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e041      	b.n	800394a <DMA_Init+0x20e>
 80038c6:	bf00      	nop
 80038c8:	40020050 	.word	0x40020050
 80038cc:	50020050 	.word	0x50020050
 80038d0:	400200d0 	.word	0x400200d0
 80038d4:	500200d0 	.word	0x500200d0
 80038d8:	40020150 	.word	0x40020150
 80038dc:	50020150 	.word	0x50020150
 80038e0:	400201d0 	.word	0x400201d0
 80038e4:	500201d0 	.word	0x500201d0
 80038e8:	40020250 	.word	0x40020250
 80038ec:	50020250 	.word	0x50020250
 80038f0:	400202d0 	.word	0x400202d0
 80038f4:	500202d0 	.word	0x500202d0
 80038f8:	40020350 	.word	0x40020350
 80038fc:	50020350 	.word	0x50020350
 8003900:	400203d0 	.word	0x400203d0
 8003904:	500203d0 	.word	0x500203d0
 8003908:	40021050 	.word	0x40021050
 800390c:	50021050 	.word	0x50021050
 8003910:	400210d0 	.word	0x400210d0
 8003914:	500210d0 	.word	0x500210d0
 8003918:	40021150 	.word	0x40021150
 800391c:	50021150 	.word	0x50021150
 8003920:	400211d0 	.word	0x400211d0
 8003924:	500211d0 	.word	0x500211d0
 8003928:	40021250 	.word	0x40021250
 800392c:	50021250 	.word	0x50021250
 8003930:	400212d0 	.word	0x400212d0
 8003934:	500212d0 	.word	0x500212d0
 8003938:	40021350 	.word	0x40021350
 800393c:	50021350 	.word	0x50021350
 8003940:	400213d0 	.word	0x400213d0
 8003944:	500213d0 	.word	0x500213d0
 8003948:	2300      	movs	r3, #0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d012      	beq.n	8003974 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	051b      	lsls	r3, r3, #20
 800395a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800395e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	3b01      	subs	r3, #1
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800396c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	430a      	orrs	r2, r1
 8003986:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a4:	f040 80b0 	bne.w	8003b08 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a84      	ldr	r2, [pc, #528]	@ (8003bc0 <DMA_Init+0x484>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	f000 80a0 	beq.w	8003af4 <DMA_Init+0x3b8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a82      	ldr	r2, [pc, #520]	@ (8003bc4 <DMA_Init+0x488>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	f000 809a 	beq.w	8003af4 <DMA_Init+0x3b8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a80      	ldr	r2, [pc, #512]	@ (8003bc8 <DMA_Init+0x48c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	f000 8094 	beq.w	8003af4 <DMA_Init+0x3b8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7e      	ldr	r2, [pc, #504]	@ (8003bcc <DMA_Init+0x490>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	f000 808e 	beq.w	8003af4 <DMA_Init+0x3b8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd0 <DMA_Init+0x494>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	f000 8088 	beq.w	8003af4 <DMA_Init+0x3b8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a7a      	ldr	r2, [pc, #488]	@ (8003bd4 <DMA_Init+0x498>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	f000 8082 	beq.w	8003af4 <DMA_Init+0x3b8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a78      	ldr	r2, [pc, #480]	@ (8003bd8 <DMA_Init+0x49c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d07c      	beq.n	8003af4 <DMA_Init+0x3b8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a77      	ldr	r2, [pc, #476]	@ (8003bdc <DMA_Init+0x4a0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d077      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a75      	ldr	r2, [pc, #468]	@ (8003be0 <DMA_Init+0x4a4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d072      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a74      	ldr	r2, [pc, #464]	@ (8003be4 <DMA_Init+0x4a8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d06d      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a72      	ldr	r2, [pc, #456]	@ (8003be8 <DMA_Init+0x4ac>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d068      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a71      	ldr	r2, [pc, #452]	@ (8003bec <DMA_Init+0x4b0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d063      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a6f      	ldr	r2, [pc, #444]	@ (8003bf0 <DMA_Init+0x4b4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d05e      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf4 <DMA_Init+0x4b8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d059      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a6c      	ldr	r2, [pc, #432]	@ (8003bf8 <DMA_Init+0x4bc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d054      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6b      	ldr	r2, [pc, #428]	@ (8003bfc <DMA_Init+0x4c0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d04f      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a69      	ldr	r2, [pc, #420]	@ (8003c00 <DMA_Init+0x4c4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d04a      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a68      	ldr	r2, [pc, #416]	@ (8003c04 <DMA_Init+0x4c8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d045      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a66      	ldr	r2, [pc, #408]	@ (8003c08 <DMA_Init+0x4cc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d040      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a65      	ldr	r2, [pc, #404]	@ (8003c0c <DMA_Init+0x4d0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d03b      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a63      	ldr	r2, [pc, #396]	@ (8003c10 <DMA_Init+0x4d4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d036      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a62      	ldr	r2, [pc, #392]	@ (8003c14 <DMA_Init+0x4d8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d031      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a60      	ldr	r2, [pc, #384]	@ (8003c18 <DMA_Init+0x4dc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d02c      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a5f      	ldr	r2, [pc, #380]	@ (8003c1c <DMA_Init+0x4e0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d027      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8003c20 <DMA_Init+0x4e4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d022      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8003c24 <DMA_Init+0x4e8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d01d      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5a      	ldr	r2, [pc, #360]	@ (8003c28 <DMA_Init+0x4ec>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d018      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a59      	ldr	r2, [pc, #356]	@ (8003c2c <DMA_Init+0x4f0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d013      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a57      	ldr	r2, [pc, #348]	@ (8003c30 <DMA_Init+0x4f4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00e      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a56      	ldr	r2, [pc, #344]	@ (8003c34 <DMA_Init+0x4f8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d009      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a54      	ldr	r2, [pc, #336]	@ (8003c38 <DMA_Init+0x4fc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <DMA_Init+0x3b8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a53      	ldr	r2, [pc, #332]	@ (8003c3c <DMA_Init+0x500>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d101      	bne.n	8003af8 <DMA_Init+0x3bc>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <DMA_Init+0x3be>
 8003af8:	2300      	movs	r3, #0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00d      	beq.n	8003b1a <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e008      	b.n	8003b1a <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b10:	d103      	bne.n	8003b1a <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b18:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b2a:	4b45      	ldr	r3, [pc, #276]	@ (8003c40 <DMA_Init+0x504>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	68f9      	ldr	r1, [r7, #12]
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf0 <DMA_Init+0x4b4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d022      	beq.n	8003b90 <DMA_Init+0x454>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a29      	ldr	r2, [pc, #164]	@ (8003bf4 <DMA_Init+0x4b8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d01d      	beq.n	8003b90 <DMA_Init+0x454>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <DMA_Init+0x4bc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d018      	beq.n	8003b90 <DMA_Init+0x454>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a26      	ldr	r2, [pc, #152]	@ (8003bfc <DMA_Init+0x4c0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d013      	beq.n	8003b90 <DMA_Init+0x454>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a30      	ldr	r2, [pc, #192]	@ (8003c30 <DMA_Init+0x4f4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00e      	beq.n	8003b90 <DMA_Init+0x454>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2f      	ldr	r2, [pc, #188]	@ (8003c34 <DMA_Init+0x4f8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d009      	beq.n	8003b90 <DMA_Init+0x454>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2d      	ldr	r2, [pc, #180]	@ (8003c38 <DMA_Init+0x4fc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <DMA_Init+0x454>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c3c <DMA_Init+0x500>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <DMA_Init+0x458>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <DMA_Init+0x45a>
 8003b94:	2300      	movs	r3, #0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40020050 	.word	0x40020050
 8003bc4:	50020050 	.word	0x50020050
 8003bc8:	400200d0 	.word	0x400200d0
 8003bcc:	500200d0 	.word	0x500200d0
 8003bd0:	40020150 	.word	0x40020150
 8003bd4:	50020150 	.word	0x50020150
 8003bd8:	400201d0 	.word	0x400201d0
 8003bdc:	500201d0 	.word	0x500201d0
 8003be0:	40020250 	.word	0x40020250
 8003be4:	50020250 	.word	0x50020250
 8003be8:	400202d0 	.word	0x400202d0
 8003bec:	500202d0 	.word	0x500202d0
 8003bf0:	40020350 	.word	0x40020350
 8003bf4:	50020350 	.word	0x50020350
 8003bf8:	400203d0 	.word	0x400203d0
 8003bfc:	500203d0 	.word	0x500203d0
 8003c00:	40021050 	.word	0x40021050
 8003c04:	50021050 	.word	0x50021050
 8003c08:	400210d0 	.word	0x400210d0
 8003c0c:	500210d0 	.word	0x500210d0
 8003c10:	40021150 	.word	0x40021150
 8003c14:	50021150 	.word	0x50021150
 8003c18:	400211d0 	.word	0x400211d0
 8003c1c:	500211d0 	.word	0x500211d0
 8003c20:	40021250 	.word	0x40021250
 8003c24:	50021250 	.word	0x50021250
 8003c28:	400212d0 	.word	0x400212d0
 8003c2c:	500212d0 	.word	0x500212d0
 8003c30:	40021350 	.word	0x40021350
 8003c34:	50021350 	.word	0x50021350
 8003c38:	400213d0 	.word	0x400213d0
 8003c3c:	500213d0 	.word	0x500213d0
 8003c40:	3cc02100 	.word	0x3cc02100

08003c44 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_DMAEx_List_Start_IT+0x16>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e082      	b.n	8003d64 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c64:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c70:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d005      	beq.n	8003c84 <HAL_DMAEx_List_Start_IT+0x40>
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d16a      	bne.n	8003d54 <HAL_DMAEx_List_Start_IT+0x110>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d067      	beq.n	8003d54 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d157      	bne.n	8003d40 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_DMAEx_List_Start_IT+0x5a>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e062      	b.n	8003d64 <HAL_DMAEx_List_Start_IT+0x120>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003cd2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cea:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d02:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f107 010c 	add.w	r1, r7, #12
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f82b 	bl	8003d6c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	0c0b      	lsrs	r3, r1, #16
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003d34:	4013      	ands	r3, r2
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e007      	b.n	8003d64 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2240      	movs	r2, #64	@ 0x40
 8003d58:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00c      	beq.n	8003d9e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc4 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003d8e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00f      	beq.n	8003db6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2207      	movs	r2, #7
 8003d9a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003d9c:	e00b      	b.n	8003db6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4a08      	ldr	r2, [pc, #32]	@ (8003dc8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003da8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2205      	movs	r2, #5
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	fe010000 	.word	0xfe010000
 8003dc8:	f8010000 	.word	0xf8010000

08003dcc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e147      	b.n	800406e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd f88c 	bl	8000f10 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0210 	bic.w	r2, r2, #16
 8003e06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e08:	f7fe fee4 	bl	8002bd4 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e0e:	e012      	b.n	8003e36 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e10:	f7fe fee0 	bl	8002bd4 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b0a      	cmp	r3, #10
 8003e1c:	d90b      	bls.n	8003e36 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e22:	f043 0201 	orr.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e11b      	b.n	800406e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d0e5      	beq.n	8003e10 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e54:	f7fe febe 	bl	8002bd4 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e5a:	e012      	b.n	8003e82 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e5c:	f7fe feba 	bl	8002bd4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b0a      	cmp	r3, #10
 8003e68:	d90b      	bls.n	8003e82 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0f5      	b.n	800406e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0e5      	beq.n	8003e5c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0202 	orr.w	r2, r2, #2
 8003e9e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a74      	ldr	r2, [pc, #464]	@ (8004078 <HAL_FDCAN_Init+0x2ac>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d103      	bne.n	8003eb2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003eaa:	4a74      	ldr	r2, [pc, #464]	@ (800407c <HAL_FDCAN_Init+0x2b0>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7c1b      	ldrb	r3, [r3, #16]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d108      	bne.n	8003ecc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ec8:	619a      	str	r2, [r3, #24]
 8003eca:	e007      	b.n	8003edc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eda:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	7c5b      	ldrb	r3, [r3, #17]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d108      	bne.n	8003ef6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ef2:	619a      	str	r2, [r3, #24]
 8003ef4:	e007      	b.n	8003f06 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f04:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7c9b      	ldrb	r3, [r3, #18]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d108      	bne.n	8003f20 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f1c:	619a      	str	r2, [r3, #24]
 8003f1e:	e007      	b.n	8003f30 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f2e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003f54:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0210 	bic.w	r2, r2, #16
 8003f64:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d108      	bne.n	8003f80 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0204 	orr.w	r2, r2, #4
 8003f7c:	619a      	str	r2, [r3, #24]
 8003f7e:	e02c      	b.n	8003fda <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d028      	beq.n	8003fda <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d01c      	beq.n	8003fca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f9e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0210 	orr.w	r2, r2, #16
 8003fae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d110      	bne.n	8003fda <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0220 	orr.w	r2, r2, #32
 8003fc6:	619a      	str	r2, [r3, #24]
 8003fc8:	e007      	b.n	8003fda <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0220 	orr.w	r2, r2, #32
 8003fd8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003fea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ff2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004002:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004004:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800400e:	d115      	bne.n	800403c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	3b01      	subs	r3, #1
 800401c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800401e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	3b01      	subs	r3, #1
 8004026:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004028:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	3b01      	subs	r3, #1
 8004032:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004038:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800403a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa74 	bl	8004540 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	4000a400 	.word	0x4000a400
 800407c:	4000a500 	.word	0x4000a500

08004080 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004090:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d002      	beq.n	800409e <HAL_FDCAN_ConfigFilter+0x1e>
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d13d      	bne.n	800411a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d119      	bne.n	80040da <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80040b2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80040ba:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e01d      	b.n	8004116 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	075a      	lsls	r2, r3, #29
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	079a      	lsls	r2, r3, #30
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3304      	adds	r3, #4
 800410e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e006      	b.n	8004128 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411e:	f043 0202 	orr.w	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
  }
}
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d110      	bne.n	800416a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	e006      	b.n	8004178 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416e:	f043 0204 	orr.w	r2, r3, #4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d12c      	bne.n	80041f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e023      	b.n	8004204 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fa16 	bl	8004604 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2101      	movs	r1, #1
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	fa01 f202 	lsl.w	r2, r1, r2
 80041e4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80041e8:	2201      	movs	r2, #1
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	409a      	lsls	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e006      	b.n	8004204 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fa:	f043 0208 	orr.w	r2, r3, #8
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	@ 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800421e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004228:	4013      	ands	r3, r2
 800422a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004240:	4013      	ands	r3, r2
 8004242:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800424a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800424e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004258:	4013      	ands	r3, r2
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004266:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426e:	6a3a      	ldr	r2, [r7, #32]
 8004270:	4013      	ands	r3, r2
 8004272:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800427e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	4013      	ands	r3, r2
 800428a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004292:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d006      	beq.n	80042be <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2240      	movs	r2, #64	@ 0x40
 80042b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f921 	bl	8004500 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d019      	beq.n	80042fc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d014      	beq.n	80042fc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042da:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4013      	ands	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042f2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80042f4:	6939      	ldr	r1, [r7, #16]
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8e3 	bl	80044c2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004308:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800430a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f8a2 	bl	8004456 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800431e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f8a2 	bl	800446c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004334:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004336:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f8a2 	bl	8004482 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800435a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f89b 	bl	8004498 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d018      	beq.n	800439e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d013      	beq.n	800439e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800437e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4013      	ands	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2280      	movs	r2, #128	@ 0x80
 8004394:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f887 	bl	80044ac <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00c      	beq.n	80043c2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043ba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f88b 	bl	80044d8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00c      	beq.n	80043e6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80043de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f883 	bl	80044ec <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00f      	beq.n	8004410 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004402:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004408:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800441e:	69f9      	ldr	r1, [r7, #28]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f881 	bl	8004528 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f863 	bl	8004514 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800444e:	bf00      	nop
 8004450:	3730      	adds	r7, #48	@ 0x30
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004548:	4b2c      	ldr	r3, [pc, #176]	@ (80045fc <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800454a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a2b      	ldr	r2, [pc, #172]	@ (8004600 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d103      	bne.n	800455e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800455c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800456c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004574:	041a      	lsls	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004592:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	061a      	lsls	r2, r3, #24
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e005      	b.n	80045e0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3304      	adds	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d3f3      	bcc.n	80045d4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	4000ac00 	.word	0x4000ac00
 8004600:	4000a800 	.word	0x4000a800

08004604 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	@ 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004622:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800462a:	4313      	orrs	r3, r2
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	e00a      	b.n	8004646 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004638:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800463e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004644:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004650:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004656:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800465c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	4613      	mov	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4413      	add	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	440b      	add	r3, r1
 8004678:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	3304      	adds	r3, #4
 8004684:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	3304      	adds	r3, #4
 8004690:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e020      	b.n	80046da <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3303      	adds	r3, #3
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	4413      	add	r3, r2
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	3302      	adds	r3, #2
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	440b      	add	r3, r1
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80046b0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3301      	adds	r3, #1
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	440b      	add	r3, r1
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80046be:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	440a      	add	r2, r1
 80046c6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80046c8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	3304      	adds	r3, #4
 80046d2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	3304      	adds	r3, #4
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	4a06      	ldr	r2, [pc, #24]	@ (80046f8 <FDCAN_CopyMessageToRAM+0xf4>)
 80046e0:	5cd3      	ldrb	r3, [r2, r3]
 80046e2:	461a      	mov	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d3d6      	bcc.n	8004698 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	3724      	adds	r7, #36	@ 0x24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	0800d8e0 	.word	0x0800d8e0

080046fc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800470a:	e136      	b.n	800497a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2101      	movs	r1, #1
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	fa01 f303 	lsl.w	r3, r1, r3
 8004718:	4013      	ands	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8128 	beq.w	8004974 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d003      	beq.n	8004734 <HAL_GPIO_Init+0x38>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b12      	cmp	r3, #18
 8004732:	d125      	bne.n	8004780 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	08da      	lsrs	r2, r3, #3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3208      	adds	r2, #8
 800473c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004740:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	220f      	movs	r2, #15
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4013      	ands	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f003 020f 	and.w	r2, r3, #15
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	08da      	lsrs	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3208      	adds	r2, #8
 800477a:	6979      	ldr	r1, [r7, #20]
 800477c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4013      	ands	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0203 	and.w	r2, r3, #3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d00b      	beq.n	80047d4 <HAL_GPIO_Init+0xd8>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d007      	beq.n	80047d4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047c8:	2b11      	cmp	r3, #17
 80047ca:	d003      	beq.n	80047d4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b12      	cmp	r3, #18
 80047d2:	d130      	bne.n	8004836 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2203      	movs	r2, #3
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4013      	ands	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800480a:	2201      	movs	r2, #1
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4013      	ands	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 0201 	and.w	r2, r3, #1
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b03      	cmp	r3, #3
 800483c:	d017      	beq.n	800486e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	2203      	movs	r2, #3
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4013      	ands	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d07c      	beq.n	8004974 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800487a:	4a47      	ldr	r2, [pc, #284]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	3318      	adds	r3, #24
 8004882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004886:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	220f      	movs	r2, #15
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4013      	ands	r3, r2
 800489c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0a9a      	lsrs	r2, r3, #10
 80048a2:	4b3e      	ldr	r3, [pc, #248]	@ (800499c <HAL_GPIO_Init+0x2a0>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	f002 0203 	and.w	r2, r2, #3
 80048ac:	00d2      	lsls	r2, r2, #3
 80048ae:	4093      	lsls	r3, r2
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80048b6:	4938      	ldr	r1, [pc, #224]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	3318      	adds	r3, #24
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80048c4:	4b34      	ldr	r3, [pc, #208]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4013      	ands	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80048e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80048ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4013      	ands	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004912:	4a21      	ldr	r2, [pc, #132]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004918:	4b1f      	ldr	r3, [pc, #124]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800491e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	43db      	mvns	r3, r3
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4013      	ands	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800493e:	4a16      	ldr	r2, [pc, #88]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004946:	4b14      	ldr	r3, [pc, #80]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 8004948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800494c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	43db      	mvns	r3, r3
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4013      	ands	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800496c:	4a0a      	ldr	r2, [pc, #40]	@ (8004998 <HAL_GPIO_Init+0x29c>)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3301      	adds	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	f47f aec1 	bne.w	800470c <HAL_GPIO_Init+0x10>
  }
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	44022000 	.word	0x44022000
 800499c:	002f7f7f 	.word	0x002f7f7f

080049a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	807b      	strh	r3, [r7, #2]
 80049ac:	4613      	mov	r3, r2
 80049ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049b0:	787b      	ldrb	r3, [r7, #1]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049bc:	e002      	b.n	80049c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049e2:	887a      	ldrh	r2, [r7, #2]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4013      	ands	r3, r2
 80049e8:	041a      	lsls	r2, r3, #16
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	43d9      	mvns	r1, r3
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	400b      	ands	r3, r1
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	619a      	str	r2, [r3, #24]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e08d      	b.n	8004b32 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc fc92 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2224      	movs	r2, #36	@ 0x24
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	e006      	b.n	8004a8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004a8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d108      	bne.n	8004aa6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	e007      	b.n	8004ab6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ab4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ac8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ad8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69d9      	ldr	r1, [r3, #28]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b08a      	sub	sp, #40	@ 0x28
 8004b3e:	af02      	add	r7, sp, #8
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	460b      	mov	r3, r1
 8004b48:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	f040 80ed 	bne.w	8004d3a <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b6e:	d101      	bne.n	8004b74 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0e3      	b.n	8004d3c <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2C_IsDeviceReady+0x48>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e0dc      	b.n	8004d3c <HAL_I2C_IsDeviceReady+0x202>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2224      	movs	r2, #36	@ 0x24
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d107      	bne.n	8004bb0 <HAL_I2C_IsDeviceReady+0x76>
 8004ba0:	897b      	ldrh	r3, [r7, #10]
 8004ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004baa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004bae:	e006      	b.n	8004bbe <HAL_I2C_IsDeviceReady+0x84>
 8004bb0:	897b      	ldrh	r3, [r7, #10]
 8004bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004bba:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fe f806 	bl	8002bd4 <HAL_GetTick>
 8004bc8:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004bf6:	e034      	b.n	8004c62 <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d01a      	beq.n	8004c36 <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c00:	f7fd ffe8 	bl	8002bd4 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d302      	bcc.n	8004c16 <HAL_I2C_IsDeviceReady+0xdc>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e082      	b.n	8004d3c <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c62:	7fbb      	ldrb	r3, [r7, #30]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <HAL_I2C_IsDeviceReady+0x134>
 8004c68:	7f7b      	ldrb	r3, [r7, #29]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0c4      	beq.n	8004bf8 <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d027      	beq.n	8004ccc <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	2120      	movs	r1, #32
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f880 	bl	8004d8c <I2C_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00e      	beq.n	8004cb0 <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d107      	bne.n	8004caa <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ca8:	e026      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e023      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e037      	b.n	8004d3c <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2120      	movs	r1, #32
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f854 	bl	8004d8c <I2C_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e003      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d904      	bls.n	8004d10 <HAL_I2C_IsDeviceReady+0x1d6>
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	f63f af3f 	bhi.w	8004b98 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8004d3a:	2302      	movs	r3, #2
  }
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d103      	bne.n	8004d62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d007      	beq.n	8004d80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	619a      	str	r2, [r3, #24]
  }
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d9c:	e03b      	b.n	8004e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f84c 	bl	8004e40 <I2C_IsErrorOccurred>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e041      	b.n	8004e36 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d02d      	beq.n	8004e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dba:	f7fd ff0b 	bl	8002bd4 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d302      	bcc.n	8004dd0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d122      	bne.n	8004e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d113      	bne.n	8004e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	f043 0220 	orr.w	r2, r3, #32
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e00f      	b.n	8004e36 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699a      	ldr	r2, [r3, #24]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	bf0c      	ite	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	2300      	movne	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d0b4      	beq.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	@ 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d068      	beq.n	8004f3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2210      	movs	r2, #16
 8004e72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e74:	e049      	b.n	8004f0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d045      	beq.n	8004f0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e7e:	f7fd fea9 	bl	8002bd4 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d302      	bcc.n	8004e94 <I2C_IsErrorOccurred+0x54>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d13a      	bne.n	8004f0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ea6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb6:	d121      	bne.n	8004efc <I2C_IsErrorOccurred+0xbc>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ebe:	d01d      	beq.n	8004efc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d01a      	beq.n	8004efc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ed4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ed6:	f7fd fe7d 	bl	8002bd4 <HAL_GetTick>
 8004eda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004edc:	e00e      	b.n	8004efc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ede:	f7fd fe79 	bl	8002bd4 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b19      	cmp	r3, #25
 8004eea:	d907      	bls.n	8004efc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	f043 0320 	orr.w	r3, r3, #32
 8004ef2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004efa:	e006      	b.n	8004f0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d1e9      	bne.n	8004ede <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d003      	beq.n	8004f20 <I2C_IsErrorOccurred+0xe0>
 8004f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0aa      	beq.n	8004e76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	f043 0304 	orr.w	r3, r3, #4
 8004f36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00b      	beq.n	8004f68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f043 0308 	orr.w	r3, r3, #8
 8004f78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	f043 0302 	orr.w	r3, r3, #2
 8004f9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01c      	beq.n	8004fee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f7ff fec5 	bl	8004d44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6859      	ldr	r1, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <I2C_IsErrorOccurred+0x1bc>)
 8004fc6:	400b      	ands	r3, r1
 8004fc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004fee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3728      	adds	r7, #40	@ 0x28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	fe00e800 	.word	0xfe00e800

08005000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b20      	cmp	r3, #32
 8005014:	d138      	bne.n	8005088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005020:	2302      	movs	r3, #2
 8005022:	e032      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	@ 0x24
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d139      	bne.n	8005120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e033      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2224      	movs	r2, #36	@ 0x24
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
 800514c:	e007      	b.n	800515e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800514e:	4b07      	ldr	r3, [pc, #28]	@ (800516c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 0204 	bic.w	r2, r3, #4
 8005156:	4905      	ldr	r1, [pc, #20]	@ (800516c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800515e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40030400 	.word	0x40030400

08005170 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005174:	4b05      	ldr	r3, [pc, #20]	@ (800518c <HAL_ICACHE_Enable+0x1c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a04      	ldr	r2, [pc, #16]	@ (800518c <HAL_ICACHE_Enable+0x1c>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	40030400 	.word	0x40030400

08005190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	f000 bc28 	b.w	80059f4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a4:	4b94      	ldr	r3, [pc, #592]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f003 0318 	and.w	r3, r3, #24
 80051ac:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80051ae:	4b92      	ldr	r3, [pc, #584]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d05b      	beq.n	800527c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d005      	beq.n	80051d6 <HAL_RCC_OscConfig+0x46>
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2b18      	cmp	r3, #24
 80051ce:	d114      	bne.n	80051fa <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d111      	bne.n	80051fa <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f000 bc08 	b.w	80059f4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80051e4:	4b84      	ldr	r3, [pc, #528]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	041b      	lsls	r3, r3, #16
 80051f2:	4981      	ldr	r1, [pc, #516]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80051f8:	e040      	b.n	800527c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d023      	beq.n	800524a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005202:	4b7d      	ldr	r3, [pc, #500]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7c      	ldr	r2, [pc, #496]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fd fce1 	bl	8002bd4 <HAL_GetTick>
 8005212:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005216:	f7fd fcdd 	bl	8002bd4 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e3e5      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005228:	4b73      	ldr	r3, [pc, #460]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005234:	4b70      	ldr	r3, [pc, #448]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	496d      	ldr	r1, [pc, #436]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005244:	4313      	orrs	r3, r2
 8005246:	618b      	str	r3, [r1, #24]
 8005248:	e018      	b.n	800527c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800524a:	4b6b      	ldr	r3, [pc, #428]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a6a      	ldr	r2, [pc, #424]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005256:	f7fd fcbd 	bl	8002bd4 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800525e:	f7fd fcb9 	bl	8002bd4 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e3c1      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005270:	4b61      	ldr	r3, [pc, #388]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f0      	bne.n	800525e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80a0 	beq.w	80053ca <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b10      	cmp	r3, #16
 800528e:	d005      	beq.n	800529c <HAL_RCC_OscConfig+0x10c>
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	2b18      	cmp	r3, #24
 8005294:	d109      	bne.n	80052aa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 8092 	bne.w	80053ca <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e3a4      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x132>
 80052b4:	4b50      	ldr	r3, [pc, #320]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a4f      	ldr	r2, [pc, #316]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e058      	b.n	8005374 <HAL_RCC_OscConfig+0x1e4>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d112      	bne.n	80052f0 <HAL_RCC_OscConfig+0x160>
 80052ca:	4b4b      	ldr	r3, [pc, #300]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a4a      	ldr	r2, [pc, #296]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80052d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	4b48      	ldr	r3, [pc, #288]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a47      	ldr	r2, [pc, #284]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80052dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	4b45      	ldr	r3, [pc, #276]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a44      	ldr	r2, [pc, #272]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80052e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e041      	b.n	8005374 <HAL_RCC_OscConfig+0x1e4>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052f8:	d112      	bne.n	8005320 <HAL_RCC_OscConfig+0x190>
 80052fa:	4b3f      	ldr	r3, [pc, #252]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a3e      	ldr	r2, [pc, #248]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4b3c      	ldr	r3, [pc, #240]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a3b      	ldr	r2, [pc, #236]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 800530c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	4b39      	ldr	r3, [pc, #228]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a38      	ldr	r2, [pc, #224]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e029      	b.n	8005374 <HAL_RCC_OscConfig+0x1e4>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005328:	d112      	bne.n	8005350 <HAL_RCC_OscConfig+0x1c0>
 800532a:	4b33      	ldr	r3, [pc, #204]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a32      	ldr	r2, [pc, #200]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	4b30      	ldr	r3, [pc, #192]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2f      	ldr	r2, [pc, #188]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 800533c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b2d      	ldr	r3, [pc, #180]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2c      	ldr	r2, [pc, #176]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e011      	b.n	8005374 <HAL_RCC_OscConfig+0x1e4>
 8005350:	4b29      	ldr	r3, [pc, #164]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a28      	ldr	r2, [pc, #160]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a25      	ldr	r2, [pc, #148]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	4b23      	ldr	r3, [pc, #140]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a22      	ldr	r2, [pc, #136]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 800536e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d013      	beq.n	80053a4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd fc2a 	bl	8002bd4 <HAL_GetTick>
 8005380:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005384:	f7fd fc26 	bl	8002bd4 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	@ 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e32e      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005396:	4b18      	ldr	r3, [pc, #96]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x1f4>
 80053a2:	e012      	b.n	80053ca <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fd fc16 	bl	8002bd4 <HAL_GetTick>
 80053a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80053ac:	f7fd fc12 	bl	8002bd4 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b64      	cmp	r3, #100	@ 0x64
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e31a      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053be:	4b0e      	ldr	r3, [pc, #56]	@ (80053f8 <HAL_RCC_OscConfig+0x268>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 809a 	beq.w	800550c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_RCC_OscConfig+0x25a>
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2b18      	cmp	r3, #24
 80053e2:	d149      	bne.n	8005478 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d146      	bne.n	8005478 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e2fe      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
 80053f6:	bf00      	nop
 80053f8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d11c      	bne.n	800543c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005402:	4b9a      	ldr	r3, [pc, #616]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0218 	and.w	r2, r3, #24
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d014      	beq.n	800543c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005412:	4b96      	ldr	r3, [pc, #600]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 0218 	bic.w	r2, r3, #24
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	4993      	ldr	r1, [pc, #588]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005424:	f000 fdd0 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005428:	4b91      	ldr	r3, [pc, #580]	@ (8005670 <HAL_RCC_OscConfig+0x4e0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f7fd fb47 	bl	8002ac0 <HAL_InitTick>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e2db      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fd fbca 	bl	8002bd4 <HAL_GetTick>
 8005440:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005444:	f7fd fbc6 	bl	8002bd4 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e2ce      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005456:	4b85      	ldr	r3, [pc, #532]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005462:	4b82      	ldr	r3, [pc, #520]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	497e      	ldr	r1, [pc, #504]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005476:	e049      	b.n	800550c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02c      	beq.n	80054da <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005480:	4b7a      	ldr	r3, [pc, #488]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f023 0218 	bic.w	r2, r3, #24
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	4977      	ldr	r1, [pc, #476]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005492:	4b76      	ldr	r3, [pc, #472]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a75      	ldr	r2, [pc, #468]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fd fb99 	bl	8002bd4 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80054a6:	f7fd fb95 	bl	8002bd4 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e29d      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054b8:	4b6c      	ldr	r3, [pc, #432]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80054c4:	4b69      	ldr	r3, [pc, #420]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	4966      	ldr	r1, [pc, #408]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	610b      	str	r3, [r1, #16]
 80054d8:	e018      	b.n	800550c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054da:	4b64      	ldr	r3, [pc, #400]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a63      	ldr	r2, [pc, #396]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fd fb75 	bl	8002bd4 <HAL_GetTick>
 80054ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80054ee:	f7fd fb71 	bl	8002bd4 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e279      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005500:	4b5a      	ldr	r3, [pc, #360]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d03c      	beq.n	8005592 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01c      	beq.n	800555a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005520:	4b52      	ldr	r3, [pc, #328]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005526:	4a51      	ldr	r2, [pc, #324]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800552c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fd fb50 	bl	8002bd4 <HAL_GetTick>
 8005534:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005538:	f7fd fb4c 	bl	8002bd4 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e254      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800554a:	4b48      	ldr	r3, [pc, #288]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 800554c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ef      	beq.n	8005538 <HAL_RCC_OscConfig+0x3a8>
 8005558:	e01b      	b.n	8005592 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800555a:	4b44      	ldr	r3, [pc, #272]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 800555c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005560:	4a42      	ldr	r2, [pc, #264]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556a:	f7fd fb33 	bl	8002bd4 <HAL_GetTick>
 800556e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005572:	f7fd fb2f 	bl	8002bd4 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e237      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005584:	4b39      	ldr	r3, [pc, #228]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800558a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1ef      	bne.n	8005572 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80d2 	beq.w	8005744 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80055a0:	4b34      	ldr	r3, [pc, #208]	@ (8005674 <HAL_RCC_OscConfig+0x4e4>)
 80055a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d118      	bne.n	80055de <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80055ac:	4b31      	ldr	r3, [pc, #196]	@ (8005674 <HAL_RCC_OscConfig+0x4e4>)
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	4a30      	ldr	r2, [pc, #192]	@ (8005674 <HAL_RCC_OscConfig+0x4e4>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b8:	f7fd fb0c 	bl	8002bd4 <HAL_GetTick>
 80055bc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c0:	f7fd fb08 	bl	8002bd4 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e210      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80055d2:	4b28      	ldr	r3, [pc, #160]	@ (8005674 <HAL_RCC_OscConfig+0x4e4>)
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d108      	bne.n	80055f8 <HAL_RCC_OscConfig+0x468>
 80055e6:	4b21      	ldr	r3, [pc, #132]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 80055e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055ec:	4a1f      	ldr	r2, [pc, #124]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80055f6:	e074      	b.n	80056e2 <HAL_RCC_OscConfig+0x552>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d118      	bne.n	8005632 <HAL_RCC_OscConfig+0x4a2>
 8005600:	4b1a      	ldr	r3, [pc, #104]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005606:	4a19      	ldr	r2, [pc, #100]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005610:	4b16      	ldr	r3, [pc, #88]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005616:	4a15      	ldr	r2, [pc, #84]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800561c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005620:	4b12      	ldr	r3, [pc, #72]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005626:	4a11      	ldr	r2, [pc, #68]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005628:	f023 0304 	bic.w	r3, r3, #4
 800562c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005630:	e057      	b.n	80056e2 <HAL_RCC_OscConfig+0x552>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b05      	cmp	r3, #5
 8005638:	d11e      	bne.n	8005678 <HAL_RCC_OscConfig+0x4e8>
 800563a:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 800563c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005640:	4a0a      	ldr	r2, [pc, #40]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800564a:	4b08      	ldr	r3, [pc, #32]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 800564c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005650:	4a06      	ldr	r2, [pc, #24]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005656:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800565a:	4b04      	ldr	r3, [pc, #16]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 800565c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005660:	4a02      	ldr	r2, [pc, #8]	@ (800566c <HAL_RCC_OscConfig+0x4dc>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800566a:	e03a      	b.n	80056e2 <HAL_RCC_OscConfig+0x552>
 800566c:	44020c00 	.word	0x44020c00
 8005670:	20000088 	.word	0x20000088
 8005674:	44020800 	.word	0x44020800
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b85      	cmp	r3, #133	@ 0x85
 800567e:	d118      	bne.n	80056b2 <HAL_RCC_OscConfig+0x522>
 8005680:	4ba2      	ldr	r3, [pc, #648]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005686:	4aa1      	ldr	r2, [pc, #644]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005688:	f043 0304 	orr.w	r3, r3, #4
 800568c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005690:	4b9e      	ldr	r3, [pc, #632]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005696:	4a9d      	ldr	r2, [pc, #628]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80056a0:	4b9a      	ldr	r3, [pc, #616]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80056a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056a6:	4a99      	ldr	r2, [pc, #612]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80056b0:	e017      	b.n	80056e2 <HAL_RCC_OscConfig+0x552>
 80056b2:	4b96      	ldr	r3, [pc, #600]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80056b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056b8:	4a94      	ldr	r2, [pc, #592]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80056c2:	4b92      	ldr	r3, [pc, #584]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80056c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c8:	4a90      	ldr	r2, [pc, #576]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80056ca:	f023 0304 	bic.w	r3, r3, #4
 80056ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80056d2:	4b8e      	ldr	r3, [pc, #568]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80056d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056d8:	4a8c      	ldr	r2, [pc, #560]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80056da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d016      	beq.n	8005718 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fd fa73 	bl	8002bd4 <HAL_GetTick>
 80056ee:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f0:	e00a      	b.n	8005708 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fd fa6f 	bl	8002bd4 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e175      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005708:	4b80      	ldr	r3, [pc, #512]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 800570a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0ed      	beq.n	80056f2 <HAL_RCC_OscConfig+0x562>
 8005716:	e015      	b.n	8005744 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005718:	f7fd fa5c 	bl	8002bd4 <HAL_GetTick>
 800571c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800571e:	e00a      	b.n	8005736 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005720:	f7fd fa58 	bl	8002bd4 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e15e      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005736:	4b75      	ldr	r3, [pc, #468]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ed      	bne.n	8005720 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d036      	beq.n	80057be <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	d019      	beq.n	800578c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005758:	4b6c      	ldr	r3, [pc, #432]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6b      	ldr	r2, [pc, #428]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 800575e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005764:	f7fd fa36 	bl	8002bd4 <HAL_GetTick>
 8005768:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800576c:	f7fd fa32 	bl	8002bd4 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e13a      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800577e:	4b63      	ldr	r3, [pc, #396]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x5dc>
 800578a:	e018      	b.n	80057be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800578c:	4b5f      	ldr	r3, [pc, #380]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a5e      	ldr	r2, [pc, #376]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005798:	f7fd fa1c 	bl	8002bd4 <HAL_GetTick>
 800579c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80057a0:	f7fd fa18 	bl	8002bd4 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e120      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80057b2:	4b56      	ldr	r3, [pc, #344]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 8115 	beq.w	80059f2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b18      	cmp	r3, #24
 80057cc:	f000 80af 	beq.w	800592e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	f040 8086 	bne.w	80058e6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80057da:	4b4c      	ldr	r3, [pc, #304]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a4b      	ldr	r2, [pc, #300]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80057e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e6:	f7fd f9f5 	bl	8002bd4 <HAL_GetTick>
 80057ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80057ee:	f7fd f9f1 	bl	8002bd4 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e0f9      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005800:	4b42      	ldr	r3, [pc, #264]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f0      	bne.n	80057ee <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800580c:	4b3f      	ldr	r3, [pc, #252]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 800580e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005810:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005814:	f023 0303 	bic.w	r3, r3, #3
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005820:	0212      	lsls	r2, r2, #8
 8005822:	430a      	orrs	r2, r1
 8005824:	4939      	ldr	r1, [pc, #228]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	628b      	str	r3, [r1, #40]	@ 0x28
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582e:	3b01      	subs	r3, #1
 8005830:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	3b01      	subs	r3, #1
 800583a:	025b      	lsls	r3, r3, #9
 800583c:	b29b      	uxth	r3, r3
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005844:	3b01      	subs	r3, #1
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	3b01      	subs	r3, #1
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800585a:	492c      	ldr	r1, [pc, #176]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005860:	4b2a      	ldr	r3, [pc, #168]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	4a29      	ldr	r2, [pc, #164]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005870:	4a26      	ldr	r2, [pc, #152]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005876:	4b25      	ldr	r3, [pc, #148]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587a:	4a24      	ldr	r2, [pc, #144]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 800587c:	f043 0310 	orr.w	r3, r3, #16
 8005880:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005882:	4b22      	ldr	r3, [pc, #136]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	f023 020c 	bic.w	r2, r3, #12
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	491f      	ldr	r1, [pc, #124]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005890:	4313      	orrs	r3, r2
 8005892:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005894:	4b1d      	ldr	r3, [pc, #116]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 8005896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005898:	f023 0220 	bic.w	r2, r3, #32
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a0:	491a      	ldr	r1, [pc, #104]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058a6:	4b19      	ldr	r3, [pc, #100]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	4a18      	ldr	r2, [pc, #96]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80058ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80058b2:	4b16      	ldr	r3, [pc, #88]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a15      	ldr	r2, [pc, #84]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80058b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058be:	f7fd f989 	bl	8002bd4 <HAL_GetTick>
 80058c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80058c6:	f7fd f985 	bl	8002bd4 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e08d      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058d8:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0f0      	beq.n	80058c6 <HAL_RCC_OscConfig+0x736>
 80058e4:	e085      	b.n	80059f2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80058e6:	4b09      	ldr	r3, [pc, #36]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a08      	ldr	r2, [pc, #32]	@ (800590c <HAL_RCC_OscConfig+0x77c>)
 80058ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f2:	f7fd f96f 	bl	8002bd4 <HAL_GetTick>
 80058f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80058fa:	f7fd f96b 	bl	8002bd4 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d903      	bls.n	8005910 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e073      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
 800590c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005910:	4b3a      	ldr	r3, [pc, #232]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ee      	bne.n	80058fa <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800591c:	4b37      	ldr	r3, [pc, #220]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 800591e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005920:	4a36      	ldr	r2, [pc, #216]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 8005922:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	6293      	str	r3, [r2, #40]	@ 0x28
 800592c:	e061      	b.n	80059f2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800592e:	4b33      	ldr	r3, [pc, #204]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 8005930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005932:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005934:	4b31      	ldr	r3, [pc, #196]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 8005936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005938:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593e:	2b01      	cmp	r3, #1
 8005940:	d031      	beq.n	80059a6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f003 0203 	and.w	r2, r3, #3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d12a      	bne.n	80059a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d122      	bne.n	80059a6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800596c:	429a      	cmp	r2, r3
 800596e:	d11a      	bne.n	80059a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	0a5b      	lsrs	r3, r3, #9
 8005974:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d111      	bne.n	80059a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	0c1b      	lsrs	r3, r3, #16
 8005986:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005990:	429a      	cmp	r2, r3
 8005992:	d108      	bne.n	80059a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	0e1b      	lsrs	r3, r3, #24
 8005998:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d001      	beq.n	80059aa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e024      	b.n	80059f4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80059aa:	4b14      	ldr	r3, [pc, #80]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 80059ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ae:	08db      	lsrs	r3, r3, #3
 80059b0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d01a      	beq.n	80059f2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80059bc:	4b0f      	ldr	r3, [pc, #60]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	4a0e      	ldr	r2, [pc, #56]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 80059c2:	f023 0310 	bic.w	r3, r3, #16
 80059c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fd f904 	bl	8002bd4 <HAL_GetTick>
 80059cc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80059ce:	bf00      	nop
 80059d0:	f7fd f900 	bl	8002bd4 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	4293      	cmp	r3, r2
 80059da:	d0f9      	beq.n	80059d0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e0:	4a06      	ldr	r2, [pc, #24]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80059e6:	4b05      	ldr	r3, [pc, #20]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	4a04      	ldr	r2, [pc, #16]	@ (80059fc <HAL_RCC_OscConfig+0x86c>)
 80059ec:	f043 0310 	orr.w	r3, r3, #16
 80059f0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3720      	adds	r7, #32
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	44020c00 	.word	0x44020c00

08005a00 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e19e      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a14:	4b83      	ldr	r3, [pc, #524]	@ (8005c24 <HAL_RCC_ClockConfig+0x224>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d910      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a22:	4b80      	ldr	r3, [pc, #512]	@ (8005c24 <HAL_RCC_ClockConfig+0x224>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f023 020f 	bic.w	r2, r3, #15
 8005a2a:	497e      	ldr	r1, [pc, #504]	@ (8005c24 <HAL_RCC_ClockConfig+0x224>)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a32:	4b7c      	ldr	r3, [pc, #496]	@ (8005c24 <HAL_RCC_ClockConfig+0x224>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e186      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d012      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	4b74      	ldr	r3, [pc, #464]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d909      	bls.n	8005a76 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005a62:	4b71      	ldr	r3, [pc, #452]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	496d      	ldr	r1, [pc, #436]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d012      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	4b68      	ldr	r3, [pc, #416]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	091b      	lsrs	r3, r3, #4
 8005a8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d909      	bls.n	8005aa8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005a94:	4b64      	ldr	r3, [pc, #400]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	4961      	ldr	r1, [pc, #388]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	4b5b      	ldr	r3, [pc, #364]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d908      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005ac4:	4b58      	ldr	r3, [pc, #352]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4955      	ldr	r1, [pc, #340]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	4b50      	ldr	r3, [pc, #320]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d908      	bls.n	8005b04 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005af2:	4b4d      	ldr	r3, [pc, #308]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f023 020f 	bic.w	r2, r3, #15
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	494a      	ldr	r1, [pc, #296]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8093 	beq.w	8005c38 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d107      	bne.n	8005b2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b1a:	4b43      	ldr	r3, [pc, #268]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d121      	bne.n	8005b6a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e113      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d107      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b32:	4b3d      	ldr	r3, [pc, #244]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d115      	bne.n	8005b6a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e107      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d107      	bne.n	8005b5a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005b4a:	4b37      	ldr	r3, [pc, #220]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e0fb      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b5a:	4b33      	ldr	r3, [pc, #204]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e0f3      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f023 0203 	bic.w	r2, r3, #3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	492c      	ldr	r1, [pc, #176]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7c:	f7fd f82a 	bl	8002bd4 <HAL_GetTick>
 8005b80:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d112      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8c:	f7fd f822 	bl	8002bd4 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e0d7      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ba2:	4b21      	ldr	r3, [pc, #132]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f003 0318 	and.w	r3, r3, #24
 8005baa:	2b18      	cmp	r3, #24
 8005bac:	d1ee      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x18c>
 8005bae:	e043      	b.n	8005c38 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d112      	bne.n	8005bde <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005bba:	f7fd f80b 	bl	8002bd4 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e0c0      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bd0:	4b15      	ldr	r3, [pc, #84]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f003 0318 	and.w	r3, r3, #24
 8005bd8:	2b10      	cmp	r3, #16
 8005bda:	d1ee      	bne.n	8005bba <HAL_RCC_ClockConfig+0x1ba>
 8005bdc:	e02c      	b.n	8005c38 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d122      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005be8:	f7fc fff4 	bl	8002bd4 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e0a9      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <HAL_RCC_ClockConfig+0x228>)
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f003 0318 	and.w	r3, r3, #24
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d1ee      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x1e8>
 8005c0a:	e015      	b.n	8005c38 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005c0c:	f7fc ffe2 	bl	8002bd4 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d906      	bls.n	8005c2c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e097      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
 8005c22:	bf00      	nop
 8005c24:	40022000 	.word	0x40022000
 8005c28:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f003 0318 	and.w	r3, r3, #24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e9      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d010      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	4b44      	ldr	r3, [pc, #272]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d208      	bcs.n	8005c66 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005c54:	4b41      	ldr	r3, [pc, #260]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f023 020f 	bic.w	r2, r3, #15
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	493e      	ldr	r1, [pc, #248]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c66:	4b3e      	ldr	r3, [pc, #248]	@ (8005d60 <HAL_RCC_ClockConfig+0x360>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d210      	bcs.n	8005c96 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c74:	4b3a      	ldr	r3, [pc, #232]	@ (8005d60 <HAL_RCC_ClockConfig+0x360>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f023 020f 	bic.w	r2, r3, #15
 8005c7c:	4938      	ldr	r1, [pc, #224]	@ (8005d60 <HAL_RCC_ClockConfig+0x360>)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c84:	4b36      	ldr	r3, [pc, #216]	@ (8005d60 <HAL_RCC_ClockConfig+0x360>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d001      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e05d      	b.n	8005d52 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d010      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d208      	bcs.n	8005cc4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	4927      	ldr	r1, [pc, #156]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d012      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	4b21      	ldr	r3, [pc, #132]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d209      	bcs.n	8005cf6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	491a      	ldr	r1, [pc, #104]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d012      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	4b15      	ldr	r3, [pc, #84]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	0a1b      	lsrs	r3, r3, #8
 8005d0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d209      	bcs.n	8005d28 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005d14:	4b11      	ldr	r3, [pc, #68]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	490e      	ldr	r1, [pc, #56]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005d28:	f000 f822 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <HAL_RCC_ClockConfig+0x35c>)
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	490b      	ldr	r1, [pc, #44]	@ (8005d64 <HAL_RCC_ClockConfig+0x364>)
 8005d38:	5ccb      	ldrb	r3, [r1, r3]
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <HAL_RCC_ClockConfig+0x368>)
 8005d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d42:	4b0a      	ldr	r3, [pc, #40]	@ (8005d6c <HAL_RCC_ClockConfig+0x36c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fc feba 	bl	8002ac0 <HAL_InitTick>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005d50:	7afb      	ldrb	r3, [r7, #11]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	44020c00 	.word	0x44020c00
 8005d60:	40022000 	.word	0x40022000
 8005d64:	0800d8c8 	.word	0x0800d8c8
 8005d68:	20000084 	.word	0x20000084
 8005d6c:	20000088 	.word	0x20000088

08005d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b089      	sub	sp, #36	@ 0x24
 8005d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005d76:	4b8c      	ldr	r3, [pc, #560]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f003 0318 	and.w	r3, r3, #24
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d102      	bne.n	8005d88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d82:	4b8a      	ldr	r3, [pc, #552]	@ (8005fac <HAL_RCC_GetSysClockFreq+0x23c>)
 8005d84:	61fb      	str	r3, [r7, #28]
 8005d86:	e107      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d88:	4b87      	ldr	r3, [pc, #540]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f003 0318 	and.w	r3, r3, #24
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d112      	bne.n	8005dba <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005d94:	4b84      	ldr	r3, [pc, #528]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d009      	beq.n	8005db4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005da0:	4b81      	ldr	r3, [pc, #516]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	08db      	lsrs	r3, r3, #3
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	4a81      	ldr	r2, [pc, #516]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e0f1      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005db4:	4b7e      	ldr	r3, [pc, #504]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8005db6:	61fb      	str	r3, [r7, #28]
 8005db8:	e0ee      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dba:	4b7b      	ldr	r3, [pc, #492]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f003 0318 	and.w	r3, r3, #24
 8005dc2:	2b10      	cmp	r3, #16
 8005dc4:	d102      	bne.n	8005dcc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x244>)
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	e0e5      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dcc:	4b76      	ldr	r3, [pc, #472]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f003 0318 	and.w	r3, r3, #24
 8005dd4:	2b18      	cmp	r3, #24
 8005dd6:	f040 80dd 	bne.w	8005f94 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005dda:	4b73      	ldr	r3, [pc, #460]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005de4:	4b70      	ldr	r3, [pc, #448]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005df0:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005e00:	08db      	lsrs	r3, r3, #3
 8005e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	fb02 f303 	mul.w	r3, r2, r3
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e14:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80b7 	beq.w	8005f8e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d003      	beq.n	8005e2e <HAL_RCC_GetSysClockFreq+0xbe>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d056      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x16a>
 8005e2c:	e077      	b.n	8005f1e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005e2e:	4b5e      	ldr	r3, [pc, #376]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02d      	beq.n	8005e96 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	4a5a      	ldr	r2, [pc, #360]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8005e46:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e64:	4b50      	ldr	r3, [pc, #320]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e74:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e78:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8005e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e90:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005e94:	e065      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005fbc <HAL_RCC_GetSysClockFreq+0x24c>
 8005ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ebc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8005ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005ed8:	e043      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005fc0 <HAL_RCC_GetSysClockFreq+0x250>
 8005ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eec:	4b2e      	ldr	r3, [pc, #184]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005efc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f00:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8005f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f18:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005f1c:	e021      	b.n	8005f62 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f28:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005fc4 <HAL_RCC_GetSysClockFreq+0x254>
 8005f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f30:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f40:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f44:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8005f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005f60:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005f62:	4b11      	ldr	r3, [pc, #68]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f66:	0a5b      	lsrs	r3, r3, #9
 8005f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f7a:	edd7 6a06 	vldr	s13, [r7, #24]
 8005f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f86:	ee17 3a90 	vmov	r3, s15
 8005f8a:	61fb      	str	r3, [r7, #28]
 8005f8c:	e004      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
 8005f92:	e001      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005f94:	4b06      	ldr	r3, [pc, #24]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8005f96:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005f98:	69fb      	ldr	r3, [r7, #28]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3724      	adds	r7, #36	@ 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	44020c00 	.word	0x44020c00
 8005fac:	003d0900 	.word	0x003d0900
 8005fb0:	03d09000 	.word	0x03d09000
 8005fb4:	007a1200 	.word	0x007a1200
 8005fb8:	46000000 	.word	0x46000000
 8005fbc:	4c742400 	.word	0x4c742400
 8005fc0:	4af42400 	.word	0x4af42400
 8005fc4:	4a742400 	.word	0x4a742400

08005fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005fcc:	f7ff fed0 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	4b08      	ldr	r3, [pc, #32]	@ (8005ff4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005fd6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005fda:	4907      	ldr	r1, [pc, #28]	@ (8005ff8 <HAL_RCC_GetHCLKFreq+0x30>)
 8005fdc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005fde:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	4a05      	ldr	r2, [pc, #20]	@ (8005ffc <HAL_RCC_GetHCLKFreq+0x34>)
 8005fe8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005fea:	4b04      	ldr	r3, [pc, #16]	@ (8005ffc <HAL_RCC_GetHCLKFreq+0x34>)
 8005fec:	681b      	ldr	r3, [r3, #0]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	44020c00 	.word	0x44020c00
 8005ff8:	0800d8c8 	.word	0x0800d8c8
 8005ffc:	20000084 	.word	0x20000084

08006000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006004:	f7ff ffe0 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4904      	ldr	r1, [pc, #16]	@ (8006028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	44020c00 	.word	0x44020c00
 8006028:	0800d8d8 	.word	0x0800d8d8

0800602c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006030:	f7ff ffca 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8006034:	4602      	mov	r2, r0
 8006036:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4904      	ldr	r1, [pc, #16]	@ (8006054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006042:	5ccb      	ldrb	r3, [r1, r3]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	bd80      	pop	{r7, pc}
 8006050:	44020c00 	.word	0x44020c00
 8006054:	0800d8d8 	.word	0x0800d8d8

08006058 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800605c:	f7ff ffb4 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8006060:	4602      	mov	r2, r0
 8006062:	4b06      	ldr	r3, [pc, #24]	@ (800607c <HAL_RCC_GetPCLK3Freq+0x24>)
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	0b1b      	lsrs	r3, r3, #12
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	4904      	ldr	r1, [pc, #16]	@ (8006080 <HAL_RCC_GetPCLK3Freq+0x28>)
 800606e:	5ccb      	ldrb	r3, [r1, r3]
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	44020c00 	.word	0x44020c00
 8006080:	0800d8d8 	.word	0x0800d8d8

08006084 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006088:	b0ba      	sub	sp, #232	@ 0xe8
 800608a:	af00      	add	r7, sp, #0
 800608c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006090:	2300      	movs	r3, #0
 8006092:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006096:	2300      	movs	r3, #0
 8006098:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800609c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80060a8:	2500      	movs	r5, #0
 80060aa:	ea54 0305 	orrs.w	r3, r4, r5
 80060ae:	d00b      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80060b0:	4bcd      	ldr	r3, [pc, #820]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80060b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060b6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80060ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c0:	4ac9      	ldr	r2, [pc, #804]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80060c2:	430b      	orrs	r3, r1
 80060c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f002 0801 	and.w	r8, r2, #1
 80060d4:	f04f 0900 	mov.w	r9, #0
 80060d8:	ea58 0309 	orrs.w	r3, r8, r9
 80060dc:	d042      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80060de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d823      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80060e8:	a201      	add	r2, pc, #4	@ (adr r2, 80060f0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006139 	.word	0x08006139
 80060f4:	08006109 	.word	0x08006109
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	08006139 	.word	0x08006139
 8006100:	08006139 	.word	0x08006139
 8006104:	08006139 	.word	0x08006139
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800610c:	3308      	adds	r3, #8
 800610e:	4618      	mov	r0, r3
 8006110:	f003 f90c 	bl	800932c <RCCEx_PLL2_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800611a:	e00e      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800611c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006120:	3330      	adds	r3, #48	@ 0x30
 8006122:	4618      	mov	r0, r3
 8006124:	f003 f99a 	bl	800945c <RCCEx_PLL3_Config>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800612e:	e004      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006136:	e000      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800613a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10c      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006142:	4ba9      	ldr	r3, [pc, #676]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006148:	f023 0107 	bic.w	r1, r3, #7
 800614c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006152:	4aa5      	ldr	r2, [pc, #660]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006154:	430b      	orrs	r3, r1
 8006156:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800615a:	e003      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006160:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006164:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f002 0a02 	and.w	sl, r2, #2
 8006170:	f04f 0b00 	mov.w	fp, #0
 8006174:	ea5a 030b 	orrs.w	r3, sl, fp
 8006178:	f000 8088 	beq.w	800628c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800617c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006182:	2b28      	cmp	r3, #40	@ 0x28
 8006184:	d868      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	08006261 	.word	0x08006261
 8006190:	08006259 	.word	0x08006259
 8006194:	08006259 	.word	0x08006259
 8006198:	08006259 	.word	0x08006259
 800619c:	08006259 	.word	0x08006259
 80061a0:	08006259 	.word	0x08006259
 80061a4:	08006259 	.word	0x08006259
 80061a8:	08006259 	.word	0x08006259
 80061ac:	08006231 	.word	0x08006231
 80061b0:	08006259 	.word	0x08006259
 80061b4:	08006259 	.word	0x08006259
 80061b8:	08006259 	.word	0x08006259
 80061bc:	08006259 	.word	0x08006259
 80061c0:	08006259 	.word	0x08006259
 80061c4:	08006259 	.word	0x08006259
 80061c8:	08006259 	.word	0x08006259
 80061cc:	08006245 	.word	0x08006245
 80061d0:	08006259 	.word	0x08006259
 80061d4:	08006259 	.word	0x08006259
 80061d8:	08006259 	.word	0x08006259
 80061dc:	08006259 	.word	0x08006259
 80061e0:	08006259 	.word	0x08006259
 80061e4:	08006259 	.word	0x08006259
 80061e8:	08006259 	.word	0x08006259
 80061ec:	08006261 	.word	0x08006261
 80061f0:	08006259 	.word	0x08006259
 80061f4:	08006259 	.word	0x08006259
 80061f8:	08006259 	.word	0x08006259
 80061fc:	08006259 	.word	0x08006259
 8006200:	08006259 	.word	0x08006259
 8006204:	08006259 	.word	0x08006259
 8006208:	08006259 	.word	0x08006259
 800620c:	08006261 	.word	0x08006261
 8006210:	08006259 	.word	0x08006259
 8006214:	08006259 	.word	0x08006259
 8006218:	08006259 	.word	0x08006259
 800621c:	08006259 	.word	0x08006259
 8006220:	08006259 	.word	0x08006259
 8006224:	08006259 	.word	0x08006259
 8006228:	08006259 	.word	0x08006259
 800622c:	08006261 	.word	0x08006261
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006234:	3308      	adds	r3, #8
 8006236:	4618      	mov	r0, r3
 8006238:	f003 f878 	bl	800932c <RCCEx_PLL2_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006242:	e00e      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006248:	3330      	adds	r3, #48	@ 0x30
 800624a:	4618      	mov	r0, r3
 800624c:	f003 f906 	bl	800945c <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006256:	e004      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800625e:	e000      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006262:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10c      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800626a:	4b5f      	ldr	r3, [pc, #380]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800626c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006270:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627a:	4a5b      	ldr	r2, [pc, #364]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800627c:	430b      	orrs	r3, r1
 800627e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006282:	e003      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006284:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006288:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800628c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f002 0304 	and.w	r3, r2, #4
 8006298:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800629c:	2300      	movs	r3, #0
 800629e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80062a6:	460b      	mov	r3, r1
 80062a8:	4313      	orrs	r3, r2
 80062aa:	d04e      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80062ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80062b6:	d02c      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80062b8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80062bc:	d825      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80062be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c2:	d028      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80062c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c8:	d81f      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80062ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80062cc:	d025      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80062ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80062d0:	d81b      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80062d2:	2b80      	cmp	r3, #128	@ 0x80
 80062d4:	d00f      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80062d6:	2b80      	cmp	r3, #128	@ 0x80
 80062d8:	d817      	bhi.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01f      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80062de:	2b40      	cmp	r3, #64	@ 0x40
 80062e0:	d113      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062e6:	3308      	adds	r3, #8
 80062e8:	4618      	mov	r0, r3
 80062ea:	f003 f81f 	bl	800932c <RCCEx_PLL2_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 80062f4:	e014      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062fa:	3330      	adds	r3, #48	@ 0x30
 80062fc:	4618      	mov	r0, r3
 80062fe:	f003 f8ad 	bl	800945c <RCCEx_PLL3_Config>
 8006302:	4603      	mov	r3, r0
 8006304:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006308:	e00a      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006310:	e006      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006312:	bf00      	nop
 8006314:	e004      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800631e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006320:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10c      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006328:	4b2f      	ldr	r3, [pc, #188]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800632a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800632e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006338:	4a2b      	ldr	r2, [pc, #172]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800633a:	430b      	orrs	r3, r1
 800633c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006340:	e003      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006342:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006346:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800634a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f002 0308 	and.w	r3, r2, #8
 8006356:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800635a:	2300      	movs	r3, #0
 800635c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006360:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006364:	460b      	mov	r3, r1
 8006366:	4313      	orrs	r3, r2
 8006368:	d056      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800636a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800636e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006370:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006374:	d031      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006376:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800637a:	d82a      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800637c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006380:	d02d      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006386:	d824      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006388:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800638c:	d029      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800638e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006392:	d81e      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006398:	d011      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800639a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800639e:	d818      	bhi.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d023      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x368>
 80063a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063a8:	d113      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063ae:	3308      	adds	r3, #8
 80063b0:	4618      	mov	r0, r3
 80063b2:	f002 ffbb 	bl	800932c <RCCEx_PLL2_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80063bc:	e017      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063c2:	3330      	adds	r3, #48	@ 0x30
 80063c4:	4618      	mov	r0, r3
 80063c6:	f003 f849 	bl	800945c <RCCEx_PLL3_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 80063d0:	e00d      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80063d8:	e009      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80063da:	bf00      	nop
 80063dc:	e007      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80063de:	bf00      	nop
 80063e0:	e005      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80063e2:	bf00      	nop
 80063e4:	e003      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80063e6:	bf00      	nop
 80063e8:	44020c00 	.word	0x44020c00
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80063f6:	4bb9      	ldr	r3, [pc, #740]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063fc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006406:	4ab5      	ldr	r2, [pc, #724]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006408:	430b      	orrs	r3, r1
 800640a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800640e:	e003      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006414:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006418:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f002 0310 	and.w	r3, r2, #16
 8006424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800642e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	d053      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800643c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800643e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006442:	d031      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006444:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006448:	d82a      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800644a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800644e:	d02d      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006450:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006454:	d824      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006456:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800645a:	d029      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800645c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006460:	d81e      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006466:	d011      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646c:	d818      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d020      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006476:	d113      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800647c:	3308      	adds	r3, #8
 800647e:	4618      	mov	r0, r3
 8006480:	f002 ff54 	bl	800932c <RCCEx_PLL2_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800648a:	e014      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800648c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006490:	3330      	adds	r3, #48	@ 0x30
 8006492:	4618      	mov	r0, r3
 8006494:	f002 ffe2 	bl	800945c <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800649e:	e00a      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80064a6:	e006      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80064a8:	bf00      	nop
 80064aa:	e004      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80064ac:	bf00      	nop
 80064ae:	e002      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80064b0:	bf00      	nop
 80064b2:	e000      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80064b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10c      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80064be:	4b87      	ldr	r3, [pc, #540]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80064c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064ce:	4a83      	ldr	r2, [pc, #524]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064d0:	430b      	orrs	r3, r1
 80064d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80064d6:	e003      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80064dc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80064e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f002 0320 	and.w	r3, r2, #32
 80064ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064f0:	2300      	movs	r3, #0
 80064f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4313      	orrs	r3, r2
 80064fe:	d053      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006500:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006506:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800650a:	d031      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800650c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006510:	d82a      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006516:	d02d      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800651c:	d824      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800651e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006522:	d029      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006524:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006528:	d81e      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800652a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800652e:	d011      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006534:	d818      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d020      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800653a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800653e:	d113      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006540:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006544:	3308      	adds	r3, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f002 fef0 	bl	800932c <RCCEx_PLL2_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006552:	e014      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006558:	3330      	adds	r3, #48	@ 0x30
 800655a:	4618      	mov	r0, r3
 800655c:	f002 ff7e 	bl	800945c <RCCEx_PLL3_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006566:	e00a      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800656e:	e006      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006570:	bf00      	nop
 8006572:	e004      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006574:	bf00      	nop
 8006576:	e002      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006578:	bf00      	nop
 800657a:	e000      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800657c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800657e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10c      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006586:	4b55      	ldr	r3, [pc, #340]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800658c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006596:	4a51      	ldr	r2, [pc, #324]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006598:	430b      	orrs	r3, r1
 800659a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800659e:	e003      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80065a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80065b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d053      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80065c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80065d2:	d031      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80065d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80065d8:	d82a      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80065da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065de:	d02d      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80065e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065e4:	d824      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80065e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065ea:	d029      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80065ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065f0:	d81e      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80065f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065f6:	d011      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80065f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065fc:	d818      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d020      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006606:	d113      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800660c:	3308      	adds	r3, #8
 800660e:	4618      	mov	r0, r3
 8006610:	f002 fe8c 	bl	800932c <RCCEx_PLL2_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800661a:	e014      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800661c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006620:	3330      	adds	r3, #48	@ 0x30
 8006622:	4618      	mov	r0, r3
 8006624:	f002 ff1a 	bl	800945c <RCCEx_PLL3_Config>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800662e:	e00a      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006636:	e006      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006638:	bf00      	nop
 800663a:	e004      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800663c:	bf00      	nop
 800663e:	e002      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006640:	bf00      	nop
 8006642:	e000      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006646:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10c      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800664e:	4b23      	ldr	r3, [pc, #140]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006654:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800665c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800665e:	4a1f      	ldr	r2, [pc, #124]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006660:	430b      	orrs	r3, r1
 8006662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006666:	e003      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006668:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800666c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800667c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006680:	2300      	movs	r3, #0
 8006682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006686:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800668a:	460b      	mov	r3, r1
 800668c:	4313      	orrs	r3, r2
 800668e:	d03d      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006696:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800669a:	d01b      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800669c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066a0:	d814      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x648>
 80066a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066a6:	d017      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80066a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ac:	d80e      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x648>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d016      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80066b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b6:	d109      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066bc:	3330      	adds	r3, #48	@ 0x30
 80066be:	4618      	mov	r0, r3
 80066c0:	f002 fecc 	bl	800945c <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80066ca:	e00a      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80066d2:	e006      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80066d4:	bf00      	nop
 80066d6:	e004      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 80066d8:	bf00      	nop
 80066da:	e002      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80066dc:	44020c00 	.word	0x44020c00
        break;
 80066e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10c      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80066ea:	4b99      	ldr	r3, [pc, #612]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066f0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80066f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066fa:	4a95      	ldr	r2, [pc, #596]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066fc:	430b      	orrs	r3, r1
 80066fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006702:	e003      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006704:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006708:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800670c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800671c:	2300      	movs	r3, #0
 800671e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006722:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006726:	460b      	mov	r3, r1
 8006728:	4313      	orrs	r3, r2
 800672a:	d03b      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800672c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006732:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006736:	d01b      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8006738:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800673c:	d814      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800673e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006742:	d017      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8006744:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006748:	d80e      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d014      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800674e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006752:	d109      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006758:	3330      	adds	r3, #48	@ 0x30
 800675a:	4618      	mov	r0, r3
 800675c:	f002 fe7e 	bl	800945c <RCCEx_PLL3_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006766:	e008      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800676e:	e004      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006770:	bf00      	nop
 8006772:	e002      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8006778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10c      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006782:	4b73      	ldr	r3, [pc, #460]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006784:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006788:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800678c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006792:	4a6f      	ldr	r2, [pc, #444]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006794:	430b      	orrs	r3, r1
 8006796:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800679a:	e003      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80067a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80067b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d03d      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80067c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067d0:	d01b      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x786>
 80067d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067d6:	d814      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80067d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067dc:	d017      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80067de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067e2:	d80e      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d014      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80067e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ec:	d109      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067f2:	3330      	adds	r3, #48	@ 0x30
 80067f4:	4618      	mov	r0, r3
 80067f6:	f002 fe31 	bl	800945c <RCCEx_PLL3_Config>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006800:	e008      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006808:	e004      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8006812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006814:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10d      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800681c:	4b4c      	ldr	r3, [pc, #304]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800681e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006822:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800682a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800682e:	4a48      	ldr	r2, [pc, #288]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006830:	430b      	orrs	r3, r1
 8006832:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006836:	e003      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006838:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800683c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006840:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800684c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006850:	2300      	movs	r3, #0
 8006852:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006856:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d035      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006860:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800686c:	d015      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800686e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006872:	d80e      	bhi.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d012      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800687c:	d109      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800687e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006882:	3330      	adds	r3, #48	@ 0x30
 8006884:	4618      	mov	r0, r3
 8006886:	f002 fde9 	bl	800945c <RCCEx_PLL3_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006890:	e006      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006898:	e002      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800689e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10d      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80068a8:	4b29      	ldr	r3, [pc, #164]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068ae:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80068b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ba:	4a25      	ldr	r2, [pc, #148]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068bc:	430b      	orrs	r3, r1
 80068be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80068c2:	e003      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80068c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80068cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	2100      	movs	r1, #0
 80068d6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80068da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068e6:	460b      	mov	r3, r1
 80068e8:	4313      	orrs	r3, r2
 80068ea:	d037      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80068ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068f8:	d015      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80068fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068fe:	d80e      	bhi.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d012      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006904:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006908:	d109      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800690a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800690e:	3330      	adds	r3, #48	@ 0x30
 8006910:	4618      	mov	r0, r3
 8006912:	f002 fda3 	bl	800945c <RCCEx_PLL3_Config>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800691c:	e006      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006924:	e002      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800692a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800692c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10f      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8006934:	4b06      	ldr	r3, [pc, #24]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800693a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800693e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006946:	4a02      	ldr	r2, [pc, #8]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006948:	430b      	orrs	r3, r1
 800694a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800694e:	e005      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8006950:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006954:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006958:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800695c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	2100      	movs	r1, #0
 8006966:	67b9      	str	r1, [r7, #120]	@ 0x78
 8006968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800696c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800696e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006972:	460b      	mov	r3, r1
 8006974:	4313      	orrs	r3, r2
 8006976:	d00e      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006978:	4bb8      	ldr	r3, [pc, #736]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4ab7      	ldr	r2, [pc, #732]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800697e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006982:	61d3      	str	r3, [r2, #28]
 8006984:	4bb5      	ldr	r3, [pc, #724]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006986:	69d9      	ldr	r1, [r3, #28]
 8006988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800698c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006990:	4ab2      	ldr	r2, [pc, #712]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006992:	430b      	orrs	r3, r1
 8006994:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80069a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80069a4:	2300      	movs	r3, #0
 80069a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069ac:	460b      	mov	r3, r1
 80069ae:	4313      	orrs	r3, r2
 80069b0:	d055      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80069b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069ba:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80069be:	d031      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80069c0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80069c4:	d82a      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80069c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ca:	d02d      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80069cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d0:	d824      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80069d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069d6:	d029      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80069d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069dc:	d81e      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80069de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e2:	d011      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80069e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e8:	d818      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d020      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80069ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069f2:	d113      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069f8:	3308      	adds	r3, #8
 80069fa:	4618      	mov	r0, r3
 80069fc:	f002 fc96 	bl	800932c <RCCEx_PLL2_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006a06:	e014      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a0c:	3330      	adds	r3, #48	@ 0x30
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f002 fd24 	bl	800945c <RCCEx_PLL3_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006a1a:	e00a      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006a22:	e006      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006a24:	bf00      	nop
 8006a26:	e004      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006a28:	bf00      	nop
 8006a2a:	e002      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8006a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10d      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006a3a:	4b88      	ldr	r3, [pc, #544]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006a3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a40:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006a44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a4c:	4a83      	ldr	r2, [pc, #524]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006a54:	e003      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006a5a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a70:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a74:	460b      	mov	r3, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	d055      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a82:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006a86:	d031      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8006a88:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006a8c:	d82a      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006a8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a92:	d02d      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8006a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a98:	d824      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006a9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a9e:	d029      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006aa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006aa4:	d81e      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aaa:	d011      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab0:	d818      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d020      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aba:	d113      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 fc32 	bl	800932c <RCCEx_PLL2_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006ace:	e014      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ad0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ad4:	3330      	adds	r3, #48	@ 0x30
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f002 fcc0 	bl	800945c <RCCEx_PLL3_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006ae2:	e00a      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006aea:	e006      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006aec:	bf00      	nop
 8006aee:	e004      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006af0:	bf00      	nop
 8006af2:	e002      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8006af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10d      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006b02:	4b56      	ldr	r3, [pc, #344]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006b0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b14:	4a51      	ldr	r2, [pc, #324]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006b1c:	e003      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b22:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b32:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b34:	2300      	movs	r3, #0
 8006b36:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	d032      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	d80f      	bhi.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d211      	bcs.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d911      	bls.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d109      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b5e:	3308      	adds	r3, #8
 8006b60:	4618      	mov	r0, r3
 8006b62:	f002 fbe3 	bl	800932c <RCCEx_PLL2_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006b6c:	e006      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006b74:	e002      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006b76:	bf00      	nop
 8006b78:	e000      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8006b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10d      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006b84:	4b35      	ldr	r3, [pc, #212]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b8a:	f023 0107 	bic.w	r1, r3, #7
 8006b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b96:	4a31      	ldr	r2, [pc, #196]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006b9e:	e003      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ba4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006ba8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	d024      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d005      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006bda:	e002      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006bdc:	bf00      	nop
 8006bde:	e000      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8006be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10d      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006bea:	4b1c      	ldr	r3, [pc, #112]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bf0:	f023 0108 	bic.w	r1, r3, #8
 8006bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bfc:	4a17      	ldr	r2, [pc, #92]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006c04:	e003      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c06:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c0a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c20:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c24:	460b      	mov	r3, r1
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f000 80b9 	beq.w	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	4a0b      	ldr	r2, [pc, #44]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c38:	f7fb ffcc 	bl	8002bd4 <HAL_GetTick>
 8006c3c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006c40:	e010      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c42:	f7fb ffc7 	bl	8002bd4 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d908      	bls.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006c58:	e00a      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8006c5a:	bf00      	nop
 8006c5c:	44020c00 	.word	0x44020c00
 8006c60:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006c64:	4bba      	ldr	r3, [pc, #744]	@ (8006f50 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8006c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0e8      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8006c70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f040 808e 	bne.w	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c7a:	4bb6      	ldr	r3, [pc, #728]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d023      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c94:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d01b      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ca0:	4bac      	ldr	r3, [pc, #688]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006caa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cae:	4ba9      	ldr	r3, [pc, #676]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cb4:	4aa7      	ldr	r2, [pc, #668]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cbe:	4ba5      	ldr	r3, [pc, #660]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cc4:	4aa3      	ldr	r2, [pc, #652]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cce:	4aa1      	ldr	r2, [pc, #644]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d019      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce4:	f7fb ff76 	bl	8002bd4 <HAL_GetTick>
 8006ce8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cec:	e00d      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fb ff71 	bl	8002bd4 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf8:	1ad2      	subs	r2, r2, r3
 8006cfa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d903      	bls.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8006d08:	e006      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d0a:	4b92      	ldr	r3, [pc, #584]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0ea      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8006d18:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d135      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d30:	d110      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8006d32:	4b88      	ldr	r3, [pc, #544]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d42:	091b      	lsrs	r3, r3, #4
 8006d44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d48:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006d4c:	4a81      	ldr	r2, [pc, #516]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	61d3      	str	r3, [r2, #28]
 8006d52:	e005      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006d54:	4b7f      	ldr	r3, [pc, #508]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	4a7e      	ldr	r2, [pc, #504]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d5a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d5e:	61d3      	str	r3, [r2, #28]
 8006d60:	4b7c      	ldr	r3, [pc, #496]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d66:	4a7b      	ldr	r2, [pc, #492]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006d70:	4b78      	ldr	r3, [pc, #480]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d72:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d82:	4a74      	ldr	r2, [pc, #464]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006d84:	430b      	orrs	r3, r1
 8006d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006d8a:	e008      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8006d94:	e003      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d96:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d9a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dac:	2300      	movs	r3, #0
 8006dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006db0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006db4:	460b      	mov	r3, r1
 8006db6:	4313      	orrs	r3, r2
 8006db8:	d035      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dc2:	2b30      	cmp	r3, #48	@ 0x30
 8006dc4:	d014      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8006dc6:	2b30      	cmp	r3, #48	@ 0x30
 8006dc8:	d80e      	bhi.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	d012      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d80a      	bhi.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d010      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8006dd6:	2b10      	cmp	r3, #16
 8006dd8:	d106      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dda:	4b5e      	ldr	r3, [pc, #376]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dde:	4a5d      	ldr	r2, [pc, #372]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006de4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006de6:	e008      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006dee:	e004      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006df0:	bf00      	nop
 8006df2:	e002      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006df4:	bf00      	nop
 8006df6:	e000      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8006df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10d      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006e02:	4b54      	ldr	r3, [pc, #336]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e14:	4a4f      	ldr	r2, [pc, #316]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e16:	430b      	orrs	r3, r1
 8006e18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006e1c:	e003      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e22:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e34:	2300      	movs	r3, #0
 8006e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	d033      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8006e4e:	2b40      	cmp	r3, #64	@ 0x40
 8006e50:	d007      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006e52:	e010      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e54:	4b3f      	ldr	r3, [pc, #252]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e58:	4a3e      	ldr	r2, [pc, #248]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e5e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006e60:	e00d      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e66:	3308      	adds	r3, #8
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f002 fa5f 	bl	800932c <RCCEx_PLL2_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006e74:	e003      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10d      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006e86:	4b33      	ldr	r3, [pc, #204]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e8c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006e90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e98:	4a2e      	ldr	r2, [pc, #184]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ea0:	e003      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ea6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eb8:	2300      	movs	r3, #0
 8006eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ebc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	d04c      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d827      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8006ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006eed 	.word	0x08006eed
 8006edc:	08006efb 	.word	0x08006efb
 8006ee0:	08006f0f 	.word	0x08006f0f
 8006ee4:	08006f2b 	.word	0x08006f2b
 8006ee8:	08006f2b 	.word	0x08006f2b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eec:	4b19      	ldr	r3, [pc, #100]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef0:	4a18      	ldr	r2, [pc, #96]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006ef8:	e018      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006efe:	3308      	adds	r3, #8
 8006f00:	4618      	mov	r0, r3
 8006f02:	f002 fa13 	bl	800932c <RCCEx_PLL2_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006f0c:	e00e      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f12:	3330      	adds	r3, #48	@ 0x30
 8006f14:	4618      	mov	r0, r3
 8006f16:	f002 faa1 	bl	800945c <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8006f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d111      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006f34:	4b07      	ldr	r3, [pc, #28]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f3a:	f023 0107 	bic.w	r1, r3, #7
 8006f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f46:	4a03      	ldr	r2, [pc, #12]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006f4e:	e007      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8006f50:	44020800 	.word	0x44020800
 8006f54:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f5c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f6e:	2300      	movs	r3, #0
 8006f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f76:	460b      	mov	r3, r1
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f000 8081 	beq.w	8007080 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d85f      	bhi.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8006f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08007015 	.word	0x08007015
 8006f94:	0800704b 	.word	0x0800704b
 8006f98:	0800704b 	.word	0x0800704b
 8006f9c:	0800704b 	.word	0x0800704b
 8006fa0:	0800704b 	.word	0x0800704b
 8006fa4:	0800704b 	.word	0x0800704b
 8006fa8:	0800704b 	.word	0x0800704b
 8006fac:	0800704b 	.word	0x0800704b
 8006fb0:	08007023 	.word	0x08007023
 8006fb4:	0800704b 	.word	0x0800704b
 8006fb8:	0800704b 	.word	0x0800704b
 8006fbc:	0800704b 	.word	0x0800704b
 8006fc0:	0800704b 	.word	0x0800704b
 8006fc4:	0800704b 	.word	0x0800704b
 8006fc8:	0800704b 	.word	0x0800704b
 8006fcc:	0800704b 	.word	0x0800704b
 8006fd0:	08007037 	.word	0x08007037
 8006fd4:	0800704b 	.word	0x0800704b
 8006fd8:	0800704b 	.word	0x0800704b
 8006fdc:	0800704b 	.word	0x0800704b
 8006fe0:	0800704b 	.word	0x0800704b
 8006fe4:	0800704b 	.word	0x0800704b
 8006fe8:	0800704b 	.word	0x0800704b
 8006fec:	0800704b 	.word	0x0800704b
 8006ff0:	08007053 	.word	0x08007053
 8006ff4:	0800704b 	.word	0x0800704b
 8006ff8:	0800704b 	.word	0x0800704b
 8006ffc:	0800704b 	.word	0x0800704b
 8007000:	0800704b 	.word	0x0800704b
 8007004:	0800704b 	.word	0x0800704b
 8007008:	0800704b 	.word	0x0800704b
 800700c:	0800704b 	.word	0x0800704b
 8007010:	08007053 	.word	0x08007053
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007014:	4bb9      	ldr	r3, [pc, #740]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007018:	4ab8      	ldr	r2, [pc, #736]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800701a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800701e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007020:	e018      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007026:	3308      	adds	r3, #8
 8007028:	4618      	mov	r0, r3
 800702a:	f002 f97f 	bl	800932c <RCCEx_PLL2_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007034:	e00e      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800703a:	3330      	adds	r3, #48	@ 0x30
 800703c:	4618      	mov	r0, r3
 800703e:	f002 fa0d 	bl	800945c <RCCEx_PLL3_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007048:	e004      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007050:	e000      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8007052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007054:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10d      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800705c:	4ba7      	ldr	r3, [pc, #668]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800705e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007062:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800706a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800706e:	4aa3      	ldr	r2, [pc, #652]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007070:	430b      	orrs	r3, r1
 8007072:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800707c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800708c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800708e:	2300      	movs	r3, #0
 8007090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007092:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007096:	460b      	mov	r3, r1
 8007098:	4313      	orrs	r3, r2
 800709a:	d04e      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800709c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a8:	d02e      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80070aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ae:	d827      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80070b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80070b2:	d02b      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80070b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80070b6:	d823      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80070b8:	2b80      	cmp	r3, #128	@ 0x80
 80070ba:	d017      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80070bc:	2b80      	cmp	r3, #128	@ 0x80
 80070be:	d81f      	bhi.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80070c4:	2b40      	cmp	r3, #64	@ 0x40
 80070c6:	d007      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80070c8:	e01a      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ca:	4b8c      	ldr	r3, [pc, #560]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80070cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ce:	4a8b      	ldr	r2, [pc, #556]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80070d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070d4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80070d6:	e01a      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070dc:	3308      	adds	r3, #8
 80070de:	4618      	mov	r0, r3
 80070e0:	f002 f924 	bl	800932c <RCCEx_PLL2_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80070ea:	e010      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070f0:	3330      	adds	r3, #48	@ 0x30
 80070f2:	4618      	mov	r0, r3
 80070f4:	f002 f9b2 	bl	800945c <RCCEx_PLL3_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80070fe:	e006      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007106:	e002      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007108:	bf00      	nop
 800710a:	e000      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800710c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800710e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10d      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007116:	4b79      	ldr	r3, [pc, #484]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800711c:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8007120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007124:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007128:	4974      	ldr	r1, [pc, #464]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007130:	e003      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007132:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007136:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800713a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007146:	623b      	str	r3, [r7, #32]
 8007148:	2300      	movs	r3, #0
 800714a:	627b      	str	r3, [r7, #36]	@ 0x24
 800714c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007150:	460b      	mov	r3, r1
 8007152:	4313      	orrs	r3, r2
 8007154:	d055      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800715a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800715e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007162:	d031      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8007164:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007168:	d82a      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800716a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800716e:	d02d      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8007170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007174:	d824      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007176:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800717a:	d029      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 800717c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007180:	d81e      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007186:	d011      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800718c:	d818      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d020      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8007192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007196:	d113      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800719c:	3308      	adds	r3, #8
 800719e:	4618      	mov	r0, r3
 80071a0:	f002 f8c4 	bl	800932c <RCCEx_PLL2_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80071aa:	e014      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071b0:	3330      	adds	r3, #48	@ 0x30
 80071b2:	4618      	mov	r0, r3
 80071b4:	f002 f952 	bl	800945c <RCCEx_PLL3_Config>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80071be:	e00a      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80071c6:	e006      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80071c8:	bf00      	nop
 80071ca:	e004      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80071cc:	bf00      	nop
 80071ce:	e002      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80071d0:	bf00      	nop
 80071d2:	e000      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80071d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10d      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80071de:	4b47      	ldr	r3, [pc, #284]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80071e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071e4:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80071e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80071f0:	4942      	ldr	r1, [pc, #264]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80071f8:	e003      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071fe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	2100      	movs	r1, #0
 800720c:	61b9      	str	r1, [r7, #24]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007218:	460b      	mov	r3, r1
 800721a:	4313      	orrs	r3, r2
 800721c:	d03c      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800721e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007226:	2b03      	cmp	r3, #3
 8007228:	d81b      	bhi.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 800722a:	a201      	add	r2, pc, #4	@ (adr r2, 8007230 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	0800726b 	.word	0x0800726b
 8007234:	08007241 	.word	0x08007241
 8007238:	0800724f 	.word	0x0800724f
 800723c:	0800726b 	.word	0x0800726b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007240:	4b2e      	ldr	r3, [pc, #184]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007244:	4a2d      	ldr	r2, [pc, #180]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800724a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800724c:	e00e      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800724e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007252:	3308      	adds	r3, #8
 8007254:	4618      	mov	r0, r3
 8007256:	f002 f869 	bl	800932c <RCCEx_PLL2_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007260:	e004      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 800726a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007274:	4b21      	ldr	r3, [pc, #132]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007276:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800727a:	f023 0203 	bic.w	r2, r3, #3
 800727e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007282:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007286:	491d      	ldr	r1, [pc, #116]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800728e:	e003      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007294:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	2100      	movs	r1, #0
 80072a2:	6139      	str	r1, [r7, #16]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80072ae:	460b      	mov	r3, r1
 80072b0:	4313      	orrs	r3, r2
 80072b2:	d03c      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80072b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c0:	d00e      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80072c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c6:	d815      	bhi.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d019      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80072cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d0:	d110      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d2:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80072d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d6:	4a09      	ldr	r2, [pc, #36]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80072d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80072de:	e010      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072e4:	3308      	adds	r3, #8
 80072e6:	4618      	mov	r0, r3
 80072e8:	f002 f820 	bl	800932c <RCCEx_PLL2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80072f2:	e006      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80072fa:	e002      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 80072fc:	44020c00 	.word	0x44020c00
        break;
 8007300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007302:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10d      	bne.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800730a:	4b3d      	ldr	r3, [pc, #244]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800730c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800731c:	4938      	ldr	r1, [pc, #224]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007324:	e003      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007326:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800732a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800732e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	2100      	movs	r1, #0
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	f003 0310 	and.w	r3, r3, #16
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007344:	460b      	mov	r3, r1
 8007346:	4313      	orrs	r3, r2
 8007348:	d038      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800734a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800734e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007352:	2b30      	cmp	r3, #48	@ 0x30
 8007354:	d01b      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8007356:	2b30      	cmp	r3, #48	@ 0x30
 8007358:	d815      	bhi.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 800735a:	2b10      	cmp	r3, #16
 800735c:	d002      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 800735e:	2b20      	cmp	r3, #32
 8007360:	d007      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8007362:	e010      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007364:	4b26      	ldr	r3, [pc, #152]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007368:	4a25      	ldr	r2, [pc, #148]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800736a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800736e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007370:	e00e      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007376:	3330      	adds	r3, #48	@ 0x30
 8007378:	4618      	mov	r0, r3
 800737a:	f002 f86f 	bl	800945c <RCCEx_PLL3_Config>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007384:	e004      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 800738e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007390:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10d      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007398:	4b19      	ldr	r3, [pc, #100]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800739a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800739e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80073a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80073aa:	4915      	ldr	r1, [pc, #84]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80073b2:	e003      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	2100      	movs	r1, #0
 80073c6:	6039      	str	r1, [r7, #0]
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	607b      	str	r3, [r7, #4]
 80073ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073d2:	460b      	mov	r3, r1
 80073d4:	4313      	orrs	r3, r2
 80073d6:	d00c      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80073d8:	4b09      	ldr	r3, [pc, #36]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80073da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80073ea:	4905      	ldr	r1, [pc, #20]	@ (8007400 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80073f2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	37e8      	adds	r7, #232	@ 0xe8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007400:	44020c00 	.word	0x44020c00

08007404 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007404:	b480      	push	{r7}
 8007406:	b08b      	sub	sp, #44	@ 0x2c
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800740c:	4bae      	ldr	r3, [pc, #696]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800740e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007414:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007416:	4bac      	ldr	r3, [pc, #688]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007420:	4ba9      	ldr	r3, [pc, #676]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007424:	0a1b      	lsrs	r3, r3, #8
 8007426:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800742a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800742c:	4ba6      	ldr	r3, [pc, #664]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	091b      	lsrs	r3, r3, #4
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007438:	4ba3      	ldr	r3, [pc, #652]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800743a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743c:	08db      	lsrs	r3, r3, #3
 800743e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	ee07 3a90 	vmov	s15, r3
 800744c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007450:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8126 	beq.w	80076a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	2b03      	cmp	r3, #3
 8007460:	d053      	beq.n	800750a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	2b03      	cmp	r3, #3
 8007466:	d86f      	bhi.n	8007548 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d003      	beq.n	8007476 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d02b      	beq.n	80074cc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007474:	e068      	b.n	8007548 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007476:	4b94      	ldr	r3, [pc, #592]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	08db      	lsrs	r3, r3, #3
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	4a92      	ldr	r2, [pc, #584]	@ (80076cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007482:	fa22 f303 	lsr.w	r3, r2, r3
 8007486:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80074ae:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80076d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80074ca:	e068      	b.n	800759e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80076d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80074da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	ee07 3a90 	vmov	s15, r3
 80074e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80074ec:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80074f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007504:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007508:	e049      	b.n	800759e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007514:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80076d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a04 	vldr	s12, [r7, #16]
 800752a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80076d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007546:	e02a      	b.n	800759e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007548:	4b5f      	ldr	r3, [pc, #380]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	08db      	lsrs	r3, r3, #3
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	4a5e      	ldr	r2, [pc, #376]	@ (80076cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007554:	fa22 f303 	lsr.w	r3, r2, r3
 8007558:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	ee07 3a90 	vmov	s15, r3
 8007560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	ee07 3a90 	vmov	s15, r3
 8007578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007580:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80076d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800758c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007598:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800759c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800759e:	4b4a      	ldr	r3, [pc, #296]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075aa:	d121      	bne.n	80075f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80075ac:	4b46      	ldr	r3, [pc, #280]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d017      	beq.n	80075e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80075b8:	4b43      	ldr	r3, [pc, #268]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075bc:	0a5b      	lsrs	r3, r3, #9
 80075be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80075ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80075d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80075d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075de:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	e006      	b.n	80075f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e002      	b.n	80075f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075f6:	4b34      	ldr	r3, [pc, #208]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007602:	d121      	bne.n	8007648 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007604:	4b30      	ldr	r3, [pc, #192]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d017      	beq.n	8007640 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007610:	4b2d      	ldr	r3, [pc, #180]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007626:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800762a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800762e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007636:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	e006      	b.n	800764e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	605a      	str	r2, [r3, #4]
 8007646:	e002      	b.n	800764e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800764e:	4b1e      	ldr	r3, [pc, #120]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800765a:	d121      	bne.n	80076a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800765c:	4b1a      	ldr	r3, [pc, #104]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d017      	beq.n	8007698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007668:	4b17      	ldr	r3, [pc, #92]	@ (80076c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800766a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766c:	0e1b      	lsrs	r3, r3, #24
 800766e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800767a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800767e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007682:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800768a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007696:	e010      	b.n	80076ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	609a      	str	r2, [r3, #8]
}
 800769e:	e00c      	b.n	80076ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	609a      	str	r2, [r3, #8]
}
 80076a6:	e008      	b.n	80076ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	609a      	str	r2, [r3, #8]
}
 80076ba:	bf00      	nop
 80076bc:	372c      	adds	r7, #44	@ 0x2c
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	44020c00 	.word	0x44020c00
 80076cc:	03d09000 	.word	0x03d09000
 80076d0:	46000000 	.word	0x46000000
 80076d4:	4a742400 	.word	0x4a742400
 80076d8:	4af42400 	.word	0x4af42400

080076dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80076dc:	b480      	push	{r7}
 80076de:	b08b      	sub	sp, #44	@ 0x2c
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80076e4:	4bae      	ldr	r3, [pc, #696]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80076e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ec:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80076ee:	4bac      	ldr	r3, [pc, #688]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80076f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f2:	f003 0303 	and.w	r3, r3, #3
 80076f6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80076f8:	4ba9      	ldr	r3, [pc, #676]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007702:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007704:	4ba6      	ldr	r3, [pc, #664]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	091b      	lsrs	r3, r3, #4
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007710:	4ba3      	ldr	r3, [pc, #652]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	08db      	lsrs	r3, r3, #3
 8007716:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 8126 	beq.w	8007980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	2b03      	cmp	r3, #3
 8007738:	d053      	beq.n	80077e2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	2b03      	cmp	r3, #3
 800773e:	d86f      	bhi.n	8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d003      	beq.n	800774e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d02b      	beq.n	80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800774c:	e068      	b.n	8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800774e:	4b94      	ldr	r3, [pc, #592]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	08db      	lsrs	r3, r3, #3
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	4a92      	ldr	r2, [pc, #584]	@ (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800775a:	fa22 f303 	lsr.w	r3, r2, r3
 800775e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	ee07 3a90 	vmov	s15, r3
 8007770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a04 	vldr	s12, [r7, #16]
 8007786:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80077a2:	e068      	b.n	8007876 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80079ac <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	ee07 3a90 	vmov	s15, r3
 80077bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80077c4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80077c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80077e0:	e049      	b.n	8007876 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80079b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80077f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8007802:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800780a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800781a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800781e:	e02a      	b.n	8007876 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007820:	4b5f      	ldr	r3, [pc, #380]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	08db      	lsrs	r3, r3, #3
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	4a5e      	ldr	r2, [pc, #376]	@ (80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800782c:	fa22 f303 	lsr.w	r3, r2, r3
 8007830:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	ee07 3a90 	vmov	s15, r3
 8007850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007854:	ed97 6a04 	vldr	s12, [r7, #16]
 8007858:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800785c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007864:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007870:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007874:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007876:	4b4a      	ldr	r3, [pc, #296]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800787e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007882:	d121      	bne.n	80078c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007884:	4b46      	ldr	r3, [pc, #280]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d017      	beq.n	80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007890:	4b43      	ldr	r3, [pc, #268]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007894:	0a5b      	lsrs	r3, r3, #9
 8007896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80078a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80078aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80078ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078b6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	e006      	b.n	80078ce <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e002      	b.n	80078ce <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078ce:	4b34      	ldr	r3, [pc, #208]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078da:	d121      	bne.n	8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80078dc:	4b30      	ldr	r3, [pc, #192]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d017      	beq.n	8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80078e8:	4b2d      	ldr	r3, [pc, #180]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ec:	0c1b      	lsrs	r3, r3, #16
 80078ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80078fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078fe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007902:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800790a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800790e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	605a      	str	r2, [r3, #4]
 8007916:	e006      	b.n	8007926 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	e002      	b.n	8007926 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007926:	4b1e      	ldr	r3, [pc, #120]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800792e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007932:	d121      	bne.n	8007978 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007934:	4b1a      	ldr	r3, [pc, #104]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d017      	beq.n	8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007940:	4b17      	ldr	r3, [pc, #92]	@ (80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007944:	0e1b      	lsrs	r3, r3, #24
 8007946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007956:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800795a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800795e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007966:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800796e:	e010      	b.n	8007992 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	609a      	str	r2, [r3, #8]
}
 8007976:	e00c      	b.n	8007992 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
}
 800797e:	e008      	b.n	8007992 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	609a      	str	r2, [r3, #8]
}
 8007992:	bf00      	nop
 8007994:	372c      	adds	r7, #44	@ 0x2c
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	44020c00 	.word	0x44020c00
 80079a4:	03d09000 	.word	0x03d09000
 80079a8:	46000000 	.word	0x46000000
 80079ac:	4a742400 	.word	0x4a742400
 80079b0:	4af42400 	.word	0x4af42400

080079b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b08b      	sub	sp, #44	@ 0x2c
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80079bc:	4bae      	ldr	r3, [pc, #696]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80079c6:	4bac      	ldr	r3, [pc, #688]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80079d0:	4ba9      	ldr	r3, [pc, #676]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d4:	0a1b      	lsrs	r3, r3, #8
 80079d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079da:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80079dc:	4ba6      	ldr	r3, [pc, #664]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e0:	091b      	lsrs	r3, r3, #4
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80079e8:	4ba3      	ldr	r3, [pc, #652]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079ec:	08db      	lsrs	r3, r3, #3
 80079ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	fb02 f303 	mul.w	r3, r2, r3
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a00:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8126 	beq.w	8007c58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d053      	beq.n	8007aba <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d86f      	bhi.n	8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d003      	beq.n	8007a26 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d02b      	beq.n	8007a7c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007a24:	e068      	b.n	8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a26:	4b94      	ldr	r3, [pc, #592]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	08db      	lsrs	r3, r3, #3
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	4a92      	ldr	r2, [pc, #584]	@ (8007c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007a32:	fa22 f303 	lsr.w	r3, r2, r3
 8007a36:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	ee07 3a90 	vmov	s15, r3
 8007a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	ee07 3a90 	vmov	s15, r3
 8007a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a5a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a5e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007a7a:	e068      	b.n	8007b4e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a86:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007c84 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	ee07 3a90 	vmov	s15, r3
 8007a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a98:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a9c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007ab8:	e049      	b.n	8007b4e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	ee07 3a90 	vmov	s15, r3
 8007ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ada:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007af6:	e02a      	b.n	8007b4e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007af8:	4b5f      	ldr	r3, [pc, #380]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	08db      	lsrs	r3, r3, #3
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	4a5e      	ldr	r2, [pc, #376]	@ (8007c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007b04:	fa22 f303 	lsr.w	r3, r2, r3
 8007b08:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	ee07 3a90 	vmov	s15, r3
 8007b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	ee07 3a90 	vmov	s15, r3
 8007b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b30:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b48:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007b4c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b5a:	d121      	bne.n	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007b5c:	4b46      	ldr	r3, [pc, #280]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d017      	beq.n	8007b98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b68:	4b43      	ldr	r3, [pc, #268]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6c:	0a5b      	lsrs	r3, r3, #9
 8007b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007b7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007b82:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b8e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	e006      	b.n	8007ba6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ba6:	4b34      	ldr	r3, [pc, #208]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bb2:	d121      	bne.n	8007bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007bb4:	4b30      	ldr	r3, [pc, #192]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d017      	beq.n	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc4:	0c1b      	lsrs	r3, r3, #16
 8007bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007bd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007bda:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	605a      	str	r2, [r3, #4]
 8007bee:	e006      	b.n	8007bfe <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	605a      	str	r2, [r3, #4]
 8007bf6:	e002      	b.n	8007bfe <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c0a:	d121      	bne.n	8007c50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d017      	beq.n	8007c48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007c18:	4b17      	ldr	r3, [pc, #92]	@ (8007c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1c:	0e1b      	lsrs	r3, r3, #24
 8007c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007c2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007c32:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c3e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007c46:	e010      	b.n	8007c6a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	609a      	str	r2, [r3, #8]
}
 8007c4e:	e00c      	b.n	8007c6a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	609a      	str	r2, [r3, #8]
}
 8007c56:	e008      	b.n	8007c6a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	609a      	str	r2, [r3, #8]
}
 8007c6a:	bf00      	nop
 8007c6c:	372c      	adds	r7, #44	@ 0x2c
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	44020c00 	.word	0x44020c00
 8007c7c:	03d09000 	.word	0x03d09000
 8007c80:	46000000 	.word	0x46000000
 8007c84:	4a742400 	.word	0x4a742400
 8007c88:	4af42400 	.word	0x4af42400

08007c8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b08f      	sub	sp, #60	@ 0x3c
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c9a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007c9e:	4321      	orrs	r1, r4
 8007ca0:	d150      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007ca2:	4b26      	ldr	r3, [pc, #152]	@ (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ca8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cac:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007cae:	4b23      	ldr	r3, [pc, #140]	@ (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d108      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cc2:	d104      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007cc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cca:	f001 bb20 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007cce:	4b1b      	ldr	r3, [pc, #108]	@ (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cdc:	d108      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ce4:	d104      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007ce6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cec:	f001 bb0f 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007cf0:	4b12      	ldr	r3, [pc, #72]	@ (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cfc:	d119      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d04:	d115      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d12:	d30a      	bcc.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007d14:	4b09      	ldr	r3, [pc, #36]	@ (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	0a1b      	lsrs	r3, r3, #8
 8007d1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d1e:	4a08      	ldr	r2, [pc, #32]	@ (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007d26:	f001 baf2 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007d2e:	f001 baee 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d36:	f001 baea 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8007d3a:	bf00      	nop
 8007d3c:	44020c00 	.word	0x44020c00
 8007d40:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d48:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8007d4c:	ea50 0104 	orrs.w	r1, r0, r4
 8007d50:	f000 8615 	beq.w	800897e <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8007d54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d58:	2801      	cmp	r0, #1
 8007d5a:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8007d5e:	f081 82d3 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d66:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007d6a:	ea50 0104 	orrs.w	r1, r0, r4
 8007d6e:	f000 84d8 	beq.w	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8007d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d76:	2801      	cmp	r0, #1
 8007d78:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007d7c:	f081 82c4 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d84:	f1a1 0410 	sub.w	r4, r1, #16
 8007d88:	ea50 0104 	orrs.w	r1, r0, r4
 8007d8c:	f001 8288 	beq.w	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8007d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d94:	2801      	cmp	r0, #1
 8007d96:	f171 0110 	sbcs.w	r1, r1, #16
 8007d9a:	f081 82b5 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007da2:	f1a1 0408 	sub.w	r4, r1, #8
 8007da6:	ea50 0104 	orrs.w	r1, r0, r4
 8007daa:	f001 81fe 	beq.w	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8007dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007db2:	2801      	cmp	r0, #1
 8007db4:	f171 0108 	sbcs.w	r1, r1, #8
 8007db8:	f081 82a6 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dc0:	1f0c      	subs	r4, r1, #4
 8007dc2:	ea50 0104 	orrs.w	r1, r0, r4
 8007dc6:	f000 8753 	beq.w	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8007dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dce:	2801      	cmp	r0, #1
 8007dd0:	f171 0104 	sbcs.w	r1, r1, #4
 8007dd4:	f081 8298 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ddc:	1e8c      	subs	r4, r1, #2
 8007dde:	ea50 0104 	orrs.w	r1, r0, r4
 8007de2:	f001 8173 	beq.w	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8007de6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dea:	2801      	cmp	r0, #1
 8007dec:	f171 0102 	sbcs.w	r1, r1, #2
 8007df0:	f081 828a 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007df8:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007dfc:	4321      	orrs	r1, r4
 8007dfe:	f001 80fe 	beq.w	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007e02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e06:	4ccb      	ldr	r4, [pc, #812]	@ (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8007e08:	42a0      	cmp	r0, r4
 8007e0a:	f171 0100 	sbcs.w	r1, r1, #0
 8007e0e:	f081 827b 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e16:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007e1a:	4321      	orrs	r1, r4
 8007e1c:	f001 8076 	beq.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8007e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e24:	4cc4      	ldr	r4, [pc, #784]	@ (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8007e26:	42a0      	cmp	r0, r4
 8007e28:	f171 0100 	sbcs.w	r1, r1, #0
 8007e2c:	f081 826c 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007e30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e34:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007e38:	4321      	orrs	r1, r4
 8007e3a:	f000 87b5 	beq.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8007e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e42:	4cbe      	ldr	r4, [pc, #760]	@ (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8007e44:	42a0      	cmp	r0, r4
 8007e46:	f171 0100 	sbcs.w	r1, r1, #0
 8007e4a:	f081 825d 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e52:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007e56:	4321      	orrs	r1, r4
 8007e58:	f000 8738 	beq.w	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8007e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e60:	4cb7      	ldr	r4, [pc, #732]	@ (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8007e62:	42a0      	cmp	r0, r4
 8007e64:	f171 0100 	sbcs.w	r1, r1, #0
 8007e68:	f081 824e 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e70:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007e74:	4321      	orrs	r1, r4
 8007e76:	f001 81cd 	beq.w	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8007e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e7e:	4cb1      	ldr	r4, [pc, #708]	@ (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8007e80:	42a0      	cmp	r0, r4
 8007e82:	f171 0100 	sbcs.w	r1, r1, #0
 8007e86:	f081 823f 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007e8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e8e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007e92:	4321      	orrs	r1, r4
 8007e94:	f000 80d9 	beq.w	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e9c:	4caa      	ldr	r4, [pc, #680]	@ (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8007e9e:	42a0      	cmp	r0, r4
 8007ea0:	f171 0100 	sbcs.w	r1, r1, #0
 8007ea4:	f081 8230 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eac:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007eb0:	4321      	orrs	r1, r4
 8007eb2:	f000 83da 	beq.w	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007eb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eba:	4ca4      	ldr	r4, [pc, #656]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8007ebc:	42a0      	cmp	r0, r4
 8007ebe:	f171 0100 	sbcs.w	r1, r1, #0
 8007ec2:	f081 8221 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eca:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007ece:	4321      	orrs	r1, r4
 8007ed0:	f000 8627 	beq.w	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8007ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ed8:	4c9d      	ldr	r4, [pc, #628]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 8007eda:	42a0      	cmp	r0, r4
 8007edc:	f171 0100 	sbcs.w	r1, r1, #0
 8007ee0:	f081 8212 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ee8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007eec:	4321      	orrs	r1, r4
 8007eee:	f000 857a 	beq.w	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8007ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef6:	4c97      	ldr	r4, [pc, #604]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8007ef8:	42a0      	cmp	r0, r4
 8007efa:	f171 0100 	sbcs.w	r1, r1, #0
 8007efe:	f081 8203 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f06:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007f0a:	4321      	orrs	r1, r4
 8007f0c:	f000 84fb 	beq.w	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8007f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f14:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007f18:	f171 0100 	sbcs.w	r1, r1, #0
 8007f1c:	f081 81f4 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f24:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007f28:	4321      	orrs	r1, r4
 8007f2a:	f000 84a9 	beq.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007f2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f32:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007f36:	42a0      	cmp	r0, r4
 8007f38:	f171 0100 	sbcs.w	r1, r1, #0
 8007f3c:	f081 81e4 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f44:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007f48:	4321      	orrs	r1, r4
 8007f4a:	f000 8456 	beq.w	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8007f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f52:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007f56:	42a0      	cmp	r0, r4
 8007f58:	f171 0100 	sbcs.w	r1, r1, #0
 8007f5c:	f081 81d4 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f64:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007f68:	4321      	orrs	r1, r4
 8007f6a:	f000 8403 	beq.w	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f72:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007f76:	42a0      	cmp	r0, r4
 8007f78:	f171 0100 	sbcs.w	r1, r1, #0
 8007f7c:	f081 81c4 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f84:	2821      	cmp	r0, #33	@ 0x21
 8007f86:	f171 0100 	sbcs.w	r1, r1, #0
 8007f8a:	d255      	bcs.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f90:	4301      	orrs	r1, r0
 8007f92:	f001 81b9 	beq.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f9a:	1e42      	subs	r2, r0, #1
 8007f9c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007fa0:	2a20      	cmp	r2, #32
 8007fa2:	f173 0100 	sbcs.w	r1, r3, #0
 8007fa6:	f081 81af 	bcs.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007faa:	2a1f      	cmp	r2, #31
 8007fac:	f201 81ac 	bhi.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8007fb0:	a101      	add	r1, pc, #4	@ (adr r1, 8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8007fb2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fb6:	bf00      	nop
 8007fb8:	0800808f 	.word	0x0800808f
 8007fbc:	0800818d 	.word	0x0800818d
 8007fc0:	08009309 	.word	0x08009309
 8007fc4:	0800824d 	.word	0x0800824d
 8007fc8:	08009309 	.word	0x08009309
 8007fcc:	08009309 	.word	0x08009309
 8007fd0:	08009309 	.word	0x08009309
 8007fd4:	0800831d 	.word	0x0800831d
 8007fd8:	08009309 	.word	0x08009309
 8007fdc:	08009309 	.word	0x08009309
 8007fe0:	08009309 	.word	0x08009309
 8007fe4:	08009309 	.word	0x08009309
 8007fe8:	08009309 	.word	0x08009309
 8007fec:	08009309 	.word	0x08009309
 8007ff0:	08009309 	.word	0x08009309
 8007ff4:	08008401 	.word	0x08008401
 8007ff8:	08009309 	.word	0x08009309
 8007ffc:	08009309 	.word	0x08009309
 8008000:	08009309 	.word	0x08009309
 8008004:	08009309 	.word	0x08009309
 8008008:	08009309 	.word	0x08009309
 800800c:	08009309 	.word	0x08009309
 8008010:	08009309 	.word	0x08009309
 8008014:	08009309 	.word	0x08009309
 8008018:	08009309 	.word	0x08009309
 800801c:	08009309 	.word	0x08009309
 8008020:	08009309 	.word	0x08009309
 8008024:	08009309 	.word	0x08009309
 8008028:	08009309 	.word	0x08009309
 800802c:	08009309 	.word	0x08009309
 8008030:	08009309 	.word	0x08009309
 8008034:	080084d7 	.word	0x080084d7
 8008038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800803c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008040:	430b      	orrs	r3, r1
 8008042:	f000 82b3 	beq.w	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8008046:	f001 b95f 	b.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800804a:	4b43      	ldr	r3, [pc, #268]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800804c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008054:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	2b00      	cmp	r3, #0
 800805a:	d108      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800805c:	f107 0320 	add.w	r3, r7, #32
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff f9cf 	bl	8007404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800806a:	f001 b950 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	2b40      	cmp	r3, #64	@ 0x40
 8008072:	d108      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008074:	f107 0314 	add.w	r3, r7, #20
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff fb2f 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008082:	f001 b944 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800808a:	f001 b940 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800808e:	4b32      	ldr	r3, [pc, #200]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	2b00      	cmp	r3, #0
 800809e:	d104      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80080a0:	f7fd ffc4 	bl	800602c <HAL_RCC_GetPCLK2Freq>
 80080a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80080a6:	f001 b932 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80080aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080b6:	d10a      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d107      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080be:	f107 0314 	add.w	r3, r7, #20
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff fb0a 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80080cc:	e05c      	b.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80080ce:	4b22      	ldr	r3, [pc, #136]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080da:	d10a      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80080dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d107      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e2:	f107 0308 	add.w	r3, r7, #8
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff fc64 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f0:	e04a      	b.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80080f2:	4b19      	ldr	r3, [pc, #100]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d10c      	bne.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	2b03      	cmp	r3, #3
 8008102:	d109      	bne.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008104:	4b14      	ldr	r3, [pc, #80]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	08db      	lsrs	r3, r3, #3
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	4a13      	ldr	r2, [pc, #76]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8008110:	fa22 f303 	lsr.w	r3, r2, r3
 8008114:	637b      	str	r3, [r7, #52]	@ 0x34
 8008116:	e037      	b.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008118:	4b0f      	ldr	r3, [pc, #60]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008124:	d11e      	bne.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	2b04      	cmp	r3, #4
 800812a:	d11b      	bne.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 800812c:	4b0c      	ldr	r3, [pc, #48]	@ (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800812e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008130:	e02a      	b.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8008132:	bf00      	nop
 8008134:	40000001 	.word	0x40000001
 8008138:	20000001 	.word	0x20000001
 800813c:	10000001 	.word	0x10000001
 8008140:	08000001 	.word	0x08000001
 8008144:	04000001 	.word	0x04000001
 8008148:	00400001 	.word	0x00400001
 800814c:	00200001 	.word	0x00200001
 8008150:	00040001 	.word	0x00040001
 8008154:	00020001 	.word	0x00020001
 8008158:	44020c00 	.word	0x44020c00
 800815c:	03d09000 	.word	0x03d09000
 8008160:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008164:	4ba3      	ldr	r3, [pc, #652]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b02      	cmp	r3, #2
 8008170:	d106      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	2b05      	cmp	r3, #5
 8008176:	d103      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8008178:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800817c:	637b      	str	r3, [r7, #52]	@ 0x34
 800817e:	e003      	b.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008184:	f001 b8c3 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008188:	f001 b8c1 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800818c:	4b99      	ldr	r3, [pc, #612]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800818e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008192:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008196:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819a:	2b00      	cmp	r3, #0
 800819c:	d104      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800819e:	f7fd ff2f 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 80081a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80081a4:	f001 b8b3 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80081a8:	4b92      	ldr	r3, [pc, #584]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081b4:	d10a      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80081b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d107      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081bc:	f107 0314 	add.w	r3, r7, #20
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff fa8b 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ca:	e03d      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80081cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ce:	2b10      	cmp	r3, #16
 80081d0:	d108      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081d2:	f107 0308 	add.w	r3, r7, #8
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff fbec 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081e0:	f001 b895 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80081e4:	4b83      	ldr	r3, [pc, #524]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d10c      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	2b18      	cmp	r3, #24
 80081f4:	d109      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081f6:	4b7f      	ldr	r3, [pc, #508]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	08db      	lsrs	r3, r3, #3
 80081fc:	f003 0303 	and.w	r3, r3, #3
 8008200:	4a7d      	ldr	r2, [pc, #500]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8008202:	fa22 f303 	lsr.w	r3, r2, r3
 8008206:	637b      	str	r3, [r7, #52]	@ 0x34
 8008208:	e01e      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800820a:	4b7a      	ldr	r3, [pc, #488]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008216:	d105      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821a:	2b20      	cmp	r3, #32
 800821c:	d102      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800821e:	4b77      	ldr	r3, [pc, #476]	@ (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8008220:	637b      	str	r3, [r7, #52]	@ 0x34
 8008222:	e011      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008224:	4b73      	ldr	r3, [pc, #460]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b02      	cmp	r3, #2
 8008230:	d106      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008234:	2b28      	cmp	r3, #40	@ 0x28
 8008236:	d103      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8008238:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800823c:	637b      	str	r3, [r7, #52]	@ 0x34
 800823e:	e003      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008244:	f001 b863 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008248:	f001 b861 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800824c:	4b69      	ldr	r3, [pc, #420]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800824e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008252:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008256:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825a:	2b00      	cmp	r3, #0
 800825c:	d104      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800825e:	f7fd fecf 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8008262:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008264:	f001 b853 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008268:	4b62      	ldr	r3, [pc, #392]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008274:	d10a      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	2b40      	cmp	r3, #64	@ 0x40
 800827a:	d107      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800827c:	f107 0314 	add.w	r3, r7, #20
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff fa2b 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
 800828a:	e045      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800828c:	4b59      	ldr	r3, [pc, #356]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008298:	d10a      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800829a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829c:	2b80      	cmp	r3, #128	@ 0x80
 800829e:	d107      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082a0:	f107 0308 	add.w	r3, r7, #8
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff fb85 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ae:	e033      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80082b0:	4b50      	ldr	r3, [pc, #320]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d10c      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80082bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082be:	2bc0      	cmp	r3, #192	@ 0xc0
 80082c0:	d109      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082c2:	4b4c      	ldr	r3, [pc, #304]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	08db      	lsrs	r3, r3, #3
 80082c8:	f003 0303 	and.w	r3, r3, #3
 80082cc:	4a4a      	ldr	r2, [pc, #296]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80082ce:	fa22 f303 	lsr.w	r3, r2, r3
 80082d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d4:	e020      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80082d6:	4b47      	ldr	r3, [pc, #284]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082e2:	d106      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ea:	d102      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80082ec:	4b43      	ldr	r3, [pc, #268]	@ (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80082ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f0:	e012      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80082f2:	4b40      	ldr	r3, [pc, #256]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80082f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d107      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008306:	d103      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8008308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800830c:	637b      	str	r3, [r7, #52]	@ 0x34
 800830e:	e003      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008314:	f000 bffb 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008318:	f000 bff9 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800831c:	4b35      	ldr	r3, [pc, #212]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800831e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008322:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008326:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	2b00      	cmp	r3, #0
 800832c:	d104      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800832e:	f7fd fe67 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8008332:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008334:	f000 bfeb 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008338:	4b2e      	ldr	r3, [pc, #184]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008344:	d10b      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8008346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800834c:	d107      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800834e:	f107 0314 	add.w	r3, r7, #20
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff f9c2 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
 800835c:	e047      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800835e:	4b25      	ldr	r3, [pc, #148]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800836a:	d10b      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008372:	d107      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	4618      	mov	r0, r3
 800837a:	f7ff fb1b 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	637b      	str	r3, [r7, #52]	@ 0x34
 8008382:	e034      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008384:	4b1b      	ldr	r3, [pc, #108]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b02      	cmp	r3, #2
 800838e:	d10d      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008392:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008396:	d109      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008398:	4b16      	ldr	r3, [pc, #88]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	08db      	lsrs	r3, r3, #3
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	4a15      	ldr	r2, [pc, #84]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80083a4:	fa22 f303 	lsr.w	r3, r2, r3
 80083a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083aa:	e020      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80083ac:	4b11      	ldr	r3, [pc, #68]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083b8:	d106      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083c0:	d102      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 80083c2:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80083c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c6:	e012      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80083c8:	4b0a      	ldr	r3, [pc, #40]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80083ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d107      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80083dc:	d103      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 80083de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e4:	e003      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 80083e6:	2300      	movs	r3, #0
 80083e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083ea:	f000 bf90 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80083ee:	f000 bf8e 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80083f2:	bf00      	nop
 80083f4:	44020c00 	.word	0x44020c00
 80083f8:	03d09000 	.word	0x03d09000
 80083fc:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008400:	4ba5      	ldr	r3, [pc, #660]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008406:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800840a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800840c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008412:	f7fd fdf5 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8008416:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008418:	f000 bf79 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800841c:	4b9e      	ldr	r3, [pc, #632]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008428:	d10b      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800842a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008430:	d107      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008432:	f107 0314 	add.w	r3, r7, #20
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff f950 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008440:	e047      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008442:	4b95      	ldr	r3, [pc, #596]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800844a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800844e:	d10b      	bne.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8008450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008456:	d107      	bne.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008458:	f107 0308 	add.w	r3, r7, #8
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff faa9 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	637b      	str	r3, [r7, #52]	@ 0x34
 8008466:	e034      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008468:	4b8b      	ldr	r3, [pc, #556]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b02      	cmp	r3, #2
 8008472:	d10d      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800847a:	d109      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800847c:	4b86      	ldr	r3, [pc, #536]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	08db      	lsrs	r3, r3, #3
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	4a85      	ldr	r2, [pc, #532]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8008488:	fa22 f303 	lsr.w	r3, r2, r3
 800848c:	637b      	str	r3, [r7, #52]	@ 0x34
 800848e:	e020      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008490:	4b81      	ldr	r3, [pc, #516]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849c:	d106      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084a4:	d102      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 80084a6:	4b7e      	ldr	r3, [pc, #504]	@ (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80084a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084aa:	e012      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80084ac:	4b7a      	ldr	r3, [pc, #488]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80084ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d107      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80084c0:	d103      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 80084c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c8:	e003      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084ce:	f000 bf1e 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80084d2:	f000 bf1c 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80084d6:	4b70      	ldr	r3, [pc, #448]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80084d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80084dc:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80084e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80084e8:	f7fd fd8a 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 80084ec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80084ee:	f000 bf0e 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80084f2:	4b69      	ldr	r3, [pc, #420]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084fe:	d10b      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008506:	d107      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008508:	f107 0314 	add.w	r3, r7, #20
 800850c:	4618      	mov	r0, r3
 800850e:	f7ff f8e5 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
 8008516:	e047      	b.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008518:	4b5f      	ldr	r3, [pc, #380]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008524:	d10b      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800852c:	d107      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852e:	f107 0308 	add.w	r3, r7, #8
 8008532:	4618      	mov	r0, r3
 8008534:	f7ff fa3e 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	637b      	str	r3, [r7, #52]	@ 0x34
 800853c:	e034      	b.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800853e:	4b56      	ldr	r3, [pc, #344]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b02      	cmp	r3, #2
 8008548:	d10d      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008550:	d109      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008552:	4b51      	ldr	r3, [pc, #324]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	08db      	lsrs	r3, r3, #3
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	4a4f      	ldr	r2, [pc, #316]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800855e:	fa22 f303 	lsr.w	r3, r2, r3
 8008562:	637b      	str	r3, [r7, #52]	@ 0x34
 8008564:	e020      	b.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008566:	4b4c      	ldr	r3, [pc, #304]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800856e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008572:	d106      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8008574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008576:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800857a:	d102      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 800857c:	4b48      	ldr	r3, [pc, #288]	@ (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800857e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008580:	e012      	b.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008582:	4b45      	ldr	r3, [pc, #276]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b02      	cmp	r3, #2
 800858e:	d107      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008596:	d103      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008598:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800859c:	637b      	str	r3, [r7, #52]	@ 0x34
 800859e:	e003      	b.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085a4:	f000 beb3 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80085a8:	f000 beb1 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80085ac:	4b3a      	ldr	r3, [pc, #232]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80085ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085b2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80085b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d104      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80085be:	f7fd fd4b 	bl	8006058 <HAL_RCC_GetPCLK3Freq>
 80085c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80085c4:	f000 bea3 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085ce:	d108      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085d0:	f107 0314 	add.w	r3, r7, #20
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff f881 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085de:	f000 be96 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085e8:	d108      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ea:	f107 0308 	add.w	r3, r7, #8
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff f9e0 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085f8:	f000 be89 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80085fc:	4b26      	ldr	r3, [pc, #152]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b02      	cmp	r3, #2
 8008606:	d10d      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800860e:	d109      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008610:	4b21      	ldr	r3, [pc, #132]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	08db      	lsrs	r3, r3, #3
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	4a20      	ldr	r2, [pc, #128]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800861c:	fa22 f303 	lsr.w	r3, r2, r3
 8008620:	637b      	str	r3, [r7, #52]	@ 0x34
 8008622:	e020      	b.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008624:	4b1c      	ldr	r3, [pc, #112]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800862c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008630:	d106      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008638:	d102      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 800863a:	4b19      	ldr	r3, [pc, #100]	@ (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800863c:	637b      	str	r3, [r7, #52]	@ 0x34
 800863e:	e012      	b.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008640:	4b15      	ldr	r3, [pc, #84]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8008642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b02      	cmp	r3, #2
 800864c:	d107      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008654:	d103      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8008656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800865a:	637b      	str	r3, [r7, #52]	@ 0x34
 800865c:	e003      	b.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008662:	f000 be54 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008666:	f000 be52 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800866a:	4b0b      	ldr	r3, [pc, #44]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800866c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008670:	f003 0307 	and.w	r3, r3, #7
 8008674:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800867c:	f7fd fca4 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8008680:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008682:	f000 be44 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	2b01      	cmp	r3, #1
 800868a:	d10b      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 800868c:	f7fd fb70 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8008690:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008692:	f000 be3c 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008696:	bf00      	nop
 8008698:	44020c00 	.word	0x44020c00
 800869c:	03d09000 	.word	0x03d09000
 80086a0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d108      	bne.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086aa:	f107 0314 	add.w	r3, r7, #20
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7ff f814 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086b8:	f000 be29 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80086bc:	4b9f      	ldr	r3, [pc, #636]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086c8:	d105      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d102      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 80086d0:	4b9b      	ldr	r3, [pc, #620]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 80086d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d4:	e023      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80086d6:	4b99      	ldr	r3, [pc, #612]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d10c      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	d109      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086e8:	4b94      	ldr	r3, [pc, #592]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	08db      	lsrs	r3, r3, #3
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	4a94      	ldr	r2, [pc, #592]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80086f4:	fa22 f303 	lsr.w	r3, r2, r3
 80086f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086fa:	e010      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80086fc:	4b8f      	ldr	r3, [pc, #572]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008708:	d105      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	2b05      	cmp	r3, #5
 800870e:	d102      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8008710:	4b8d      	ldr	r3, [pc, #564]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008712:	637b      	str	r3, [r7, #52]	@ 0x34
 8008714:	e003      	b.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800871a:	f000 bdf8 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800871e:	f000 bdf6 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008722:	4b86      	ldr	r3, [pc, #536]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800872e:	4b83      	ldr	r3, [pc, #524]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b02      	cmp	r3, #2
 800873a:	d106      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	2b00      	cmp	r3, #0
 8008740:	d103      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8008742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008746:	637b      	str	r3, [r7, #52]	@ 0x34
 8008748:	e012      	b.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800874a:	4b7c      	ldr	r3, [pc, #496]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800874c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008758:	d106      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	2b08      	cmp	r3, #8
 800875e:	d103      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8008760:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008764:	637b      	str	r3, [r7, #52]	@ 0x34
 8008766:	e003      	b.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800876c:	f000 bdcf 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008770:	f000 bdcd 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008774:	4b71      	ldr	r3, [pc, #452]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008776:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800877a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800877e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	2b00      	cmp	r3, #0
 8008784:	d104      	bne.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008786:	f7fd fc3b 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 800878a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800878c:	f000 bdbf 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008796:	d108      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008798:	f107 0308 	add.w	r3, r7, #8
 800879c:	4618      	mov	r0, r3
 800879e:	f7ff f909 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087a6:	f000 bdb2 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80087aa:	4b64      	ldr	r3, [pc, #400]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d10d      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 80087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087bc:	d109      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087be:	4b5f      	ldr	r3, [pc, #380]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	08db      	lsrs	r3, r3, #3
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	4a5e      	ldr	r2, [pc, #376]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80087ca:	fa22 f303 	lsr.w	r3, r2, r3
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d0:	e011      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80087d2:	4b5a      	ldr	r3, [pc, #360]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087de:	d106      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80087e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087e6:	d102      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80087e8:	4b57      	ldr	r3, [pc, #348]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80087ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ec:	e003      	b.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f2:	f000 bd8c 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80087f6:	f000 bd8a 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80087fa:	4b50      	ldr	r3, [pc, #320]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80087fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008800:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008804:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800880c:	f7fd fbf8 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8008810:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008812:	f000 bd7c 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800881c:	d108      	bne.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800881e:	f107 0308 	add.w	r3, r7, #8
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff f8c6 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800882c:	f000 bd6f 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008830:	4b42      	ldr	r3, [pc, #264]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b02      	cmp	r3, #2
 800883a:	d10d      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008842:	d109      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008844:	4b3d      	ldr	r3, [pc, #244]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	08db      	lsrs	r3, r3, #3
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	4a3d      	ldr	r2, [pc, #244]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8008850:	fa22 f303 	lsr.w	r3, r2, r3
 8008854:	637b      	str	r3, [r7, #52]	@ 0x34
 8008856:	e011      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008858:	4b38      	ldr	r3, [pc, #224]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008864:	d106      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800886c:	d102      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800886e:	4b36      	ldr	r3, [pc, #216]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8008870:	637b      	str	r3, [r7, #52]	@ 0x34
 8008872:	e003      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008878:	f000 bd49 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800887c:	f000 bd47 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008880:	4b2e      	ldr	r3, [pc, #184]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008886:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800888a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	2b00      	cmp	r3, #0
 8008890:	d104      	bne.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008892:	f7fd fbe1 	bl	8006058 <HAL_RCC_GetPCLK3Freq>
 8008896:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008898:	f000 bd39 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088a2:	d108      	bne.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088a4:	f107 0308 	add.w	r3, r7, #8
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff f883 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b2:	f000 bd2c 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80088b6:	4b21      	ldr	r3, [pc, #132]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d10d      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088c8:	d109      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088ca:	4b1c      	ldr	r3, [pc, #112]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	08db      	lsrs	r3, r3, #3
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80088d6:	fa22 f303 	lsr.w	r3, r2, r3
 80088da:	637b      	str	r3, [r7, #52]	@ 0x34
 80088dc:	e011      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80088de:	4b17      	ldr	r3, [pc, #92]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ea:	d106      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80088f2:	d102      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80088f4:	4b14      	ldr	r3, [pc, #80]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80088f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f8:	e003      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088fe:	f000 bd06 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8008902:	f000 bd04 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008906:	4b0d      	ldr	r3, [pc, #52]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8008908:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800890c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008910:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	2b00      	cmp	r3, #0
 8008916:	d104      	bne.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008918:	f7fd fb72 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 800891c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800891e:	f000 bcf6 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008928:	d110      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800892a:	f107 0308 	add.w	r3, r7, #8
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff f840 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008938:	f000 bce9 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800893c:	44020c00 	.word	0x44020c00
 8008940:	007a1200 	.word	0x007a1200
 8008944:	03d09000 	.word	0x03d09000
 8008948:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800894c:	4ba4      	ldr	r3, [pc, #656]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b02      	cmp	r3, #2
 8008956:	d10e      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800895e:	d10a      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008960:	4b9f      	ldr	r3, [pc, #636]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	08db      	lsrs	r3, r3, #3
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	4a9e      	ldr	r2, [pc, #632]	@ (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 800896c:	fa22 f303 	lsr.w	r3, r2, r3
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008972:	f000 bccc 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800897a:	f000 bcc8 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800897e:	4b98      	ldr	r3, [pc, #608]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008980:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008984:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008988:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008990:	f7fd fb62 	bl	8006058 <HAL_RCC_GetPCLK3Freq>
 8008994:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008996:	f000 bcba 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089a0:	d108      	bne.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a2:	f107 0308 	add.w	r3, r7, #8
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff f804 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089b0:	f000 bcad 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80089b4:	4b8a      	ldr	r3, [pc, #552]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d10e      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089c6:	d10a      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089c8:	4b85      	ldr	r3, [pc, #532]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	08db      	lsrs	r3, r3, #3
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	4a84      	ldr	r2, [pc, #528]	@ (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80089d4:	fa22 f303 	lsr.w	r3, r2, r3
 80089d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089da:	f000 bc98 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089e2:	f000 bc94 	b.w	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80089e6:	4b7e      	ldr	r3, [pc, #504]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80089e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80089ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80089f8:	d056      	beq.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008a00:	f200 808b 	bhi.w	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a0a:	d03e      	beq.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a12:	f200 8082 	bhi.w	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a1c:	d027      	beq.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a24:	d879      	bhi.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a2c:	d017      	beq.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a34:	d871      	bhi.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a42:	d004      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8008a44:	e069      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008a46:	f7fd fb07 	bl	8006058 <HAL_RCC_GetPCLK3Freq>
 8008a4a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008a4c:	e068      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a4e:	f107 0314 	add.w	r3, r7, #20
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fe42 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a5c:	e060      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a5e:	f107 0308 	add.w	r3, r7, #8
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe ffa6 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a6c:	e058      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d103      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8008a7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a80:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a82:	e04d      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a88:	e04a      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008a8a:	4b55      	ldr	r3, [pc, #340]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a98:	d103      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8008a9a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008aa0:	e03e      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008aa6:	e03b      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008aae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d10c      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8008ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d109      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ac6:	4b46      	ldr	r3, [pc, #280]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	08db      	lsrs	r3, r3, #3
 8008acc:	f003 0303 	and.w	r3, r3, #3
 8008ad0:	4a44      	ldr	r2, [pc, #272]	@ (8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8008ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad8:	e01e      	b.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ada:	4b41      	ldr	r3, [pc, #260]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae6:	d106      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aee:	d102      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008af0:	4b3d      	ldr	r3, [pc, #244]	@ (8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8008af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af4:	e010      	b.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008af6:	4b3a      	ldr	r3, [pc, #232]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008afe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b02:	d106      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8008b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b0a:	d102      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008b0c:	4b37      	ldr	r3, [pc, #220]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8008b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b10:	e002      	b.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008b16:	e003      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8008b18:	e002      	b.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b1e:	bf00      	nop
          }
        }
        break;
 8008b20:	e3f5      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008b22:	4b2f      	ldr	r3, [pc, #188]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008b24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008b28:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008b34:	d05f      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008b3c:	f200 8094 	bhi.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b46:	d03f      	beq.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b4e:	f200 808b 	bhi.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b58:	d028      	beq.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b60:	f200 8082 	bhi.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b6a:	d017      	beq.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b72:	d879      	bhi.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d004      	beq.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b80:	d004      	beq.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8008b82:	e071      	b.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008b84:	f7fd fa3c 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8008b88:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008b8a:	e070      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe fda3 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b9a:	e068      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b9c:	f107 0308 	add.w	r3, r7, #8
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe ff07 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008baa:	e060      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008bac:	4b0c      	ldr	r3, [pc, #48]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d103      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8008bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008bc0:	e055      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bc6:	e052      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008bc8:	4b05      	ldr	r3, [pc, #20]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8008bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bd6:	d10b      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8008bd8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008bdc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008bde:	e046      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8008be0:	44020c00 	.word	0x44020c00
 8008be4:	03d09000 	.word	0x03d09000
 8008be8:	003d0900 	.word	0x003d0900
 8008bec:	007a1200 	.word	0x007a1200
              frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bf4:	e03b      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bf6:	4bae      	ldr	r3, [pc, #696]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008bfc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008c00:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c02:	4bab      	ldr	r3, [pc, #684]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0302 	and.w	r3, r3, #2
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d10c      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8008c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d109      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c14:	4ba6      	ldr	r3, [pc, #664]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	08db      	lsrs	r3, r3, #3
 8008c1a:	f003 0303 	and.w	r3, r3, #3
 8008c1e:	4aa5      	ldr	r2, [pc, #660]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008c20:	fa22 f303 	lsr.w	r3, r2, r3
 8008c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c26:	e01e      	b.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c28:	4ba1      	ldr	r3, [pc, #644]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c34:	d106      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8008c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c3c:	d102      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008c3e:	4b9e      	ldr	r3, [pc, #632]	@ (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8008c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c42:	e010      	b.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c44:	4b9a      	ldr	r3, [pc, #616]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c50:	d106      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8008c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c58:	d102      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008c5a:	4b98      	ldr	r3, [pc, #608]	@ (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5e:	e002      	b.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008c64:	e003      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8008c66:	e002      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c6c:	bf00      	nop
          }
        }
        break;
 8008c6e:	e34e      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008c70:	4b8f      	ldr	r3, [pc, #572]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c88:	d105      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d102      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8008c90:	4b8a      	ldr	r3, [pc, #552]	@ (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008c92:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008c94:	e33b      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c9c:	d107      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c9e:	f107 0320 	add.w	r3, r7, #32
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe fbae 	bl	8007404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cac:	e32f      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb4:	d107      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cb6:	f107 0314 	add.w	r3, r7, #20
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe fd0e 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cc4:	e323      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cca:	e320      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008ccc:	4b78      	ldr	r3, [pc, #480]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	d860      	bhi.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8008cde:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008cf9 	.word	0x08008cf9
 8008ce8:	08008d09 	.word	0x08008d09
 8008cec:	08008d19 	.word	0x08008d19
 8008cf0:	08008d29 	.word	0x08008d29
 8008cf4:	08008d2f 	.word	0x08008d2f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cf8:	f107 0320 	add.w	r3, r7, #32
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe fb81 	bl	8007404 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d06:	e04e      	b.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d08:	f107 0314 	add.w	r3, r7, #20
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fce5 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d16:	e046      	b.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d18:	f107 0308 	add.w	r3, r7, #8
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe fe49 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d26:	e03e      	b.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008d28:	4b65      	ldr	r3, [pc, #404]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8008d2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d2c:	e03b      	b.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d2e:	4b60      	ldr	r3, [pc, #384]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008d38:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d10c      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8008d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d109      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d4c:	4b58      	ldr	r3, [pc, #352]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	08db      	lsrs	r3, r3, #3
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	4a57      	ldr	r2, [pc, #348]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008d58:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5e:	e01e      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d60:	4b53      	ldr	r3, [pc, #332]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d6c:	d106      	bne.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8008d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d74:	d102      	bne.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d76:	4b50      	ldr	r3, [pc, #320]	@ (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8008d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d7a:	e010      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d88:	d106      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8008d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d90:	d102      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d92:	4b4a      	ldr	r3, [pc, #296]	@ (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8008d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d96:	e002      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d9c:	e003      	b.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8008d9e:	e002      	b.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008da4:	bf00      	nop
          }
        }
        break;
 8008da6:	e2b2      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008da8:	4b41      	ldr	r3, [pc, #260]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008db2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	f200 80a4 	bhi.w	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8008dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8008dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc2:	bf00      	nop
 8008dc4:	08008e49 	.word	0x08008e49
 8008dc8:	08008f05 	.word	0x08008f05
 8008dcc:	08008f05 	.word	0x08008f05
 8008dd0:	08008f05 	.word	0x08008f05
 8008dd4:	08008f05 	.word	0x08008f05
 8008dd8:	08008f05 	.word	0x08008f05
 8008ddc:	08008f05 	.word	0x08008f05
 8008de0:	08008f05 	.word	0x08008f05
 8008de4:	08008e59 	.word	0x08008e59
 8008de8:	08008f05 	.word	0x08008f05
 8008dec:	08008f05 	.word	0x08008f05
 8008df0:	08008f05 	.word	0x08008f05
 8008df4:	08008f05 	.word	0x08008f05
 8008df8:	08008f05 	.word	0x08008f05
 8008dfc:	08008f05 	.word	0x08008f05
 8008e00:	08008f05 	.word	0x08008f05
 8008e04:	08008e69 	.word	0x08008e69
 8008e08:	08008f05 	.word	0x08008f05
 8008e0c:	08008f05 	.word	0x08008f05
 8008e10:	08008f05 	.word	0x08008f05
 8008e14:	08008f05 	.word	0x08008f05
 8008e18:	08008f05 	.word	0x08008f05
 8008e1c:	08008f05 	.word	0x08008f05
 8008e20:	08008f05 	.word	0x08008f05
 8008e24:	08008e79 	.word	0x08008e79
 8008e28:	08008f05 	.word	0x08008f05
 8008e2c:	08008f05 	.word	0x08008f05
 8008e30:	08008f05 	.word	0x08008f05
 8008e34:	08008f05 	.word	0x08008f05
 8008e38:	08008f05 	.word	0x08008f05
 8008e3c:	08008f05 	.word	0x08008f05
 8008e40:	08008f05 	.word	0x08008f05
 8008e44:	08008e7f 	.word	0x08008e7f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e48:	f107 0320 	add.w	r3, r7, #32
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe fad9 	bl	8007404 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e56:	e058      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e58:	f107 0314 	add.w	r3, r7, #20
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fe fc3d 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e66:	e050      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e68:	f107 0308 	add.w	r3, r7, #8
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fe fda1 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e76:	e048      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008e78:	4b11      	ldr	r3, [pc, #68]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e7c:	e045      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e84:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e88:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e8a:	4b09      	ldr	r3, [pc, #36]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d116      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8008e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d113      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e9c:	4b04      	ldr	r3, [pc, #16]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	08db      	lsrs	r3, r3, #3
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	4a03      	ldr	r2, [pc, #12]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8008ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eae:	e028      	b.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8008eb0:	44020c00 	.word	0x44020c00
 8008eb4:	03d09000 	.word	0x03d09000
 8008eb8:	003d0900 	.word	0x003d0900
 8008ebc:	007a1200 	.word	0x007a1200
 8008ec0:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ec4:	4b95      	ldr	r3, [pc, #596]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ed0:	d106      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ed8:	d102      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008eda:	4b91      	ldr	r3, [pc, #580]	@ (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8008edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ede:	e010      	b.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ee0:	4b8e      	ldr	r3, [pc, #568]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eec:	d106      	bne.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8008eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ef4:	d102      	bne.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8008ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efa:	e002      	b.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008f00:	e003      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8008f02:	e002      	b.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f08:	bf00      	nop
          }
        }
        break;
 8008f0a:	e200      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008f0c:	4b83      	ldr	r3, [pc, #524]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f12:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f1e:	d031      	beq.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8008f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f26:	d866      	bhi.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8008f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f2c:	d027      	beq.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f30:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f32:	d860      	bhi.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	2b80      	cmp	r3, #128	@ 0x80
 8008f38:	d019      	beq.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	2b80      	cmp	r3, #128	@ 0x80
 8008f3e:	d85a      	bhi.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	2b40      	cmp	r3, #64	@ 0x40
 8008f4a:	d008      	beq.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8008f4c:	e053      	b.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f4e:	f107 0320 	add.w	r3, r7, #32
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fa56 	bl	8007404 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f5c:	e04e      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5e:	f107 0314 	add.w	r3, r7, #20
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fbba 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f6c:	e046      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f6e:	f107 0308 	add.w	r3, r7, #8
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fe fd1e 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f7c:	e03e      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8008f80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f82:	e03b      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f84:	4b65      	ldr	r3, [pc, #404]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f8a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f90:	4b62      	ldr	r3, [pc, #392]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d10c      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d109      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	08db      	lsrs	r3, r3, #3
 8008fa8:	f003 0303 	and.w	r3, r3, #3
 8008fac:	4a5f      	ldr	r2, [pc, #380]	@ (800912c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8008fae:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb4:	e01e      	b.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fb6:	4b59      	ldr	r3, [pc, #356]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc2:	d106      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8008fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fca:	d102      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008fcc:	4b54      	ldr	r3, [pc, #336]	@ (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8008fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd0:	e010      	b.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fd2:	4b52      	ldr	r3, [pc, #328]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fde:	d106      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8008fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fe6:	d102      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008fe8:	4b4e      	ldr	r3, [pc, #312]	@ (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8008fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fec:	e002      	b.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008ff2:	e003      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8008ff4:	e002      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ffa:	bf00      	nop
          }
        }
        break;
 8008ffc:	e187      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008ffe:	4b47      	ldr	r3, [pc, #284]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009004:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009008:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	2b00      	cmp	r3, #0
 800900e:	d103      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009010:	f7fd f80c 	bl	800602c <HAL_RCC_GetPCLK2Freq>
 8009014:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009016:	e17a      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009018:	4b40      	ldr	r3, [pc, #256]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009020:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009024:	d10b      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800902c:	d107      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800902e:	f107 0314 	add.w	r3, r7, #20
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe fb52 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	637b      	str	r3, [r7, #52]	@ 0x34
 800903c:	e045      	b.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800903e:	4b37      	ldr	r3, [pc, #220]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800904a:	d10b      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009052:	d107      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009054:	f107 0308 	add.w	r3, r7, #8
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fcab 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	637b      	str	r3, [r7, #52]	@ 0x34
 8009062:	e032      	b.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009064:	4b2d      	ldr	r3, [pc, #180]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b02      	cmp	r3, #2
 800906e:	d10d      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8009070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009072:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009076:	d109      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009078:	4b28      	ldr	r3, [pc, #160]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	08db      	lsrs	r3, r3, #3
 800907e:	f003 0303 	and.w	r3, r3, #3
 8009082:	4a2a      	ldr	r2, [pc, #168]	@ (800912c <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8009084:	fa22 f303 	lsr.w	r3, r2, r3
 8009088:	637b      	str	r3, [r7, #52]	@ 0x34
 800908a:	e01e      	b.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800908c:	4b23      	ldr	r3, [pc, #140]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009098:	d106      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 800909a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a0:	d102      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80090a2:	4b1f      	ldr	r3, [pc, #124]	@ (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80090a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a6:	e010      	b.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80090a8:	4b1c      	ldr	r3, [pc, #112]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090b4:	d106      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80090bc:	d102      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80090be:	4b19      	ldr	r3, [pc, #100]	@ (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80090c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c2:	e002      	b.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090c8:	e121      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80090ca:	e120      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80090cc:	4b13      	ldr	r3, [pc, #76]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80090ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090d2:	f003 0303 	and.w	r3, r3, #3
 80090d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d861      	bhi.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80090de:	a201      	add	r2, pc, #4	@ (adr r2, 80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	080090f5 	.word	0x080090f5
 80090e8:	080090fd 	.word	0x080090fd
 80090ec:	0800910d 	.word	0x0800910d
 80090f0:	08009131 	.word	0x08009131

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80090f4:	f7fc ff68 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 80090f8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80090fa:	e055      	b.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090fc:	f107 0320 	add.w	r3, r7, #32
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe f97f 	bl	8007404 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009108:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800910a:	e04d      	b.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800910c:	f107 0314 	add.w	r3, r7, #20
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe fae3 	bl	80076dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800911a:	e045      	b.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800911c:	44020c00 	.word	0x44020c00
 8009120:	003d0900 	.word	0x003d0900
 8009124:	007a1200 	.word	0x007a1200
 8009128:	00bb8000 	.word	0x00bb8000
 800912c:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009130:	4b79      	ldr	r3, [pc, #484]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009136:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800913a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800913c:	4b76      	ldr	r3, [pc, #472]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b02      	cmp	r3, #2
 8009146:	d10c      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8009148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914a:	2b00      	cmp	r3, #0
 800914c:	d109      	bne.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800914e:	4b72      	ldr	r3, [pc, #456]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	08db      	lsrs	r3, r3, #3
 8009154:	f003 0303 	and.w	r3, r3, #3
 8009158:	4a70      	ldr	r2, [pc, #448]	@ (800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 800915a:	fa22 f303 	lsr.w	r3, r2, r3
 800915e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009160:	e01e      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009162:	4b6d      	ldr	r3, [pc, #436]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800916a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800916e:	d106      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8009170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009176:	d102      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009178:	4b69      	ldr	r3, [pc, #420]	@ (8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 800917a:	637b      	str	r3, [r7, #52]	@ 0x34
 800917c:	e010      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800917e:	4b66      	ldr	r3, [pc, #408]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009186:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800918a:	d106      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800918c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009192:	d102      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009194:	4b63      	ldr	r3, [pc, #396]	@ (8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8009196:	637b      	str	r3, [r7, #52]	@ 0x34
 8009198:	e002      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800919e:	e003      	b.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80091a0:	e002      	b.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80091a2:	2300      	movs	r3, #0
 80091a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091a6:	bf00      	nop
          }
        }
        break;
 80091a8:	e0b1      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80091aa:	4b5b      	ldr	r3, [pc, #364]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80091ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091b0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80091b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80091b6:	4b58      	ldr	r3, [pc, #352]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80091b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d106      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d103      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80091ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d0:	e01f      	b.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80091d2:	4b51      	ldr	r3, [pc, #324]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80091d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091e0:	d106      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	2b40      	cmp	r3, #64	@ 0x40
 80091e6:	d103      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80091e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80091ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ee:	e010      	b.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80091f0:	4b49      	ldr	r3, [pc, #292]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091fc:	d106      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	2b80      	cmp	r3, #128	@ 0x80
 8009202:	d103      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8009204:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
 800920a:	e002      	b.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009210:	e07d      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009212:	e07c      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009214:	4b40      	ldr	r3, [pc, #256]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800921a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800921e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009220:	4b3d      	ldr	r3, [pc, #244]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800922c:	d105      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	2b00      	cmp	r3, #0
 8009232:	d102      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8009234:	4b3c      	ldr	r3, [pc, #240]	@ (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8009236:	637b      	str	r3, [r7, #52]	@ 0x34
 8009238:	e031      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800923a:	4b37      	ldr	r3, [pc, #220]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009246:	d10a      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924a:	2b10      	cmp	r3, #16
 800924c:	d107      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800924e:	f107 0320 	add.w	r3, r7, #32
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe f8d6 	bl	8007404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
 800925c:	e01f      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800925e:	4b2e      	ldr	r3, [pc, #184]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8009260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009264:	f003 0302 	and.w	r3, r3, #2
 8009268:	2b02      	cmp	r3, #2
 800926a:	d106      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 800926c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926e:	2b20      	cmp	r3, #32
 8009270:	d103      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8009272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009276:	637b      	str	r3, [r7, #52]	@ 0x34
 8009278:	e011      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800927a:	4b27      	ldr	r3, [pc, #156]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800927c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009288:	d106      	bne.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	2b30      	cmp	r3, #48	@ 0x30
 800928e:	d103      	bne.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8009290:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009294:	637b      	str	r3, [r7, #52]	@ 0x34
 8009296:	e002      	b.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800929c:	e037      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800929e:	e036      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80092a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80092a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80092aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	2b10      	cmp	r3, #16
 80092b0:	d107      	bne.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092b2:	f107 0320 	add.w	r3, r7, #32
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe f8a4 	bl	8007404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092be:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80092c0:	e025      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80092c2:	4b15      	ldr	r3, [pc, #84]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092ce:	d10a      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d107      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d6:	f107 0308 	add.w	r3, r7, #8
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fe fb6a 	bl	80079b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092e4:	e00f      	b.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80092e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092f2:	d105      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	2b30      	cmp	r3, #48	@ 0x30
 80092f8:	d102      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 80092fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80092fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80092fe:	e002      	b.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009304:	e003      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8009306:	e002      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800930c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800930e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009310:	4618      	mov	r0, r3
 8009312:	373c      	adds	r7, #60	@ 0x3c
 8009314:	46bd      	mov	sp, r7
 8009316:	bd90      	pop	{r4, r7, pc}
 8009318:	44020c00 	.word	0x44020c00
 800931c:	03d09000 	.word	0x03d09000
 8009320:	003d0900 	.word	0x003d0900
 8009324:	007a1200 	.word	0x007a1200
 8009328:	02dc6c00 	.word	0x02dc6c00

0800932c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009334:	4b48      	ldr	r3, [pc, #288]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a47      	ldr	r2, [pc, #284]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 800933a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800933e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009340:	f7f9 fc48 	bl	8002bd4 <HAL_GetTick>
 8009344:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009346:	e008      	b.n	800935a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009348:	f7f9 fc44 	bl	8002bd4 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d901      	bls.n	800935a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e07a      	b.n	8009450 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800935a:	4b3f      	ldr	r3, [pc, #252]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1f0      	bne.n	8009348 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009366:	4b3c      	ldr	r3, [pc, #240]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 8009368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6811      	ldr	r1, [r2, #0]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	6852      	ldr	r2, [r2, #4]
 800937a:	0212      	lsls	r2, r2, #8
 800937c:	430a      	orrs	r2, r1
 800937e:	4936      	ldr	r1, [pc, #216]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 8009380:	4313      	orrs	r3, r2
 8009382:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	3b01      	subs	r3, #1
 800938a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	3b01      	subs	r3, #1
 8009394:	025b      	lsls	r3, r3, #9
 8009396:	b29b      	uxth	r3, r3
 8009398:	431a      	orrs	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	3b01      	subs	r3, #1
 80093a0:	041b      	lsls	r3, r3, #16
 80093a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	061b      	lsls	r3, r3, #24
 80093b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80093b4:	4928      	ldr	r1, [pc, #160]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80093ba:	4b27      	ldr	r3, [pc, #156]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093be:	f023 020c 	bic.w	r2, r3, #12
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	4924      	ldr	r1, [pc, #144]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80093cc:	4b22      	ldr	r3, [pc, #136]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d0:	f023 0220 	bic.w	r2, r3, #32
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	491f      	ldr	r1, [pc, #124]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80093de:	4b1e      	ldr	r3, [pc, #120]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e6:	491c      	ldr	r1, [pc, #112]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80093ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f0:	4a19      	ldr	r2, [pc, #100]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093f2:	f023 0310 	bic.w	r3, r3, #16
 80093f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80093f8:	4b17      	ldr	r3, [pc, #92]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 80093fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009400:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	6a12      	ldr	r2, [r2, #32]
 8009408:	00d2      	lsls	r2, r2, #3
 800940a:	4913      	ldr	r1, [pc, #76]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 800940c:	4313      	orrs	r3, r2
 800940e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009410:	4b11      	ldr	r3, [pc, #68]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	4a10      	ldr	r2, [pc, #64]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 8009416:	f043 0310 	orr.w	r3, r3, #16
 800941a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800941c:	4b0e      	ldr	r3, [pc, #56]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0d      	ldr	r2, [pc, #52]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 8009422:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009426:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009428:	f7f9 fbd4 	bl	8002bd4 <HAL_GetTick>
 800942c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800942e:	e008      	b.n	8009442 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009430:	f7f9 fbd0 	bl	8002bd4 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e006      	b.n	8009450 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009442:	4b05      	ldr	r3, [pc, #20]	@ (8009458 <RCCEx_PLL2_Config+0x12c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0f0      	beq.n	8009430 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800944e:	2300      	movs	r3, #0

}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	44020c00 	.word	0x44020c00

0800945c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009464:	4b48      	ldr	r3, [pc, #288]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a47      	ldr	r2, [pc, #284]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 800946a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800946e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009470:	f7f9 fbb0 	bl	8002bd4 <HAL_GetTick>
 8009474:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009476:	e008      	b.n	800948a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009478:	f7f9 fbac 	bl	8002bd4 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d901      	bls.n	800948a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e07a      	b.n	8009580 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800948a:	4b3f      	ldr	r3, [pc, #252]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1f0      	bne.n	8009478 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009496:	4b3c      	ldr	r3, [pc, #240]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 8009498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800949e:	f023 0303 	bic.w	r3, r3, #3
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	6811      	ldr	r1, [r2, #0]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	6852      	ldr	r2, [r2, #4]
 80094aa:	0212      	lsls	r2, r2, #8
 80094ac:	430a      	orrs	r2, r1
 80094ae:	4936      	ldr	r1, [pc, #216]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	630b      	str	r3, [r1, #48]	@ 0x30
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	3b01      	subs	r3, #1
 80094c4:	025b      	lsls	r3, r3, #9
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	041b      	lsls	r3, r3, #16
 80094d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	3b01      	subs	r3, #1
 80094de:	061b      	lsls	r3, r3, #24
 80094e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80094e4:	4928      	ldr	r1, [pc, #160]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80094ea:	4b27      	ldr	r3, [pc, #156]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 80094ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ee:	f023 020c 	bic.w	r2, r3, #12
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	4924      	ldr	r1, [pc, #144]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80094fc:	4b22      	ldr	r3, [pc, #136]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 80094fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009500:	f023 0220 	bic.w	r2, r3, #32
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	491f      	ldr	r1, [pc, #124]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 800950a:	4313      	orrs	r3, r2
 800950c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800950e:	4b1e      	ldr	r3, [pc, #120]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 8009510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009516:	491c      	ldr	r1, [pc, #112]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 8009518:	4313      	orrs	r3, r2
 800951a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800951c:	4b1a      	ldr	r3, [pc, #104]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 800951e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009520:	4a19      	ldr	r2, [pc, #100]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 8009522:	f023 0310 	bic.w	r3, r3, #16
 8009526:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009528:	4b17      	ldr	r3, [pc, #92]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 800952a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800952c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009530:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	6a12      	ldr	r2, [r2, #32]
 8009538:	00d2      	lsls	r2, r2, #3
 800953a:	4913      	ldr	r1, [pc, #76]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 800953c:	4313      	orrs	r3, r2
 800953e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009540:	4b11      	ldr	r3, [pc, #68]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 8009542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009544:	4a10      	ldr	r2, [pc, #64]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 8009546:	f043 0310 	orr.w	r3, r3, #16
 800954a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800954c:	4b0e      	ldr	r3, [pc, #56]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a0d      	ldr	r2, [pc, #52]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 8009552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009556:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009558:	f7f9 fb3c 	bl	8002bd4 <HAL_GetTick>
 800955c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800955e:	e008      	b.n	8009572 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009560:	f7f9 fb38 	bl	8002bd4 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d901      	bls.n	8009572 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e006      	b.n	8009580 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009572:	4b05      	ldr	r3, [pc, #20]	@ (8009588 <RCCEx_PLL3_Config+0x12c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0f0      	beq.n	8009560 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	44020c00 	.word	0x44020c00

0800958c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e049      	b.n	8009632 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d106      	bne.n	80095b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f8 ffd8 	bl	8002568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3304      	adds	r3, #4
 80095c8:	4619      	mov	r1, r3
 80095ca:	4610      	mov	r0, r2
 80095cc:	f000 ff0e 	bl	800a3ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b01      	cmp	r3, #1
 800964e:	d001      	beq.n	8009654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e07c      	b.n	800974e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f042 0201 	orr.w	r2, r2, #1
 800966a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a3a      	ldr	r2, [pc, #232]	@ (800975c <HAL_TIM_Base_Start_IT+0x120>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d04a      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a39      	ldr	r2, [pc, #228]	@ (8009760 <HAL_TIM_Base_Start_IT+0x124>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d045      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009688:	d040      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009692:	d03b      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a32      	ldr	r2, [pc, #200]	@ (8009764 <HAL_TIM_Base_Start_IT+0x128>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d036      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a31      	ldr	r2, [pc, #196]	@ (8009768 <HAL_TIM_Base_Start_IT+0x12c>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d031      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a2f      	ldr	r2, [pc, #188]	@ (800976c <HAL_TIM_Base_Start_IT+0x130>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d02c      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a2e      	ldr	r2, [pc, #184]	@ (8009770 <HAL_TIM_Base_Start_IT+0x134>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d027      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a2c      	ldr	r2, [pc, #176]	@ (8009774 <HAL_TIM_Base_Start_IT+0x138>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d022      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009778 <HAL_TIM_Base_Start_IT+0x13c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d01d      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a29      	ldr	r2, [pc, #164]	@ (800977c <HAL_TIM_Base_Start_IT+0x140>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d018      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a28      	ldr	r2, [pc, #160]	@ (8009780 <HAL_TIM_Base_Start_IT+0x144>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d013      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a26      	ldr	r2, [pc, #152]	@ (8009784 <HAL_TIM_Base_Start_IT+0x148>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00e      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a25      	ldr	r2, [pc, #148]	@ (8009788 <HAL_TIM_Base_Start_IT+0x14c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d009      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a23      	ldr	r2, [pc, #140]	@ (800978c <HAL_TIM_Base_Start_IT+0x150>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d004      	beq.n	800970c <HAL_TIM_Base_Start_IT+0xd0>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a22      	ldr	r2, [pc, #136]	@ (8009790 <HAL_TIM_Base_Start_IT+0x154>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d115      	bne.n	8009738 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	689a      	ldr	r2, [r3, #8]
 8009712:	4b20      	ldr	r3, [pc, #128]	@ (8009794 <HAL_TIM_Base_Start_IT+0x158>)
 8009714:	4013      	ands	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b06      	cmp	r3, #6
 800971c:	d015      	beq.n	800974a <HAL_TIM_Base_Start_IT+0x10e>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009724:	d011      	beq.n	800974a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0201 	orr.w	r2, r2, #1
 8009734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009736:	e008      	b.n	800974a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0201 	orr.w	r2, r2, #1
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	e000      	b.n	800974c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800974a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	40012c00 	.word	0x40012c00
 8009760:	50012c00 	.word	0x50012c00
 8009764:	40000400 	.word	0x40000400
 8009768:	50000400 	.word	0x50000400
 800976c:	40000800 	.word	0x40000800
 8009770:	50000800 	.word	0x50000800
 8009774:	40000c00 	.word	0x40000c00
 8009778:	50000c00 	.word	0x50000c00
 800977c:	40013400 	.word	0x40013400
 8009780:	50013400 	.word	0x50013400
 8009784:	40001800 	.word	0x40001800
 8009788:	50001800 	.word	0x50001800
 800978c:	40014000 	.word	0x40014000
 8009790:	50014000 	.word	0x50014000
 8009794:	00010007 	.word	0x00010007

08009798 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e049      	b.n	800983e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f841 	bl	8009846 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f000 fe08 	bl	800a3ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b082      	sub	sp, #8
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e049      	b.n	8009900 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f841 	bl	8009908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2202      	movs	r2, #2
 800988a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3304      	adds	r3, #4
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f000 fda7 	bl	800a3ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d109      	bne.n	8009940 <HAL_TIM_PWM_Start+0x24>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b01      	cmp	r3, #1
 8009936:	bf14      	ite	ne
 8009938:	2301      	movne	r3, #1
 800993a:	2300      	moveq	r3, #0
 800993c:	b2db      	uxtb	r3, r3
 800993e:	e03c      	b.n	80099ba <HAL_TIM_PWM_Start+0x9e>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b04      	cmp	r3, #4
 8009944:	d109      	bne.n	800995a <HAL_TIM_PWM_Start+0x3e>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b01      	cmp	r3, #1
 8009950:	bf14      	ite	ne
 8009952:	2301      	movne	r3, #1
 8009954:	2300      	moveq	r3, #0
 8009956:	b2db      	uxtb	r3, r3
 8009958:	e02f      	b.n	80099ba <HAL_TIM_PWM_Start+0x9e>
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b08      	cmp	r3, #8
 800995e:	d109      	bne.n	8009974 <HAL_TIM_PWM_Start+0x58>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b01      	cmp	r3, #1
 800996a:	bf14      	ite	ne
 800996c:	2301      	movne	r3, #1
 800996e:	2300      	moveq	r3, #0
 8009970:	b2db      	uxtb	r3, r3
 8009972:	e022      	b.n	80099ba <HAL_TIM_PWM_Start+0x9e>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2b0c      	cmp	r3, #12
 8009978:	d109      	bne.n	800998e <HAL_TIM_PWM_Start+0x72>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b01      	cmp	r3, #1
 8009984:	bf14      	ite	ne
 8009986:	2301      	movne	r3, #1
 8009988:	2300      	moveq	r3, #0
 800998a:	b2db      	uxtb	r3, r3
 800998c:	e015      	b.n	80099ba <HAL_TIM_PWM_Start+0x9e>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b10      	cmp	r3, #16
 8009992:	d109      	bne.n	80099a8 <HAL_TIM_PWM_Start+0x8c>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b01      	cmp	r3, #1
 800999e:	bf14      	ite	ne
 80099a0:	2301      	movne	r3, #1
 80099a2:	2300      	moveq	r3, #0
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	e008      	b.n	80099ba <HAL_TIM_PWM_Start+0x9e>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	bf14      	ite	ne
 80099b4:	2301      	movne	r3, #1
 80099b6:	2300      	moveq	r3, #0
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e0ce      	b.n	8009b60 <HAL_TIM_PWM_Start+0x244>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d104      	bne.n	80099d2 <HAL_TIM_PWM_Start+0xb6>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099d0:	e023      	b.n	8009a1a <HAL_TIM_PWM_Start+0xfe>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	d104      	bne.n	80099e2 <HAL_TIM_PWM_Start+0xc6>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2202      	movs	r2, #2
 80099dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099e0:	e01b      	b.n	8009a1a <HAL_TIM_PWM_Start+0xfe>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	d104      	bne.n	80099f2 <HAL_TIM_PWM_Start+0xd6>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2202      	movs	r2, #2
 80099ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099f0:	e013      	b.n	8009a1a <HAL_TIM_PWM_Start+0xfe>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b0c      	cmp	r3, #12
 80099f6:	d104      	bne.n	8009a02 <HAL_TIM_PWM_Start+0xe6>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a00:	e00b      	b.n	8009a1a <HAL_TIM_PWM_Start+0xfe>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b10      	cmp	r3, #16
 8009a06:	d104      	bne.n	8009a12 <HAL_TIM_PWM_Start+0xf6>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a10:	e003      	b.n	8009a1a <HAL_TIM_PWM_Start+0xfe>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2202      	movs	r2, #2
 8009a16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 f99e 	bl	800ad64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8009b68 <HAL_TIM_PWM_Start+0x24c>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d018      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x148>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a4d      	ldr	r2, [pc, #308]	@ (8009b6c <HAL_TIM_PWM_Start+0x250>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d013      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x148>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a4b      	ldr	r2, [pc, #300]	@ (8009b70 <HAL_TIM_PWM_Start+0x254>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00e      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x148>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8009b74 <HAL_TIM_PWM_Start+0x258>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d009      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x148>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a48      	ldr	r2, [pc, #288]	@ (8009b78 <HAL_TIM_PWM_Start+0x25c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d004      	beq.n	8009a64 <HAL_TIM_PWM_Start+0x148>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a47      	ldr	r2, [pc, #284]	@ (8009b7c <HAL_TIM_PWM_Start+0x260>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d101      	bne.n	8009a68 <HAL_TIM_PWM_Start+0x14c>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e000      	b.n	8009a6a <HAL_TIM_PWM_Start+0x14e>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d007      	beq.n	8009a7e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a39      	ldr	r2, [pc, #228]	@ (8009b68 <HAL_TIM_PWM_Start+0x24c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d04a      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a37      	ldr	r2, [pc, #220]	@ (8009b6c <HAL_TIM_PWM_Start+0x250>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d045      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a9a:	d040      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009aa4:	d03b      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a35      	ldr	r2, [pc, #212]	@ (8009b80 <HAL_TIM_PWM_Start+0x264>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d036      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a33      	ldr	r2, [pc, #204]	@ (8009b84 <HAL_TIM_PWM_Start+0x268>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d031      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a32      	ldr	r2, [pc, #200]	@ (8009b88 <HAL_TIM_PWM_Start+0x26c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d02c      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a30      	ldr	r2, [pc, #192]	@ (8009b8c <HAL_TIM_PWM_Start+0x270>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d027      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8009b90 <HAL_TIM_PWM_Start+0x274>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d022      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a2d      	ldr	r2, [pc, #180]	@ (8009b94 <HAL_TIM_PWM_Start+0x278>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d01d      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a22      	ldr	r2, [pc, #136]	@ (8009b70 <HAL_TIM_PWM_Start+0x254>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d018      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a20      	ldr	r2, [pc, #128]	@ (8009b74 <HAL_TIM_PWM_Start+0x258>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d013      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a27      	ldr	r2, [pc, #156]	@ (8009b98 <HAL_TIM_PWM_Start+0x27c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d00e      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a25      	ldr	r2, [pc, #148]	@ (8009b9c <HAL_TIM_PWM_Start+0x280>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d009      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8009b78 <HAL_TIM_PWM_Start+0x25c>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d004      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x202>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a18      	ldr	r2, [pc, #96]	@ (8009b7c <HAL_TIM_PWM_Start+0x260>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d115      	bne.n	8009b4a <HAL_TIM_PWM_Start+0x22e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689a      	ldr	r2, [r3, #8]
 8009b24:	4b1e      	ldr	r3, [pc, #120]	@ (8009ba0 <HAL_TIM_PWM_Start+0x284>)
 8009b26:	4013      	ands	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b06      	cmp	r3, #6
 8009b2e:	d015      	beq.n	8009b5c <HAL_TIM_PWM_Start+0x240>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b36:	d011      	beq.n	8009b5c <HAL_TIM_PWM_Start+0x240>
    {
      __HAL_TIM_ENABLE(htim);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f042 0201 	orr.w	r2, r2, #1
 8009b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b48:	e008      	b.n	8009b5c <HAL_TIM_PWM_Start+0x240>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f042 0201 	orr.w	r2, r2, #1
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	e000      	b.n	8009b5e <HAL_TIM_PWM_Start+0x242>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	40012c00 	.word	0x40012c00
 8009b6c:	50012c00 	.word	0x50012c00
 8009b70:	40013400 	.word	0x40013400
 8009b74:	50013400 	.word	0x50013400
 8009b78:	40014000 	.word	0x40014000
 8009b7c:	50014000 	.word	0x50014000
 8009b80:	40000400 	.word	0x40000400
 8009b84:	50000400 	.word	0x50000400
 8009b88:	40000800 	.word	0x40000800
 8009b8c:	50000800 	.word	0x50000800
 8009b90:	40000c00 	.word	0x40000c00
 8009b94:	50000c00 	.word	0x50000c00
 8009b98:	40001800 	.word	0x40001800
 8009b9c:	50001800 	.word	0x50001800
 8009ba0:	00010007 	.word	0x00010007

08009ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f003 0302 	and.w	r3, r3, #2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d020      	beq.n	8009c08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d01b      	beq.n	8009c08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f06f 0202 	mvn.w	r2, #2
 8009bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d003      	beq.n	8009bf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fbde 	bl	800a3b0 <HAL_TIM_IC_CaptureCallback>
 8009bf4:	e005      	b.n	8009c02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fbd0 	bl	800a39c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fbe1 	bl	800a3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f003 0304 	and.w	r3, r3, #4
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d020      	beq.n	8009c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f003 0304 	and.w	r3, r3, #4
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01b      	beq.n	8009c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f06f 0204 	mvn.w	r2, #4
 8009c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2202      	movs	r2, #2
 8009c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fbb8 	bl	800a3b0 <HAL_TIM_IC_CaptureCallback>
 8009c40:	e005      	b.n	8009c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fbaa 	bl	800a39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fbbb 	bl	800a3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d020      	beq.n	8009ca0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f003 0308 	and.w	r3, r3, #8
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01b      	beq.n	8009ca0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f06f 0208 	mvn.w	r2, #8
 8009c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2204      	movs	r2, #4
 8009c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fb92 	bl	800a3b0 <HAL_TIM_IC_CaptureCallback>
 8009c8c:	e005      	b.n	8009c9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fb84 	bl	800a39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fb95 	bl	800a3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	f003 0310 	and.w	r3, r3, #16
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d020      	beq.n	8009cec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d01b      	beq.n	8009cec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f06f 0210 	mvn.w	r2, #16
 8009cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2208      	movs	r2, #8
 8009cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fb6c 	bl	800a3b0 <HAL_TIM_IC_CaptureCallback>
 8009cd8:	e005      	b.n	8009ce6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fb5e 	bl	800a39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fb6f 	bl	800a3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00c      	beq.n	8009d10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d007      	beq.n	8009d10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f06f 0201 	mvn.w	r2, #1
 8009d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7f8 f842 	bl	8001d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d104      	bne.n	8009d24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00c      	beq.n	8009d3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d007      	beq.n	8009d3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f001 f9ad 	bl	800b098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00c      	beq.n	8009d62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d007      	beq.n	8009d62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 f9a5 	bl	800b0ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00c      	beq.n	8009d86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d007      	beq.n	8009d86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fb29 	bl	800a3d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00c      	beq.n	8009daa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d007      	beq.n	8009daa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f06f 0220 	mvn.w	r2, #32
 8009da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 f96d 	bl	800b084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00c      	beq.n	8009dce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d007      	beq.n	8009dce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 f979 	bl	800b0c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00c      	beq.n	8009df2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d007      	beq.n	8009df2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 f971 	bl	800b0d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00c      	beq.n	8009e16 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d007      	beq.n	8009e16 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 f969 	bl	800b0e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00c      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d007      	beq.n	8009e3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f961 	bl	800b0fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e3a:	bf00      	nop
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d101      	bne.n	8009e62 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e066      	b.n	8009f30 <HAL_TIM_OC_ConfigChannel+0xec>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b14      	cmp	r3, #20
 8009e6e:	d857      	bhi.n	8009f20 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009e70:	a201      	add	r2, pc, #4	@ (adr r2, 8009e78 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009ecd 	.word	0x08009ecd
 8009e7c:	08009f21 	.word	0x08009f21
 8009e80:	08009f21 	.word	0x08009f21
 8009e84:	08009f21 	.word	0x08009f21
 8009e88:	08009edb 	.word	0x08009edb
 8009e8c:	08009f21 	.word	0x08009f21
 8009e90:	08009f21 	.word	0x08009f21
 8009e94:	08009f21 	.word	0x08009f21
 8009e98:	08009ee9 	.word	0x08009ee9
 8009e9c:	08009f21 	.word	0x08009f21
 8009ea0:	08009f21 	.word	0x08009f21
 8009ea4:	08009f21 	.word	0x08009f21
 8009ea8:	08009ef7 	.word	0x08009ef7
 8009eac:	08009f21 	.word	0x08009f21
 8009eb0:	08009f21 	.word	0x08009f21
 8009eb4:	08009f21 	.word	0x08009f21
 8009eb8:	08009f05 	.word	0x08009f05
 8009ebc:	08009f21 	.word	0x08009f21
 8009ec0:	08009f21 	.word	0x08009f21
 8009ec4:	08009f21 	.word	0x08009f21
 8009ec8:	08009f13 	.word	0x08009f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68b9      	ldr	r1, [r7, #8]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fb74 	bl	800a5c0 <TIM_OC1_SetConfig>
      break;
 8009ed8:	e025      	b.n	8009f26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68b9      	ldr	r1, [r7, #8]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fc07 	bl	800a6f4 <TIM_OC2_SetConfig>
      break;
 8009ee6:	e01e      	b.n	8009f26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68b9      	ldr	r1, [r7, #8]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 fc98 	bl	800a824 <TIM_OC3_SetConfig>
      break;
 8009ef4:	e017      	b.n	8009f26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68b9      	ldr	r1, [r7, #8]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fd27 	bl	800a950 <TIM_OC4_SetConfig>
      break;
 8009f02:	e010      	b.n	8009f26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68b9      	ldr	r1, [r7, #8]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 fdb8 	bl	800aa80 <TIM_OC5_SetConfig>
      break;
 8009f10:	e009      	b.n	8009f26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fe1b 	bl	800ab54 <TIM_OC6_SetConfig>
      break;
 8009f1e:	e002      	b.n	8009f26 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	75fb      	strb	r3, [r7, #23]
      break;
 8009f24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3718      	adds	r7, #24
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d101      	bne.n	8009f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f52:	2302      	movs	r3, #2
 8009f54:	e0ff      	b.n	800a156 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b14      	cmp	r3, #20
 8009f62:	f200 80f0 	bhi.w	800a146 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009f66:	a201      	add	r2, pc, #4	@ (adr r2, 8009f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009fc1 	.word	0x08009fc1
 8009f70:	0800a147 	.word	0x0800a147
 8009f74:	0800a147 	.word	0x0800a147
 8009f78:	0800a147 	.word	0x0800a147
 8009f7c:	0800a001 	.word	0x0800a001
 8009f80:	0800a147 	.word	0x0800a147
 8009f84:	0800a147 	.word	0x0800a147
 8009f88:	0800a147 	.word	0x0800a147
 8009f8c:	0800a043 	.word	0x0800a043
 8009f90:	0800a147 	.word	0x0800a147
 8009f94:	0800a147 	.word	0x0800a147
 8009f98:	0800a147 	.word	0x0800a147
 8009f9c:	0800a083 	.word	0x0800a083
 8009fa0:	0800a147 	.word	0x0800a147
 8009fa4:	0800a147 	.word	0x0800a147
 8009fa8:	0800a147 	.word	0x0800a147
 8009fac:	0800a0c5 	.word	0x0800a0c5
 8009fb0:	0800a147 	.word	0x0800a147
 8009fb4:	0800a147 	.word	0x0800a147
 8009fb8:	0800a147 	.word	0x0800a147
 8009fbc:	0800a105 	.word	0x0800a105
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fafa 	bl	800a5c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	699a      	ldr	r2, [r3, #24]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f042 0208 	orr.w	r2, r2, #8
 8009fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	699a      	ldr	r2, [r3, #24]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 0204 	bic.w	r2, r2, #4
 8009fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6999      	ldr	r1, [r3, #24]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	691a      	ldr	r2, [r3, #16]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	619a      	str	r2, [r3, #24]
      break;
 8009ffe:	e0a5      	b.n	800a14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fb74 	bl	800a6f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	699a      	ldr	r2, [r3, #24]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a01a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699a      	ldr	r2, [r3, #24]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a02a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6999      	ldr	r1, [r3, #24]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	021a      	lsls	r2, r3, #8
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	619a      	str	r2, [r3, #24]
      break;
 800a040:	e084      	b.n	800a14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68b9      	ldr	r1, [r7, #8]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fbeb 	bl	800a824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	69da      	ldr	r2, [r3, #28]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f042 0208 	orr.w	r2, r2, #8
 800a05c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	69da      	ldr	r2, [r3, #28]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0204 	bic.w	r2, r2, #4
 800a06c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69d9      	ldr	r1, [r3, #28]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	691a      	ldr	r2, [r3, #16]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	430a      	orrs	r2, r1
 800a07e:	61da      	str	r2, [r3, #28]
      break;
 800a080:	e064      	b.n	800a14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 fc61 	bl	800a950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69da      	ldr	r2, [r3, #28]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a09c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69da      	ldr	r2, [r3, #28]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	69d9      	ldr	r1, [r3, #28]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	021a      	lsls	r2, r3, #8
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	430a      	orrs	r2, r1
 800a0c0:	61da      	str	r2, [r3, #28]
      break;
 800a0c2:	e043      	b.n	800a14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 fcd8 	bl	800aa80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0208 	orr.w	r2, r2, #8
 800a0de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f022 0204 	bic.w	r2, r2, #4
 800a0ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	691a      	ldr	r2, [r3, #16]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a102:	e023      	b.n	800a14c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68b9      	ldr	r1, [r7, #8]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 fd22 	bl	800ab54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a11e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a12e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	021a      	lsls	r2, r3, #8
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	430a      	orrs	r2, r1
 800a142:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a144:	e002      	b.n	800a14c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	75fb      	strb	r3, [r7, #23]
      break;
 800a14a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a154:	7dfb      	ldrb	r3, [r7, #23]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop

0800a160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_TIM_ConfigClockSource+0x1c>
 800a178:	2302      	movs	r3, #2
 800a17a:	e0fe      	b.n	800a37a <HAL_TIM_ConfigClockSource+0x21a>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a19a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a19e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1b8:	f000 80c9 	beq.w	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a1bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1c0:	f200 80ce 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a1c4:	4a6f      	ldr	r2, [pc, #444]	@ (800a384 <HAL_TIM_ConfigClockSource+0x224>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	f000 80c1 	beq.w	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a1cc:	4a6d      	ldr	r2, [pc, #436]	@ (800a384 <HAL_TIM_ConfigClockSource+0x224>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	f200 80c6 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a1d4:	4a6c      	ldr	r2, [pc, #432]	@ (800a388 <HAL_TIM_ConfigClockSource+0x228>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	f000 80b9 	beq.w	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a1dc:	4a6a      	ldr	r2, [pc, #424]	@ (800a388 <HAL_TIM_ConfigClockSource+0x228>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	f200 80be 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a1e4:	4a69      	ldr	r2, [pc, #420]	@ (800a38c <HAL_TIM_ConfigClockSource+0x22c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	f000 80b1 	beq.w	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a1ec:	4a67      	ldr	r2, [pc, #412]	@ (800a38c <HAL_TIM_ConfigClockSource+0x22c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	f200 80b6 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a1f4:	4a66      	ldr	r2, [pc, #408]	@ (800a390 <HAL_TIM_ConfigClockSource+0x230>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	f000 80a9 	beq.w	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a1fc:	4a64      	ldr	r2, [pc, #400]	@ (800a390 <HAL_TIM_ConfigClockSource+0x230>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	f200 80ae 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a204:	4a63      	ldr	r2, [pc, #396]	@ (800a394 <HAL_TIM_ConfigClockSource+0x234>)
 800a206:	4293      	cmp	r3, r2
 800a208:	f000 80a1 	beq.w	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a20c:	4a61      	ldr	r2, [pc, #388]	@ (800a394 <HAL_TIM_ConfigClockSource+0x234>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	f200 80a6 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a214:	4a60      	ldr	r2, [pc, #384]	@ (800a398 <HAL_TIM_ConfigClockSource+0x238>)
 800a216:	4293      	cmp	r3, r2
 800a218:	f000 8099 	beq.w	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a21c:	4a5e      	ldr	r2, [pc, #376]	@ (800a398 <HAL_TIM_ConfigClockSource+0x238>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	f200 809e 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a224:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a228:	f000 8091 	beq.w	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a22c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a230:	f200 8096 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a234:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a238:	f000 8089 	beq.w	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a23c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a240:	f200 808e 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a248:	d03e      	beq.n	800a2c8 <HAL_TIM_ConfigClockSource+0x168>
 800a24a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a24e:	f200 8087 	bhi.w	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a256:	f000 8086 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x206>
 800a25a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a25e:	d87f      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a260:	2b70      	cmp	r3, #112	@ 0x70
 800a262:	d01a      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x13a>
 800a264:	2b70      	cmp	r3, #112	@ 0x70
 800a266:	d87b      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a268:	2b60      	cmp	r3, #96	@ 0x60
 800a26a:	d050      	beq.n	800a30e <HAL_TIM_ConfigClockSource+0x1ae>
 800a26c:	2b60      	cmp	r3, #96	@ 0x60
 800a26e:	d877      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a270:	2b50      	cmp	r3, #80	@ 0x50
 800a272:	d03c      	beq.n	800a2ee <HAL_TIM_ConfigClockSource+0x18e>
 800a274:	2b50      	cmp	r3, #80	@ 0x50
 800a276:	d873      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a278:	2b40      	cmp	r3, #64	@ 0x40
 800a27a:	d058      	beq.n	800a32e <HAL_TIM_ConfigClockSource+0x1ce>
 800a27c:	2b40      	cmp	r3, #64	@ 0x40
 800a27e:	d86f      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a280:	2b30      	cmp	r3, #48	@ 0x30
 800a282:	d064      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a284:	2b30      	cmp	r3, #48	@ 0x30
 800a286:	d86b      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d060      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d867      	bhi.n	800a360 <HAL_TIM_ConfigClockSource+0x200>
 800a290:	2b00      	cmp	r3, #0
 800a292:	d05c      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a294:	2b10      	cmp	r3, #16
 800a296:	d05a      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x1ee>
 800a298:	e062      	b.n	800a360 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2aa:	f000 fd3b 	bl	800ad24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a2bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	609a      	str	r2, [r3, #8]
      break;
 800a2c6:	e04f      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2d8:	f000 fd24 	bl	800ad24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a2ea:	609a      	str	r2, [r3, #8]
      break;
 800a2ec:	e03c      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f000 fc96 	bl	800ac2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2150      	movs	r1, #80	@ 0x50
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fcef 	bl	800acea <TIM_ITRx_SetConfig>
      break;
 800a30c:	e02c      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a31a:	461a      	mov	r2, r3
 800a31c:	f000 fcb5 	bl	800ac8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2160      	movs	r1, #96	@ 0x60
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fcdf 	bl	800acea <TIM_ITRx_SetConfig>
      break;
 800a32c:	e01c      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a33a:	461a      	mov	r2, r3
 800a33c:	f000 fc76 	bl	800ac2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2140      	movs	r1, #64	@ 0x40
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fccf 	bl	800acea <TIM_ITRx_SetConfig>
      break;
 800a34c:	e00c      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4619      	mov	r1, r3
 800a358:	4610      	mov	r0, r2
 800a35a:	f000 fcc6 	bl	800acea <TIM_ITRx_SetConfig>
      break;
 800a35e:	e003      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	73fb      	strb	r3, [r7, #15]
      break;
 800a364:	e000      	b.n	800a368 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800a366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a378:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	00100070 	.word	0x00100070
 800a388:	00100060 	.word	0x00100060
 800a38c:	00100050 	.word	0x00100050
 800a390:	00100040 	.word	0x00100040
 800a394:	00100030 	.word	0x00100030
 800a398:	00100020 	.word	0x00100020

0800a39c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a62      	ldr	r2, [pc, #392]	@ (800a588 <TIM_Base_SetConfig+0x19c>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d02b      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a61      	ldr	r2, [pc, #388]	@ (800a58c <TIM_Base_SetConfig+0x1a0>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d027      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a412:	d023      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a41a:	d01f      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a5c      	ldr	r2, [pc, #368]	@ (800a590 <TIM_Base_SetConfig+0x1a4>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d01b      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a5b      	ldr	r2, [pc, #364]	@ (800a594 <TIM_Base_SetConfig+0x1a8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d017      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a5a      	ldr	r2, [pc, #360]	@ (800a598 <TIM_Base_SetConfig+0x1ac>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d013      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a59      	ldr	r2, [pc, #356]	@ (800a59c <TIM_Base_SetConfig+0x1b0>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d00f      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a58      	ldr	r2, [pc, #352]	@ (800a5a0 <TIM_Base_SetConfig+0x1b4>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d00b      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a57      	ldr	r2, [pc, #348]	@ (800a5a4 <TIM_Base_SetConfig+0x1b8>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d007      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a56      	ldr	r2, [pc, #344]	@ (800a5a8 <TIM_Base_SetConfig+0x1bc>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d003      	beq.n	800a45c <TIM_Base_SetConfig+0x70>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a55      	ldr	r2, [pc, #340]	@ (800a5ac <TIM_Base_SetConfig+0x1c0>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d108      	bne.n	800a46e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a45      	ldr	r2, [pc, #276]	@ (800a588 <TIM_Base_SetConfig+0x19c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d03b      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a44      	ldr	r2, [pc, #272]	@ (800a58c <TIM_Base_SetConfig+0x1a0>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d037      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a484:	d033      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a48c:	d02f      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a3f      	ldr	r2, [pc, #252]	@ (800a590 <TIM_Base_SetConfig+0x1a4>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d02b      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a3e      	ldr	r2, [pc, #248]	@ (800a594 <TIM_Base_SetConfig+0x1a8>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d027      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a3d      	ldr	r2, [pc, #244]	@ (800a598 <TIM_Base_SetConfig+0x1ac>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d023      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a3c      	ldr	r2, [pc, #240]	@ (800a59c <TIM_Base_SetConfig+0x1b0>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d01f      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a3b      	ldr	r2, [pc, #236]	@ (800a5a0 <TIM_Base_SetConfig+0x1b4>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d01b      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a3a      	ldr	r2, [pc, #232]	@ (800a5a4 <TIM_Base_SetConfig+0x1b8>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d017      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a39      	ldr	r2, [pc, #228]	@ (800a5a8 <TIM_Base_SetConfig+0x1bc>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d013      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a38      	ldr	r2, [pc, #224]	@ (800a5ac <TIM_Base_SetConfig+0x1c0>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d00f      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a37      	ldr	r2, [pc, #220]	@ (800a5b0 <TIM_Base_SetConfig+0x1c4>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d00b      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a36      	ldr	r2, [pc, #216]	@ (800a5b4 <TIM_Base_SetConfig+0x1c8>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d007      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a35      	ldr	r2, [pc, #212]	@ (800a5b8 <TIM_Base_SetConfig+0x1cc>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d003      	beq.n	800a4ee <TIM_Base_SetConfig+0x102>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a34      	ldr	r2, [pc, #208]	@ (800a5bc <TIM_Base_SetConfig+0x1d0>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d108      	bne.n	800a500 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a18      	ldr	r2, [pc, #96]	@ (800a588 <TIM_Base_SetConfig+0x19c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d013      	beq.n	800a554 <TIM_Base_SetConfig+0x168>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a17      	ldr	r2, [pc, #92]	@ (800a58c <TIM_Base_SetConfig+0x1a0>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d00f      	beq.n	800a554 <TIM_Base_SetConfig+0x168>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a1c      	ldr	r2, [pc, #112]	@ (800a5a8 <TIM_Base_SetConfig+0x1bc>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d00b      	beq.n	800a554 <TIM_Base_SetConfig+0x168>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a1b      	ldr	r2, [pc, #108]	@ (800a5ac <TIM_Base_SetConfig+0x1c0>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d007      	beq.n	800a554 <TIM_Base_SetConfig+0x168>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a1c      	ldr	r2, [pc, #112]	@ (800a5b8 <TIM_Base_SetConfig+0x1cc>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d003      	beq.n	800a554 <TIM_Base_SetConfig+0x168>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a1b      	ldr	r2, [pc, #108]	@ (800a5bc <TIM_Base_SetConfig+0x1d0>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d103      	bne.n	800a55c <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	691a      	ldr	r2, [r3, #16]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d105      	bne.n	800a57a <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	f023 0201 	bic.w	r2, r3, #1
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	611a      	str	r2, [r3, #16]
  }
}
 800a57a:	bf00      	nop
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	40012c00 	.word	0x40012c00
 800a58c:	50012c00 	.word	0x50012c00
 800a590:	40000400 	.word	0x40000400
 800a594:	50000400 	.word	0x50000400
 800a598:	40000800 	.word	0x40000800
 800a59c:	50000800 	.word	0x50000800
 800a5a0:	40000c00 	.word	0x40000c00
 800a5a4:	50000c00 	.word	0x50000c00
 800a5a8:	40013400 	.word	0x40013400
 800a5ac:	50013400 	.word	0x50013400
 800a5b0:	40001800 	.word	0x40001800
 800a5b4:	50001800 	.word	0x50001800
 800a5b8:	40014000 	.word	0x40014000
 800a5bc:	50014000 	.word	0x50014000

0800a5c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a1b      	ldr	r3, [r3, #32]
 800a5d4:	f023 0201 	bic.w	r2, r3, #1
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f023 0303 	bic.w	r3, r3, #3
 800a5fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f023 0302 	bic.w	r3, r3, #2
 800a60c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	4313      	orrs	r3, r2
 800a616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a30      	ldr	r2, [pc, #192]	@ (800a6dc <TIM_OC1_SetConfig+0x11c>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d013      	beq.n	800a648 <TIM_OC1_SetConfig+0x88>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a2f      	ldr	r2, [pc, #188]	@ (800a6e0 <TIM_OC1_SetConfig+0x120>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d00f      	beq.n	800a648 <TIM_OC1_SetConfig+0x88>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a2e      	ldr	r2, [pc, #184]	@ (800a6e4 <TIM_OC1_SetConfig+0x124>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d00b      	beq.n	800a648 <TIM_OC1_SetConfig+0x88>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a2d      	ldr	r2, [pc, #180]	@ (800a6e8 <TIM_OC1_SetConfig+0x128>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d007      	beq.n	800a648 <TIM_OC1_SetConfig+0x88>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ec <TIM_OC1_SetConfig+0x12c>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d003      	beq.n	800a648 <TIM_OC1_SetConfig+0x88>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a2b      	ldr	r2, [pc, #172]	@ (800a6f0 <TIM_OC1_SetConfig+0x130>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d10c      	bne.n	800a662 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f023 0308 	bic.w	r3, r3, #8
 800a64e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	4313      	orrs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f023 0304 	bic.w	r3, r3, #4
 800a660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a1d      	ldr	r2, [pc, #116]	@ (800a6dc <TIM_OC1_SetConfig+0x11c>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d013      	beq.n	800a692 <TIM_OC1_SetConfig+0xd2>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a1c      	ldr	r2, [pc, #112]	@ (800a6e0 <TIM_OC1_SetConfig+0x120>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d00f      	beq.n	800a692 <TIM_OC1_SetConfig+0xd2>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a1b      	ldr	r2, [pc, #108]	@ (800a6e4 <TIM_OC1_SetConfig+0x124>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d00b      	beq.n	800a692 <TIM_OC1_SetConfig+0xd2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a1a      	ldr	r2, [pc, #104]	@ (800a6e8 <TIM_OC1_SetConfig+0x128>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d007      	beq.n	800a692 <TIM_OC1_SetConfig+0xd2>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a19      	ldr	r2, [pc, #100]	@ (800a6ec <TIM_OC1_SetConfig+0x12c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d003      	beq.n	800a692 <TIM_OC1_SetConfig+0xd2>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a18      	ldr	r2, [pc, #96]	@ (800a6f0 <TIM_OC1_SetConfig+0x130>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d111      	bne.n	800a6b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	621a      	str	r2, [r3, #32]
}
 800a6d0:	bf00      	nop
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	40012c00 	.word	0x40012c00
 800a6e0:	50012c00 	.word	0x50012c00
 800a6e4:	40013400 	.word	0x40013400
 800a6e8:	50013400 	.word	0x50013400
 800a6ec:	40014000 	.word	0x40014000
 800a6f0:	50014000 	.word	0x50014000

0800a6f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	f023 0210 	bic.w	r2, r3, #16
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a72e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	021b      	lsls	r3, r3, #8
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	4313      	orrs	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f023 0320 	bic.w	r3, r3, #32
 800a742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	011b      	lsls	r3, r3, #4
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a2e      	ldr	r2, [pc, #184]	@ (800a80c <TIM_OC2_SetConfig+0x118>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00b      	beq.n	800a770 <TIM_OC2_SetConfig+0x7c>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a2d      	ldr	r2, [pc, #180]	@ (800a810 <TIM_OC2_SetConfig+0x11c>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d007      	beq.n	800a770 <TIM_OC2_SetConfig+0x7c>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a2c      	ldr	r2, [pc, #176]	@ (800a814 <TIM_OC2_SetConfig+0x120>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_OC2_SetConfig+0x7c>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a2b      	ldr	r2, [pc, #172]	@ (800a818 <TIM_OC2_SetConfig+0x124>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d10d      	bne.n	800a78c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	011b      	lsls	r3, r3, #4
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	4313      	orrs	r3, r2
 800a782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a78a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a1f      	ldr	r2, [pc, #124]	@ (800a80c <TIM_OC2_SetConfig+0x118>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d013      	beq.n	800a7bc <TIM_OC2_SetConfig+0xc8>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a1e      	ldr	r2, [pc, #120]	@ (800a810 <TIM_OC2_SetConfig+0x11c>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d00f      	beq.n	800a7bc <TIM_OC2_SetConfig+0xc8>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a1d      	ldr	r2, [pc, #116]	@ (800a814 <TIM_OC2_SetConfig+0x120>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d00b      	beq.n	800a7bc <TIM_OC2_SetConfig+0xc8>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a818 <TIM_OC2_SetConfig+0x124>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d007      	beq.n	800a7bc <TIM_OC2_SetConfig+0xc8>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a81c <TIM_OC2_SetConfig+0x128>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d003      	beq.n	800a7bc <TIM_OC2_SetConfig+0xc8>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a820 <TIM_OC2_SetConfig+0x12c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d113      	bne.n	800a7e4 <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	621a      	str	r2, [r3, #32]
}
 800a7fe:	bf00      	nop
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	40012c00 	.word	0x40012c00
 800a810:	50012c00 	.word	0x50012c00
 800a814:	40013400 	.word	0x40013400
 800a818:	50013400 	.word	0x50013400
 800a81c:	40014000 	.word	0x40014000
 800a820:	50014000 	.word	0x50014000

0800a824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	69db      	ldr	r3, [r3, #28]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0303 	bic.w	r3, r3, #3
 800a85e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	4313      	orrs	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	021b      	lsls	r3, r3, #8
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a2d      	ldr	r2, [pc, #180]	@ (800a938 <TIM_OC3_SetConfig+0x114>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d00b      	beq.n	800a89e <TIM_OC3_SetConfig+0x7a>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a2c      	ldr	r2, [pc, #176]	@ (800a93c <TIM_OC3_SetConfig+0x118>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d007      	beq.n	800a89e <TIM_OC3_SetConfig+0x7a>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a2b      	ldr	r2, [pc, #172]	@ (800a940 <TIM_OC3_SetConfig+0x11c>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d003      	beq.n	800a89e <TIM_OC3_SetConfig+0x7a>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a2a      	ldr	r2, [pc, #168]	@ (800a944 <TIM_OC3_SetConfig+0x120>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d10d      	bne.n	800a8ba <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	021b      	lsls	r3, r3, #8
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a1e      	ldr	r2, [pc, #120]	@ (800a938 <TIM_OC3_SetConfig+0x114>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d013      	beq.n	800a8ea <TIM_OC3_SetConfig+0xc6>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a93c <TIM_OC3_SetConfig+0x118>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d00f      	beq.n	800a8ea <TIM_OC3_SetConfig+0xc6>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a1c      	ldr	r2, [pc, #112]	@ (800a940 <TIM_OC3_SetConfig+0x11c>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d00b      	beq.n	800a8ea <TIM_OC3_SetConfig+0xc6>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a1b      	ldr	r2, [pc, #108]	@ (800a944 <TIM_OC3_SetConfig+0x120>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d007      	beq.n	800a8ea <TIM_OC3_SetConfig+0xc6>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a1a      	ldr	r2, [pc, #104]	@ (800a948 <TIM_OC3_SetConfig+0x124>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d003      	beq.n	800a8ea <TIM_OC3_SetConfig+0xc6>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a19      	ldr	r2, [pc, #100]	@ (800a94c <TIM_OC3_SetConfig+0x128>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d113      	bne.n	800a912 <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	011b      	lsls	r3, r3, #4
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	4313      	orrs	r3, r2
 800a904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4313      	orrs	r3, r2
 800a910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	685a      	ldr	r2, [r3, #4]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	621a      	str	r2, [r3, #32]
}
 800a92c:	bf00      	nop
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	40012c00 	.word	0x40012c00
 800a93c:	50012c00 	.word	0x50012c00
 800a940:	40013400 	.word	0x40013400
 800a944:	50013400 	.word	0x50013400
 800a948:	40014000 	.word	0x40014000
 800a94c:	50014000 	.word	0x50014000

0800a950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a1b      	ldr	r3, [r3, #32]
 800a964:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a97e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a98a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	021b      	lsls	r3, r3, #8
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4313      	orrs	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a99e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	031b      	lsls	r3, r3, #12
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a2e      	ldr	r2, [pc, #184]	@ (800aa68 <TIM_OC4_SetConfig+0x118>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d00b      	beq.n	800a9cc <TIM_OC4_SetConfig+0x7c>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a2d      	ldr	r2, [pc, #180]	@ (800aa6c <TIM_OC4_SetConfig+0x11c>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d007      	beq.n	800a9cc <TIM_OC4_SetConfig+0x7c>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a2c      	ldr	r2, [pc, #176]	@ (800aa70 <TIM_OC4_SetConfig+0x120>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d003      	beq.n	800a9cc <TIM_OC4_SetConfig+0x7c>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a2b      	ldr	r2, [pc, #172]	@ (800aa74 <TIM_OC4_SetConfig+0x124>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d10d      	bne.n	800a9e8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a9d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	031b      	lsls	r3, r3, #12
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a1f      	ldr	r2, [pc, #124]	@ (800aa68 <TIM_OC4_SetConfig+0x118>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d013      	beq.n	800aa18 <TIM_OC4_SetConfig+0xc8>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a1e      	ldr	r2, [pc, #120]	@ (800aa6c <TIM_OC4_SetConfig+0x11c>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d00f      	beq.n	800aa18 <TIM_OC4_SetConfig+0xc8>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a1d      	ldr	r2, [pc, #116]	@ (800aa70 <TIM_OC4_SetConfig+0x120>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d00b      	beq.n	800aa18 <TIM_OC4_SetConfig+0xc8>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a1c      	ldr	r2, [pc, #112]	@ (800aa74 <TIM_OC4_SetConfig+0x124>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d007      	beq.n	800aa18 <TIM_OC4_SetConfig+0xc8>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a1b      	ldr	r2, [pc, #108]	@ (800aa78 <TIM_OC4_SetConfig+0x128>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d003      	beq.n	800aa18 <TIM_OC4_SetConfig+0xc8>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a1a      	ldr	r2, [pc, #104]	@ (800aa7c <TIM_OC4_SetConfig+0x12c>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d113      	bne.n	800aa40 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aa26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	019b      	lsls	r3, r3, #6
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	019b      	lsls	r3, r3, #6
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	621a      	str	r2, [r3, #32]
}
 800aa5a:	bf00      	nop
 800aa5c:	371c      	adds	r7, #28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	40012c00 	.word	0x40012c00
 800aa6c:	50012c00 	.word	0x50012c00
 800aa70:	40013400 	.word	0x40013400
 800aa74:	50013400 	.word	0x50013400
 800aa78:	40014000 	.word	0x40014000
 800aa7c:	50014000 	.word	0x50014000

0800aa80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aaae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aac4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	041b      	lsls	r3, r3, #16
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	4313      	orrs	r3, r2
 800aad0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a19      	ldr	r2, [pc, #100]	@ (800ab3c <TIM_OC5_SetConfig+0xbc>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d013      	beq.n	800ab02 <TIM_OC5_SetConfig+0x82>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a18      	ldr	r2, [pc, #96]	@ (800ab40 <TIM_OC5_SetConfig+0xc0>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d00f      	beq.n	800ab02 <TIM_OC5_SetConfig+0x82>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a17      	ldr	r2, [pc, #92]	@ (800ab44 <TIM_OC5_SetConfig+0xc4>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d00b      	beq.n	800ab02 <TIM_OC5_SetConfig+0x82>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a16      	ldr	r2, [pc, #88]	@ (800ab48 <TIM_OC5_SetConfig+0xc8>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d007      	beq.n	800ab02 <TIM_OC5_SetConfig+0x82>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a15      	ldr	r2, [pc, #84]	@ (800ab4c <TIM_OC5_SetConfig+0xcc>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d003      	beq.n	800ab02 <TIM_OC5_SetConfig+0x82>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a14      	ldr	r2, [pc, #80]	@ (800ab50 <TIM_OC5_SetConfig+0xd0>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d109      	bne.n	800ab16 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	621a      	str	r2, [r3, #32]
}
 800ab30:	bf00      	nop
 800ab32:	371c      	adds	r7, #28
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	40012c00 	.word	0x40012c00
 800ab40:	50012c00 	.word	0x50012c00
 800ab44:	40013400 	.word	0x40013400
 800ab48:	50013400 	.word	0x50013400
 800ab4c:	40014000 	.word	0x40014000
 800ab50:	50014000 	.word	0x50014000

0800ab54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	021b      	lsls	r3, r3, #8
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	4313      	orrs	r3, r2
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	051b      	lsls	r3, r3, #20
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a1a      	ldr	r2, [pc, #104]	@ (800ac14 <TIM_OC6_SetConfig+0xc0>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d013      	beq.n	800abd8 <TIM_OC6_SetConfig+0x84>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a19      	ldr	r2, [pc, #100]	@ (800ac18 <TIM_OC6_SetConfig+0xc4>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d00f      	beq.n	800abd8 <TIM_OC6_SetConfig+0x84>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a18      	ldr	r2, [pc, #96]	@ (800ac1c <TIM_OC6_SetConfig+0xc8>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d00b      	beq.n	800abd8 <TIM_OC6_SetConfig+0x84>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a17      	ldr	r2, [pc, #92]	@ (800ac20 <TIM_OC6_SetConfig+0xcc>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d007      	beq.n	800abd8 <TIM_OC6_SetConfig+0x84>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a16      	ldr	r2, [pc, #88]	@ (800ac24 <TIM_OC6_SetConfig+0xd0>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d003      	beq.n	800abd8 <TIM_OC6_SetConfig+0x84>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a15      	ldr	r2, [pc, #84]	@ (800ac28 <TIM_OC6_SetConfig+0xd4>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d109      	bne.n	800abec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800abde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	029b      	lsls	r3, r3, #10
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	4313      	orrs	r3, r2
 800abea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	621a      	str	r2, [r3, #32]
}
 800ac06:	bf00      	nop
 800ac08:	371c      	adds	r7, #28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	40012c00 	.word	0x40012c00
 800ac18:	50012c00 	.word	0x50012c00
 800ac1c:	40013400 	.word	0x40013400
 800ac20:	50013400 	.word	0x50013400
 800ac24:	40014000 	.word	0x40014000
 800ac28:	50014000 	.word	0x50014000

0800ac2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
 800ac3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	f023 0201 	bic.w	r2, r3, #1
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f023 030a 	bic.w	r3, r3, #10
 800ac68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	621a      	str	r2, [r3, #32]
}
 800ac7e:	bf00      	nop
 800ac80:	371c      	adds	r7, #28
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b087      	sub	sp, #28
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	60f8      	str	r0, [r7, #12]
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	f023 0210 	bic.w	r2, r3, #16
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800acb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	031b      	lsls	r3, r3, #12
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800acc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	011b      	lsls	r3, r3, #4
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	4313      	orrs	r3, r2
 800acd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	621a      	str	r2, [r3, #32]
}
 800acde:	bf00      	nop
 800ace0:	371c      	adds	r7, #28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acea:	b480      	push	{r7}
 800acec:	b085      	sub	sp, #20
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ad00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	f043 0307 	orr.w	r3, r3, #7
 800ad10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	609a      	str	r2, [r3, #8]
}
 800ad18:	bf00      	nop
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	021a      	lsls	r2, r3, #8
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	431a      	orrs	r2, r3
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	609a      	str	r2, [r3, #8]
}
 800ad58:	bf00      	nop
 800ad5a:	371c      	adds	r7, #28
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f003 031f 	and.w	r3, r3, #31
 800ad76:	2201      	movs	r2, #1
 800ad78:	fa02 f303 	lsl.w	r3, r2, r3
 800ad7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a1a      	ldr	r2, [r3, #32]
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	43db      	mvns	r3, r3
 800ad86:	401a      	ands	r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6a1a      	ldr	r2, [r3, #32]
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	f003 031f 	and.w	r3, r3, #31
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	fa01 f303 	lsl.w	r3, r1, r3
 800ad9c:	431a      	orrs	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	621a      	str	r2, [r3, #32]
}
 800ada2:	bf00      	nop
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
	...

0800adb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d101      	bne.n	800adc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adc4:	2302      	movs	r3, #2
 800adc6:	e0a1      	b.n	800af0c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2202      	movs	r2, #2
 800add4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a4a      	ldr	r2, [pc, #296]	@ (800af18 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d00e      	beq.n	800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a49      	ldr	r2, [pc, #292]	@ (800af1c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d009      	beq.n	800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a47      	ldr	r2, [pc, #284]	@ (800af20 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d004      	beq.n	800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a46      	ldr	r2, [pc, #280]	@ (800af24 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d108      	bne.n	800ae22 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ae28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a34      	ldr	r2, [pc, #208]	@ (800af18 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d04a      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a33      	ldr	r2, [pc, #204]	@ (800af1c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d045      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae5c:	d040      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae66:	d03b      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a2e      	ldr	r2, [pc, #184]	@ (800af28 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d036      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a2d      	ldr	r2, [pc, #180]	@ (800af2c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d031      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a2b      	ldr	r2, [pc, #172]	@ (800af30 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d02c      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a2a      	ldr	r2, [pc, #168]	@ (800af34 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d027      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a28      	ldr	r2, [pc, #160]	@ (800af38 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d022      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a27      	ldr	r2, [pc, #156]	@ (800af3c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d01d      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a1d      	ldr	r2, [pc, #116]	@ (800af20 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d018      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a1c      	ldr	r2, [pc, #112]	@ (800af24 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d013      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a20      	ldr	r2, [pc, #128]	@ (800af40 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d00e      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a1f      	ldr	r2, [pc, #124]	@ (800af44 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d009      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a1d      	ldr	r2, [pc, #116]	@ (800af48 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d004      	beq.n	800aee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a1c      	ldr	r2, [pc, #112]	@ (800af4c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d10c      	bne.n	800aefa <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aee6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr
 800af18:	40012c00 	.word	0x40012c00
 800af1c:	50012c00 	.word	0x50012c00
 800af20:	40013400 	.word	0x40013400
 800af24:	50013400 	.word	0x50013400
 800af28:	40000400 	.word	0x40000400
 800af2c:	50000400 	.word	0x50000400
 800af30:	40000800 	.word	0x40000800
 800af34:	50000800 	.word	0x50000800
 800af38:	40000c00 	.word	0x40000c00
 800af3c:	50000c00 	.word	0x50000c00
 800af40:	40001800 	.word	0x40001800
 800af44:	50001800 	.word	0x50001800
 800af48:	40014000 	.word	0x40014000
 800af4c:	50014000 	.word	0x50014000

0800af50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af64:	2b01      	cmp	r3, #1
 800af66:	d101      	bne.n	800af6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af68:	2302      	movs	r3, #2
 800af6a:	e07d      	b.n	800b068 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	4313      	orrs	r3, r2
 800af80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd2:	4313      	orrs	r3, r2
 800afd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	041b      	lsls	r3, r3, #16
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a1e      	ldr	r2, [pc, #120]	@ (800b074 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d00e      	beq.n	800b01c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a1d      	ldr	r2, [pc, #116]	@ (800b078 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d009      	beq.n	800b01c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a1b      	ldr	r2, [pc, #108]	@ (800b07c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d004      	beq.n	800b01c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a1a      	ldr	r2, [pc, #104]	@ (800b080 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d11c      	bne.n	800b056 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b026:	051b      	lsls	r3, r3, #20
 800b028:	4313      	orrs	r3, r2
 800b02a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b044:	4313      	orrs	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b052:	4313      	orrs	r3, r2
 800b054:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	40012c00 	.word	0x40012c00
 800b078:	50012c00 	.word	0x50012c00
 800b07c:	40013400 	.word	0x40013400
 800b080:	50013400 	.word	0x50013400

0800b084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e042      	b.n	800b1a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d106      	bne.n	800b13a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7f7 fb69 	bl	800280c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2224      	movs	r2, #36	@ 0x24
 800b13e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f022 0201 	bic.w	r2, r2, #1
 800b150:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b156:	2b00      	cmp	r3, #0
 800b158:	d002      	beq.n	800b160 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fdde 	bl	800bd1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fc2d 	bl	800b9c0 <UART_SetConfig>
 800b166:	4603      	mov	r3, r0
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d101      	bne.n	800b170 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e01b      	b.n	800b1a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b17e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	689a      	ldr	r2, [r3, #8]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b18e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f042 0201 	orr.w	r2, r2, #1
 800b19e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fe5d 	bl	800be60 <UART_CheckIdleState>
 800b1a6:	4603      	mov	r3, r0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b08a      	sub	sp, #40	@ 0x28
 800b1b4:	af02      	add	r7, sp, #8
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1c6:	2b20      	cmp	r3, #32
 800b1c8:	f040 808b 	bne.w	800b2e2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d002      	beq.n	800b1d8 <HAL_UART_Transmit+0x28>
 800b1d2:	88fb      	ldrh	r3, [r7, #6]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d101      	bne.n	800b1dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e083      	b.n	800b2e4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1e6:	2b80      	cmp	r3, #128	@ 0x80
 800b1e8:	d107      	bne.n	800b1fa <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689a      	ldr	r2, [r3, #8]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b1f8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2221      	movs	r2, #33	@ 0x21
 800b206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b20a:	f7f7 fce3 	bl	8002bd4 <HAL_GetTick>
 800b20e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	88fa      	ldrh	r2, [r7, #6]
 800b214:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	88fa      	ldrh	r2, [r7, #6]
 800b21c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b228:	d108      	bne.n	800b23c <HAL_UART_Transmit+0x8c>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d104      	bne.n	800b23c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	61bb      	str	r3, [r7, #24]
 800b23a:	e003      	b.n	800b244 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b244:	e030      	b.n	800b2a8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2200      	movs	r2, #0
 800b24e:	2180      	movs	r1, #128	@ 0x80
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 feaf 	bl	800bfb4 <UART_WaitOnFlagUntilTimeout>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d005      	beq.n	800b268 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2220      	movs	r2, #32
 800b260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e03d      	b.n	800b2e4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10b      	bne.n	800b286 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b27c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	3302      	adds	r3, #2
 800b282:	61bb      	str	r3, [r7, #24]
 800b284:	e007      	b.n	800b296 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	781a      	ldrb	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	3301      	adds	r3, #1
 800b294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1c8      	bne.n	800b246 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2140      	movs	r1, #64	@ 0x40
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f000 fe78 	bl	800bfb4 <UART_WaitOnFlagUntilTimeout>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d005      	beq.n	800b2d6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	e006      	b.n	800b2e4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2220      	movs	r2, #32
 800b2da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	e000      	b.n	800b2e4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b2e2:	2302      	movs	r3, #2
  }
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3720      	adds	r7, #32
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08a      	sub	sp, #40	@ 0x28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b300:	2b20      	cmp	r3, #32
 800b302:	d13c      	bne.n	800b37e <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d002      	beq.n	800b310 <HAL_UART_Receive_DMA+0x24>
 800b30a:	88fb      	ldrh	r3, [r7, #6]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e035      	b.n	800b380 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a1a      	ldr	r2, [pc, #104]	@ (800b388 <HAL_UART_Receive_DMA+0x9c>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d024      	beq.n	800b36e <HAL_UART_Receive_DMA+0x82>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a18      	ldr	r2, [pc, #96]	@ (800b38c <HAL_UART_Receive_DMA+0xa0>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d01f      	beq.n	800b36e <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d018      	beq.n	800b36e <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	613b      	str	r3, [r7, #16]
   return(result);
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b350:	627b      	str	r3, [r7, #36]	@ 0x24
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35a:	623b      	str	r3, [r7, #32]
 800b35c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35e:	69f9      	ldr	r1, [r7, #28]
 800b360:	6a3a      	ldr	r2, [r7, #32]
 800b362:	e841 2300 	strex	r3, r2, [r1]
 800b366:	61bb      	str	r3, [r7, #24]
   return(result);
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1e6      	bne.n	800b33c <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b36e:	88fb      	ldrh	r3, [r7, #6]
 800b370:	461a      	mov	r2, r3
 800b372:	68b9      	ldr	r1, [r7, #8]
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 fe8b 	bl	800c090 <UART_Start_Receive_DMA>
 800b37a:	4603      	mov	r3, r0
 800b37c:	e000      	b.n	800b380 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b37e:	2302      	movs	r3, #2
  }
}
 800b380:	4618      	mov	r0, r3
 800b382:	3728      	adds	r7, #40	@ 0x28
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	44002400 	.word	0x44002400
 800b38c:	54002400 	.word	0x54002400

0800b390 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b0ae      	sub	sp, #184	@ 0xb8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b3ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b3be:	4013      	ands	r3, r2
 800b3c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800b3c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d11b      	bne.n	800b404 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3d0:	f003 0320 	and.w	r3, r3, #32
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d015      	beq.n	800b404 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b3dc:	f003 0320 	and.w	r3, r3, #32
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d105      	bne.n	800b3f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d009      	beq.n	800b404 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 82ac 	beq.w	800b952 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	4798      	blx	r3
      }
      return;
 800b402:	e2a6      	b.n	800b952 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 80fd 	beq.w	800b608 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b40e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b412:	4b7a      	ldr	r3, [pc, #488]	@ (800b5fc <HAL_UART_IRQHandler+0x26c>)
 800b414:	4013      	ands	r3, r2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d106      	bne.n	800b428 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b41a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b41e:	4b78      	ldr	r3, [pc, #480]	@ (800b600 <HAL_UART_IRQHandler+0x270>)
 800b420:	4013      	ands	r3, r2
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80f0 	beq.w	800b608 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	2b00      	cmp	r3, #0
 800b432:	d011      	beq.n	800b458 <HAL_UART_IRQHandler+0xc8>
 800b434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00b      	beq.n	800b458 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2201      	movs	r2, #1
 800b446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b44e:	f043 0201 	orr.w	r2, r3, #1
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b00      	cmp	r3, #0
 800b462:	d011      	beq.n	800b488 <HAL_UART_IRQHandler+0xf8>
 800b464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b468:	f003 0301 	and.w	r3, r3, #1
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2202      	movs	r2, #2
 800b476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b47e:	f043 0204 	orr.w	r2, r3, #4
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b488:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b00      	cmp	r3, #0
 800b492:	d011      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x128>
 800b494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b498:	f003 0301 	and.w	r3, r3, #1
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00b      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2204      	movs	r2, #4
 800b4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ae:	f043 0202 	orr.w	r2, r3, #2
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4bc:	f003 0308 	and.w	r3, r3, #8
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d017      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b4c8:	f003 0320 	and.w	r3, r3, #32
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d105      	bne.n	800b4dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b4d4:	4b49      	ldr	r3, [pc, #292]	@ (800b5fc <HAL_UART_IRQHandler+0x26c>)
 800b4d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00b      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ea:	f043 0208 	orr.w	r2, r3, #8
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b4f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d012      	beq.n	800b526 <HAL_UART_IRQHandler+0x196>
 800b500:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b504:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00c      	beq.n	800b526 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b51c:	f043 0220 	orr.w	r2, r3, #32
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 8212 	beq.w	800b956 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b536:	f003 0320 	and.w	r3, r3, #32
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d013      	beq.n	800b566 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b53e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b542:	f003 0320 	and.w	r3, r3, #32
 800b546:	2b00      	cmp	r3, #0
 800b548:	d105      	bne.n	800b556 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b54a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b54e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d007      	beq.n	800b566 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b56c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b57a:	2b40      	cmp	r3, #64	@ 0x40
 800b57c:	d005      	beq.n	800b58a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b57e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b582:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b586:	2b00      	cmp	r3, #0
 800b588:	d02e      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 feb9 	bl	800c302 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b59a:	2b40      	cmp	r3, #64	@ 0x40
 800b59c:	d120      	bne.n	800b5e0 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d017      	beq.n	800b5d8 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5ae:	4a15      	ldr	r2, [pc, #84]	@ (800b604 <HAL_UART_IRQHandler+0x274>)
 800b5b0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7f7 fed3 	bl	8003364 <HAL_DMA_Abort_IT>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d019      	beq.n	800b5f8 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b5d2:	4610      	mov	r0, r2
 800b5d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5d6:	e00f      	b.n	800b5f8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f9db 	bl	800b994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5de:	e00b      	b.n	800b5f8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 f9d7 	bl	800b994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5e6:	e007      	b.n	800b5f8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f9d3 	bl	800b994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b5f6:	e1ae      	b.n	800b956 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5f8:	bf00      	nop
    return;
 800b5fa:	e1ac      	b.n	800b956 <HAL_UART_IRQHandler+0x5c6>
 800b5fc:	10000001 	.word	0x10000001
 800b600:	04000120 	.word	0x04000120
 800b604:	0800c57f 	.word	0x0800c57f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	f040 8142 	bne.w	800b896 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b616:	f003 0310 	and.w	r3, r3, #16
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f000 813b 	beq.w	800b896 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b624:	f003 0310 	and.w	r3, r3, #16
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 8134 	beq.w	800b896 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2210      	movs	r2, #16
 800b634:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b640:	2b40      	cmp	r3, #64	@ 0x40
 800b642:	f040 80aa 	bne.w	800b79a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b650:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800b654:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 8084 	beq.w	800b766 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b664:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b668:	429a      	cmp	r2, r3
 800b66a:	d27c      	bcs.n	800b766 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b672:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b67c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b67e:	2b81      	cmp	r3, #129	@ 0x81
 800b680:	d060      	beq.n	800b744 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b688:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b68a:	e853 3f00 	ldrex	r3, [r3]
 800b68e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b692:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6a8:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b6ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b6b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e2      	bne.n	800b682 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6c6:	e853 3f00 	ldrex	r3, [r3]
 800b6ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b6cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6ce:	f023 0301 	bic.w	r3, r3, #1
 800b6d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3308      	adds	r3, #8
 800b6dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b6e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b6e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b6e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6e8:	e841 2300 	strex	r3, r2, [r1]
 800b6ec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b6ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e3      	bne.n	800b6bc <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b70a:	e853 3f00 	ldrex	r3, [r3]
 800b70e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b712:	f023 0310 	bic.w	r3, r3, #16
 800b716:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b724:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b726:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b728:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b72a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b72c:	e841 2300 	strex	r3, r2, [r1]
 800b730:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1e4      	bne.n	800b702 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b73e:	4618      	mov	r0, r3
 800b740:	f7f7 fd94 	bl	800326c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2202      	movs	r2, #2
 800b748:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b756:	b29b      	uxth	r3, r3
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f922 	bl	800b9a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b764:	e0f9      	b.n	800b95a <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b76c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b770:	429a      	cmp	r2, r3
 800b772:	f040 80f2 	bne.w	800b95a <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b77c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b77e:	2b81      	cmp	r3, #129	@ 0x81
 800b780:	f040 80eb 	bne.w	800b95a <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2202      	movs	r2, #2
 800b788:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f908 	bl	800b9a8 <HAL_UARTEx_RxEventCallback>
      return;
 800b798:	e0df      	b.n	800b95a <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 80d1 	beq.w	800b95e <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800b7bc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 80cc 	beq.w	800b95e <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ce:	e853 3f00 	ldrex	r3, [r3]
 800b7d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b7e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7f0:	e841 2300 	strex	r3, r2, [r1]
 800b7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e4      	bne.n	800b7c6 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3308      	adds	r3, #8
 800b802:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b806:	e853 3f00 	ldrex	r3, [r3]
 800b80a:	623b      	str	r3, [r7, #32]
   return(result);
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b812:	f023 0301 	bic.w	r3, r3, #1
 800b816:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3308      	adds	r3, #8
 800b820:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b824:	633a      	str	r2, [r7, #48]	@ 0x30
 800b826:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b828:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b82a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b82c:	e841 2300 	strex	r3, r2, [r1]
 800b830:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1e1      	bne.n	800b7fc <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2220      	movs	r2, #32
 800b83c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	e853 3f00 	ldrex	r3, [r3]
 800b858:	60fb      	str	r3, [r7, #12]
   return(result);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f023 0310 	bic.w	r3, r3, #16
 800b860:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	461a      	mov	r2, r3
 800b86a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b86e:	61fb      	str	r3, [r7, #28]
 800b870:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b872:	69b9      	ldr	r1, [r7, #24]
 800b874:	69fa      	ldr	r2, [r7, #28]
 800b876:	e841 2300 	strex	r3, r2, [r1]
 800b87a:	617b      	str	r3, [r7, #20]
   return(result);
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1e4      	bne.n	800b84c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2202      	movs	r2, #2
 800b886:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b888:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b88c:	4619      	mov	r1, r3
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f88a 	bl	800b9a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b894:	e063      	b.n	800b95e <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b89a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00e      	beq.n	800b8c0 <HAL_UART_IRQHandler+0x530>
 800b8a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d008      	beq.n	800b8c0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b8b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fe9d 	bl	800c5f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8be:	e051      	b.n	800b964 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b8c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d014      	beq.n	800b8f6 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b8cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b8d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d105      	bne.n	800b8e4 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b8d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d008      	beq.n	800b8f6 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d03a      	beq.n	800b962 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	4798      	blx	r3
    }
    return;
 800b8f4:	e035      	b.n	800b962 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b8f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b8fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d009      	beq.n	800b916 <HAL_UART_IRQHandler+0x586>
 800b902:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d003      	beq.n	800b916 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fe47 	bl	800c5a2 <UART_EndTransmit_IT>
    return;
 800b914:	e026      	b.n	800b964 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b91a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d009      	beq.n	800b936 <HAL_UART_IRQHandler+0x5a6>
 800b922:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b926:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fe76 	bl	800c620 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b934:	e016      	b.n	800b964 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b93a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d010      	beq.n	800b964 <HAL_UART_IRQHandler+0x5d4>
 800b942:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b946:	2b00      	cmp	r3, #0
 800b948:	da0c      	bge.n	800b964 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fe5e 	bl	800c60c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b950:	e008      	b.n	800b964 <HAL_UART_IRQHandler+0x5d4>
      return;
 800b952:	bf00      	nop
 800b954:	e006      	b.n	800b964 <HAL_UART_IRQHandler+0x5d4>
    return;
 800b956:	bf00      	nop
 800b958:	e004      	b.n	800b964 <HAL_UART_IRQHandler+0x5d4>
      return;
 800b95a:	bf00      	nop
 800b95c:	e002      	b.n	800b964 <HAL_UART_IRQHandler+0x5d4>
      return;
 800b95e:	bf00      	nop
 800b960:	e000      	b.n	800b964 <HAL_UART_IRQHandler+0x5d4>
    return;
 800b962:	bf00      	nop
  }
}
 800b964:	37b8      	adds	r7, #184	@ 0xb8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop

0800b96c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b988:	bf00      	nop
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9c4:	b094      	sub	sp, #80	@ 0x50
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	4b83      	ldr	r3, [pc, #524]	@ (800bbe4 <UART_SetConfig+0x224>)
 800b9d6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9da:	689a      	ldr	r2, [r3, #8]
 800b9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	431a      	orrs	r2, r3
 800b9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ea:	69db      	ldr	r3, [r3, #28]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	497c      	ldr	r1, [pc, #496]	@ (800bbe8 <UART_SetConfig+0x228>)
 800b9f8:	4019      	ands	r1, r3
 800b9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba00:	430b      	orrs	r3, r1
 800ba02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ba0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba10:	68d9      	ldr	r1, [r3, #12]
 800ba12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	ea40 0301 	orr.w	r3, r0, r1
 800ba1a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	4b6f      	ldr	r3, [pc, #444]	@ (800bbe4 <UART_SetConfig+0x224>)
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d009      	beq.n	800ba40 <UART_SetConfig+0x80>
 800ba2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	4b6e      	ldr	r3, [pc, #440]	@ (800bbec <UART_SetConfig+0x22c>)
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d004      	beq.n	800ba40 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba38:	6a1a      	ldr	r2, [r3, #32]
 800ba3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ba4a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ba4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba54:	430b      	orrs	r3, r1
 800ba56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba5e:	f023 000f 	bic.w	r0, r3, #15
 800ba62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba64:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ba66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	ea40 0301 	orr.w	r3, r0, r1
 800ba6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	4b5e      	ldr	r3, [pc, #376]	@ (800bbf0 <UART_SetConfig+0x230>)
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d102      	bne.n	800ba80 <UART_SetConfig+0xc0>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba7e:	e032      	b.n	800bae6 <UART_SetConfig+0x126>
 800ba80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	4b5b      	ldr	r3, [pc, #364]	@ (800bbf4 <UART_SetConfig+0x234>)
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d102      	bne.n	800ba90 <UART_SetConfig+0xd0>
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba8e:	e02a      	b.n	800bae6 <UART_SetConfig+0x126>
 800ba90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	4b58      	ldr	r3, [pc, #352]	@ (800bbf8 <UART_SetConfig+0x238>)
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d102      	bne.n	800baa0 <UART_SetConfig+0xe0>
 800ba9a:	2304      	movs	r3, #4
 800ba9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba9e:	e022      	b.n	800bae6 <UART_SetConfig+0x126>
 800baa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	4b55      	ldr	r3, [pc, #340]	@ (800bbfc <UART_SetConfig+0x23c>)
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d102      	bne.n	800bab0 <UART_SetConfig+0xf0>
 800baaa:	2308      	movs	r3, #8
 800baac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800baae:	e01a      	b.n	800bae6 <UART_SetConfig+0x126>
 800bab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	4b52      	ldr	r3, [pc, #328]	@ (800bc00 <UART_SetConfig+0x240>)
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d102      	bne.n	800bac0 <UART_SetConfig+0x100>
 800baba:	2310      	movs	r3, #16
 800babc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800babe:	e012      	b.n	800bae6 <UART_SetConfig+0x126>
 800bac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	4b4f      	ldr	r3, [pc, #316]	@ (800bc04 <UART_SetConfig+0x244>)
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d102      	bne.n	800bad0 <UART_SetConfig+0x110>
 800baca:	2320      	movs	r3, #32
 800bacc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bace:	e00a      	b.n	800bae6 <UART_SetConfig+0x126>
 800bad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	4b43      	ldr	r3, [pc, #268]	@ (800bbe4 <UART_SetConfig+0x224>)
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d103      	bne.n	800bae2 <UART_SetConfig+0x122>
 800bada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bade:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bae0:	e001      	b.n	800bae6 <UART_SetConfig+0x126>
 800bae2:	2300      	movs	r3, #0
 800bae4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	4b3e      	ldr	r3, [pc, #248]	@ (800bbe4 <UART_SetConfig+0x224>)
 800baec:	429a      	cmp	r2, r3
 800baee:	d005      	beq.n	800bafc <UART_SetConfig+0x13c>
 800baf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	4b3d      	ldr	r3, [pc, #244]	@ (800bbec <UART_SetConfig+0x22c>)
 800baf6:	429a      	cmp	r2, r3
 800baf8:	f040 8088 	bne.w	800bc0c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bafc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bafe:	2200      	movs	r2, #0
 800bb00:	623b      	str	r3, [r7, #32]
 800bb02:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bb08:	f7fc f8c0 	bl	8007c8c <HAL_RCCEx_GetPeriphCLKFreq>
 800bb0c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 80eb 	beq.w	800bcec <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb1a:	4a3b      	ldr	r2, [pc, #236]	@ (800bc08 <UART_SetConfig+0x248>)
 800bb1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb20:	461a      	mov	r2, r3
 800bb22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb24:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb28:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	005b      	lsls	r3, r3, #1
 800bb32:	4413      	add	r3, r2
 800bb34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d305      	bcc.n	800bb46 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d903      	bls.n	800bb4e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bb4c:	e048      	b.n	800bbe0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb50:	2200      	movs	r2, #0
 800bb52:	61bb      	str	r3, [r7, #24]
 800bb54:	61fa      	str	r2, [r7, #28]
 800bb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5a:	4a2b      	ldr	r2, [pc, #172]	@ (800bc08 <UART_SetConfig+0x248>)
 800bb5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	2200      	movs	r2, #0
 800bb64:	613b      	str	r3, [r7, #16]
 800bb66:	617a      	str	r2, [r7, #20]
 800bb68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bb6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bb70:	f7f4 ffd8 	bl	8000b24 <__aeabi_uldivmod>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	4610      	mov	r0, r2
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	f04f 0200 	mov.w	r2, #0
 800bb80:	f04f 0300 	mov.w	r3, #0
 800bb84:	020b      	lsls	r3, r1, #8
 800bb86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb8a:	0202      	lsls	r2, r0, #8
 800bb8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb8e:	6849      	ldr	r1, [r1, #4]
 800bb90:	0849      	lsrs	r1, r1, #1
 800bb92:	2000      	movs	r0, #0
 800bb94:	460c      	mov	r4, r1
 800bb96:	4605      	mov	r5, r0
 800bb98:	eb12 0804 	adds.w	r8, r2, r4
 800bb9c:	eb43 0905 	adc.w	r9, r3, r5
 800bba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	60bb      	str	r3, [r7, #8]
 800bba8:	60fa      	str	r2, [r7, #12]
 800bbaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbae:	4640      	mov	r0, r8
 800bbb0:	4649      	mov	r1, r9
 800bbb2:	f7f4 ffb7 	bl	8000b24 <__aeabi_uldivmod>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4613      	mov	r3, r2
 800bbbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bbc4:	d308      	bcc.n	800bbd8 <UART_SetConfig+0x218>
 800bbc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbcc:	d204      	bcs.n	800bbd8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800bbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bbd4:	60da      	str	r2, [r3, #12]
 800bbd6:	e003      	b.n	800bbe0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bbde:	e085      	b.n	800bcec <UART_SetConfig+0x32c>
 800bbe0:	e084      	b.n	800bcec <UART_SetConfig+0x32c>
 800bbe2:	bf00      	nop
 800bbe4:	44002400 	.word	0x44002400
 800bbe8:	cfff69f3 	.word	0xcfff69f3
 800bbec:	54002400 	.word	0x54002400
 800bbf0:	40013800 	.word	0x40013800
 800bbf4:	40004400 	.word	0x40004400
 800bbf8:	40004800 	.word	0x40004800
 800bbfc:	40004c00 	.word	0x40004c00
 800bc00:	40005000 	.word	0x40005000
 800bc04:	40006400 	.word	0x40006400
 800bc08:	0800d8f0 	.word	0x0800d8f0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0e:	69db      	ldr	r3, [r3, #28]
 800bc10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc14:	d13c      	bne.n	800bc90 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bc16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc18:	2200      	movs	r2, #0
 800bc1a:	603b      	str	r3, [r7, #0]
 800bc1c:	607a      	str	r2, [r7, #4]
 800bc1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc22:	f7fc f833 	bl	8007c8c <HAL_RCCEx_GetPeriphCLKFreq>
 800bc26:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d05e      	beq.n	800bcec <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc32:	4a39      	ldr	r2, [pc, #228]	@ (800bd18 <UART_SetConfig+0x358>)
 800bc34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc40:	005a      	lsls	r2, r3, #1
 800bc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	085b      	lsrs	r3, r3, #1
 800bc48:	441a      	add	r2, r3
 800bc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc56:	2b0f      	cmp	r3, #15
 800bc58:	d916      	bls.n	800bc88 <UART_SetConfig+0x2c8>
 800bc5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc60:	d212      	bcs.n	800bc88 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	f023 030f 	bic.w	r3, r3, #15
 800bc6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc6e:	085b      	lsrs	r3, r3, #1
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	f003 0307 	and.w	r3, r3, #7
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800bc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bc84:	60da      	str	r2, [r3, #12]
 800bc86:	e031      	b.n	800bcec <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bc8e:	e02d      	b.n	800bcec <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bc90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc92:	2200      	movs	r2, #0
 800bc94:	469a      	mov	sl, r3
 800bc96:	4693      	mov	fp, r2
 800bc98:	4650      	mov	r0, sl
 800bc9a:	4659      	mov	r1, fp
 800bc9c:	f7fb fff6 	bl	8007c8c <HAL_RCCEx_GetPeriphCLKFreq>
 800bca0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800bca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d021      	beq.n	800bcec <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcac:	4a1a      	ldr	r2, [pc, #104]	@ (800bd18 <UART_SetConfig+0x358>)
 800bcae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800bcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	085b      	lsrs	r3, r3, #1
 800bcc0:	441a      	add	r2, r3
 800bcc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcce:	2b0f      	cmp	r3, #15
 800bcd0:	d909      	bls.n	800bce6 <UART_SetConfig+0x326>
 800bcd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcd8:	d205      	bcs.n	800bce6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bcda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	60da      	str	r2, [r3, #12]
 800bce4:	e002      	b.n	800bcec <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bcec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bcfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcfe:	2200      	movs	r2, #0
 800bd00:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd04:	2200      	movs	r2, #0
 800bd06:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3750      	adds	r7, #80	@ 0x50
 800bd10:	46bd      	mov	sp, r7
 800bd12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd16:	bf00      	nop
 800bd18:	0800d8f0 	.word	0x0800d8f0

0800bd1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd28:	f003 0308 	and.w	r3, r3, #8
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00a      	beq.n	800bd46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	430a      	orrs	r2, r1
 800bd44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd4a:	f003 0301 	and.w	r3, r3, #1
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00a      	beq.n	800bd68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	430a      	orrs	r2, r1
 800bd66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd6c:	f003 0302 	and.w	r3, r3, #2
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00a      	beq.n	800bd8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	430a      	orrs	r2, r1
 800bd88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd8e:	f003 0304 	and.w	r3, r3, #4
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00a      	beq.n	800bdac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb0:	f003 0310 	and.w	r3, r3, #16
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00a      	beq.n	800bdce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd2:	f003 0320 	and.w	r3, r3, #32
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00a      	beq.n	800bdf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	430a      	orrs	r2, r1
 800bdee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d01a      	beq.n	800be32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	430a      	orrs	r2, r1
 800be10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be1a:	d10a      	bne.n	800be32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00a      	beq.n	800be54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	430a      	orrs	r2, r1
 800be52:	605a      	str	r2, [r3, #4]
  }
}
 800be54:	bf00      	nop
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b098      	sub	sp, #96	@ 0x60
 800be64:	af02      	add	r7, sp, #8
 800be66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be70:	f7f6 feb0 	bl	8002bd4 <HAL_GetTick>
 800be74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f003 0308 	and.w	r3, r3, #8
 800be80:	2b08      	cmp	r3, #8
 800be82:	d12f      	bne.n	800bee4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be8c:	2200      	movs	r2, #0
 800be8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f88e 	bl	800bfb4 <UART_WaitOnFlagUntilTimeout>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d022      	beq.n	800bee4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea6:	e853 3f00 	ldrex	r3, [r3]
 800beaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800beac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800beb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	461a      	mov	r2, r3
 800beba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bebc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bebe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bec4:	e841 2300 	strex	r3, r2, [r1]
 800bec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800beca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1e6      	bne.n	800be9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2220      	movs	r2, #32
 800bed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bee0:	2303      	movs	r3, #3
 800bee2:	e063      	b.n	800bfac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 0304 	and.w	r3, r3, #4
 800beee:	2b04      	cmp	r3, #4
 800bef0:	d149      	bne.n	800bf86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bef2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800befa:	2200      	movs	r2, #0
 800befc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f857 	bl	800bfb4 <UART_WaitOnFlagUntilTimeout>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d03c      	beq.n	800bf86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	623b      	str	r3, [r7, #32]
   return(result);
 800bf1a:	6a3b      	ldr	r3, [r7, #32]
 800bf1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf32:	e841 2300 	strex	r3, r2, [r1]
 800bf36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e6      	bne.n	800bf0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3308      	adds	r3, #8
 800bf44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f023 0301 	bic.w	r3, r3, #1
 800bf54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf5e:	61fa      	str	r2, [r7, #28]
 800bf60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf62:	69b9      	ldr	r1, [r7, #24]
 800bf64:	69fa      	ldr	r2, [r7, #28]
 800bf66:	e841 2300 	strex	r3, r2, [r1]
 800bf6a:	617b      	str	r3, [r7, #20]
   return(result);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e5      	bne.n	800bf3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2220      	movs	r2, #32
 800bf76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e012      	b.n	800bfac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2220      	movs	r2, #32
 800bf8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2220      	movs	r2, #32
 800bf92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3758      	adds	r7, #88	@ 0x58
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	603b      	str	r3, [r7, #0]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfc4:	e04f      	b.n	800c066 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfcc:	d04b      	beq.n	800c066 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfce:	f7f6 fe01 	bl	8002bd4 <HAL_GetTick>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d302      	bcc.n	800bfe4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d101      	bne.n	800bfe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	e04e      	b.n	800c086 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 0304 	and.w	r3, r3, #4
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d037      	beq.n	800c066 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2b80      	cmp	r3, #128	@ 0x80
 800bffa:	d034      	beq.n	800c066 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2b40      	cmp	r3, #64	@ 0x40
 800c000:	d031      	beq.n	800c066 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	69db      	ldr	r3, [r3, #28]
 800c008:	f003 0308 	and.w	r3, r3, #8
 800c00c:	2b08      	cmp	r3, #8
 800c00e:	d110      	bne.n	800c032 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2208      	movs	r2, #8
 800c016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f000 f972 	bl	800c302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2208      	movs	r2, #8
 800c022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c02e:	2301      	movs	r3, #1
 800c030:	e029      	b.n	800c086 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	69db      	ldr	r3, [r3, #28]
 800c038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c03c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c040:	d111      	bne.n	800c066 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c04a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f000 f958 	bl	800c302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2220      	movs	r2, #32
 800c056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c062:	2303      	movs	r3, #3
 800c064:	e00f      	b.n	800c086 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	69da      	ldr	r2, [r3, #28]
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4013      	ands	r3, r2
 800c070:	68ba      	ldr	r2, [r7, #8]
 800c072:	429a      	cmp	r2, r3
 800c074:	bf0c      	ite	eq
 800c076:	2301      	moveq	r3, #1
 800c078:	2300      	movne	r3, #0
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	461a      	mov	r2, r3
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	429a      	cmp	r2, r3
 800c082:	d0a0      	beq.n	800bfc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b098      	sub	sp, #96	@ 0x60
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	4613      	mov	r3, r2
 800c09c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800c09e:	88fb      	ldrh	r3, [r7, #6]
 800c0a0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	88fa      	ldrh	r2, [r7, #6]
 800c0ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2222      	movs	r2, #34	@ 0x22
 800c0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d07c      	beq.n	800c1c6 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0d2:	4a68      	ldr	r2, [pc, #416]	@ (800c274 <UART_Start_Receive_DMA+0x1e4>)
 800c0d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0dc:	4a66      	ldr	r2, [pc, #408]	@ (800c278 <UART_Start_Receive_DMA+0x1e8>)
 800c0de:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0e6:	4a65      	ldr	r2, [pc, #404]	@ (800c27c <UART_Start_Receive_DMA+0x1ec>)
 800c0e8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0fc:	d107      	bne.n	800c10e <UART_Start_Receive_DMA+0x7e>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d103      	bne.n	800c10e <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800c106:	88fb      	ldrh	r3, [r7, #6]
 800c108:	005b      	lsls	r3, r3, #1
 800c10a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d034      	beq.n	800c188 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c126:	2b00      	cmp	r3, #0
 800c128:	d02a      	beq.n	800c180 <UART_Start_Receive_DMA+0xf0>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d023      	beq.n	800c180 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c13e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800c146:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c172:	4618      	mov	r0, r3
 800c174:	f7f7 fd66 	bl	8003c44 <HAL_DMAEx_List_Start_IT>
 800c178:	4603      	mov	r3, r0
 800c17a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c17e:	e014      	b.n	800c1aa <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c186:	e010      	b.n	800c1aa <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	3324      	adds	r3, #36	@ 0x24
 800c194:	4619      	mov	r1, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c19a:	461a      	mov	r2, r3
 800c19c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c1a0:	f7f7 f804 	bl	80031ac <HAL_DMA_Start_IT>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800c1aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d009      	beq.n	800c1c6 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2210      	movs	r2, #16
 800c1b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2220      	movs	r2, #32
 800c1be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e051      	b.n	800c26a <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d018      	beq.n	800c200 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1d6:	e853 3f00 	ldrex	r3, [r3]
 800c1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1ee:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c1f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c1f4:	e841 2300 	strex	r3, r2, [r1]
 800c1f8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c1fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1e6      	bne.n	800c1ce <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3308      	adds	r3, #8
 800c206:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c20a:	e853 3f00 	ldrex	r3, [r3]
 800c20e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c212:	f043 0301 	orr.w	r3, r3, #1
 800c216:	657b      	str	r3, [r7, #84]	@ 0x54
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	3308      	adds	r3, #8
 800c21e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c220:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c224:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c226:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c228:	e841 2300 	strex	r3, r2, [r1]
 800c22c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1e5      	bne.n	800c200 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3308      	adds	r3, #8
 800c23a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	e853 3f00 	ldrex	r3, [r3]
 800c242:	617b      	str	r3, [r7, #20]
   return(result);
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c24a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3308      	adds	r3, #8
 800c252:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c254:	627a      	str	r2, [r7, #36]	@ 0x24
 800c256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c258:	6a39      	ldr	r1, [r7, #32]
 800c25a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c25c:	e841 2300 	strex	r3, r2, [r1]
 800c260:	61fb      	str	r3, [r7, #28]
   return(result);
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1e5      	bne.n	800c234 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3760      	adds	r7, #96	@ 0x60
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	0800c3cf 	.word	0x0800c3cf
 800c278:	0800c4c1 	.word	0x0800c4c1
 800c27c:	0800c4ff 	.word	0x0800c4ff

0800c280 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c280:	b480      	push	{r7}
 800c282:	b08f      	sub	sp, #60	@ 0x3c
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28e:	6a3b      	ldr	r3, [r7, #32]
 800c290:	e853 3f00 	ldrex	r3, [r3]
 800c294:	61fb      	str	r3, [r7, #28]
   return(result);
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c29c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2a8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2ae:	e841 2300 	strex	r3, r2, [r1]
 800c2b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d1e6      	bne.n	800c288 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3308      	adds	r3, #8
 800c2c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	e853 3f00 	ldrex	r3, [r3]
 800c2c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c2d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3308      	adds	r3, #8
 800c2d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2da:	61ba      	str	r2, [r7, #24]
 800c2dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2de:	6979      	ldr	r1, [r7, #20]
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	e841 2300 	strex	r3, r2, [r1]
 800c2e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1e5      	bne.n	800c2ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2220      	movs	r2, #32
 800c2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c2f6:	bf00      	nop
 800c2f8:	373c      	adds	r7, #60	@ 0x3c
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr

0800c302 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c302:	b480      	push	{r7}
 800c304:	b095      	sub	sp, #84	@ 0x54
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c312:	e853 3f00 	ldrex	r3, [r3]
 800c316:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c31a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c31e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	461a      	mov	r2, r3
 800c326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c328:	643b      	str	r3, [r7, #64]	@ 0x40
 800c32a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c32e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c330:	e841 2300 	strex	r3, r2, [r1]
 800c334:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1e6      	bne.n	800c30a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	3308      	adds	r3, #8
 800c342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	e853 3f00 	ldrex	r3, [r3]
 800c34a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c352:	f023 0301 	bic.w	r3, r3, #1
 800c356:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3308      	adds	r3, #8
 800c35e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c360:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c362:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e3      	bne.n	800c33c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d118      	bne.n	800c3ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	e853 3f00 	ldrex	r3, [r3]
 800c388:	60bb      	str	r3, [r7, #8]
   return(result);
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f023 0310 	bic.w	r3, r3, #16
 800c390:	647b      	str	r3, [r7, #68]	@ 0x44
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	461a      	mov	r2, r3
 800c398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c39a:	61bb      	str	r3, [r7, #24]
 800c39c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39e:	6979      	ldr	r1, [r7, #20]
 800c3a0:	69ba      	ldr	r2, [r7, #24]
 800c3a2:	e841 2300 	strex	r3, r2, [r1]
 800c3a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1e6      	bne.n	800c37c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2220      	movs	r2, #32
 800c3b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c3c2:	bf00      	nop
 800c3c4:	3754      	adds	r7, #84	@ 0x54
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b096      	sub	sp, #88	@ 0x58
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3da:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3e0:	2b81      	cmp	r3, #129	@ 0x81
 800c3e2:	d057      	beq.n	800c494 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800c3e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c400:	653b      	str	r3, [r7, #80]	@ 0x50
 800c402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c40a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c40c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c412:	e841 2300 	strex	r3, r2, [r1]
 800c416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1e6      	bne.n	800c3ec <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c41e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3308      	adds	r3, #8
 800c424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c428:	e853 3f00 	ldrex	r3, [r3]
 800c42c:	623b      	str	r3, [r7, #32]
   return(result);
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	f023 0301 	bic.w	r3, r3, #1
 800c434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	3308      	adds	r3, #8
 800c43c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c43e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c440:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c446:	e841 2300 	strex	r3, r2, [r1]
 800c44a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1e5      	bne.n	800c41e <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c454:	2220      	movs	r2, #32
 800c456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c45a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c45c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d118      	bne.n	800c494 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	e853 3f00 	ldrex	r3, [r3]
 800c46e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f023 0310 	bic.w	r3, r3, #16
 800c476:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	461a      	mov	r2, r3
 800c47e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c480:	61fb      	str	r3, [r7, #28]
 800c482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c484:	69b9      	ldr	r1, [r7, #24]
 800c486:	69fa      	ldr	r2, [r7, #28]
 800c488:	e841 2300 	strex	r3, r2, [r1]
 800c48c:	617b      	str	r3, [r7, #20]
   return(result);
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e6      	bne.n	800c462 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c496:	2200      	movs	r2, #0
 800c498:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c49a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c49c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d107      	bne.n	800c4b2 <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c4ac:	f7ff fa7c 	bl	800b9a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4b0:	e002      	b.n	800c4b8 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800c4b2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c4b4:	f7f5 fbf8 	bl	8001ca8 <HAL_UART_RxCpltCallback>
}
 800c4b8:	bf00      	nop
 800c4ba:	3758      	adds	r7, #88	@ 0x58
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d109      	bne.n	800c4f0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4e2:	085b      	lsrs	r3, r3, #1
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7ff fa5d 	bl	800b9a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4ee:	e002      	b.n	800c4f6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f7ff fa45 	bl	800b980 <HAL_UART_RxHalfCpltCallback>
}
 800c4f6:	bf00      	nop
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b086      	sub	sp, #24
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c50a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c512:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c51a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c526:	2b80      	cmp	r3, #128	@ 0x80
 800c528:	d109      	bne.n	800c53e <UART_DMAError+0x40>
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	2b21      	cmp	r3, #33	@ 0x21
 800c52e:	d106      	bne.n	800c53e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	2200      	movs	r2, #0
 800c534:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c538:	6978      	ldr	r0, [r7, #20]
 800c53a:	f7ff fea1 	bl	800c280 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c548:	2b40      	cmp	r3, #64	@ 0x40
 800c54a:	d109      	bne.n	800c560 <UART_DMAError+0x62>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b22      	cmp	r3, #34	@ 0x22
 800c550:	d106      	bne.n	800c560 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2200      	movs	r2, #0
 800c556:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c55a:	6978      	ldr	r0, [r7, #20]
 800c55c:	f7ff fed1 	bl	800c302 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c566:	f043 0210 	orr.w	r2, r3, #16
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c570:	6978      	ldr	r0, [r7, #20]
 800c572:	f7ff fa0f 	bl	800b994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c576:	bf00      	nop
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b084      	sub	sp, #16
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c58a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f7ff f9fd 	bl	800b994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c59a:	bf00      	nop
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b088      	sub	sp, #32
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	e853 3f00 	ldrex	r3, [r3]
 800c5b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5be:	61fb      	str	r3, [r7, #28]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	61bb      	str	r3, [r7, #24]
 800c5ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5cc:	6979      	ldr	r1, [r7, #20]
 800c5ce:	69ba      	ldr	r2, [r7, #24]
 800c5d0:	e841 2300 	strex	r3, r2, [r1]
 800c5d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1e6      	bne.n	800c5aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7ff f9be 	bl	800b96c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5f0:	bf00      	nop
 800c5f2:	3720      	adds	r7, #32
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c614:	bf00      	nop
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c628:	bf00      	nop
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c642:	2b01      	cmp	r3, #1
 800c644:	d101      	bne.n	800c64a <HAL_UARTEx_DisableFifoMode+0x16>
 800c646:	2302      	movs	r3, #2
 800c648:	e027      	b.n	800c69a <HAL_UARTEx_DisableFifoMode+0x66>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2201      	movs	r2, #1
 800c64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2224      	movs	r2, #36	@ 0x24
 800c656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f022 0201 	bic.w	r2, r2, #1
 800c670:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c678:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2220      	movs	r2, #32
 800c68c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3714      	adds	r7, #20
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b084      	sub	sp, #16
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d101      	bne.n	800c6be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	e02d      	b.n	800c71a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2224      	movs	r2, #36	@ 0x24
 800c6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f022 0201 	bic.w	r2, r2, #1
 800c6e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	430a      	orrs	r2, r1
 800c6f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f850 	bl	800c7a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2220      	movs	r2, #32
 800c70c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c732:	2b01      	cmp	r3, #1
 800c734:	d101      	bne.n	800c73a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c736:	2302      	movs	r3, #2
 800c738:	e02d      	b.n	800c796 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2224      	movs	r2, #36	@ 0x24
 800c746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f022 0201 	bic.w	r2, r2, #1
 800c760:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	430a      	orrs	r2, r1
 800c774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f812 	bl	800c7a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2220      	movs	r2, #32
 800c788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
	...

0800c7a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d108      	bne.n	800c7c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c7c0:	e031      	b.n	800c826 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c7c2:	2308      	movs	r3, #8
 800c7c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c7c6:	2308      	movs	r3, #8
 800c7c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	0e5b      	lsrs	r3, r3, #25
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	f003 0307 	and.w	r3, r3, #7
 800c7d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	0f5b      	lsrs	r3, r3, #29
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 0307 	and.w	r3, r3, #7
 800c7e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7ea:	7bbb      	ldrb	r3, [r7, #14]
 800c7ec:	7b3a      	ldrb	r2, [r7, #12]
 800c7ee:	4911      	ldr	r1, [pc, #68]	@ (800c834 <UARTEx_SetNbDataToProcess+0x94>)
 800c7f0:	5c8a      	ldrb	r2, [r1, r2]
 800c7f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c7f6:	7b3a      	ldrb	r2, [r7, #12]
 800c7f8:	490f      	ldr	r1, [pc, #60]	@ (800c838 <UARTEx_SetNbDataToProcess+0x98>)
 800c7fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c800:	b29a      	uxth	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c808:	7bfb      	ldrb	r3, [r7, #15]
 800c80a:	7b7a      	ldrb	r2, [r7, #13]
 800c80c:	4909      	ldr	r1, [pc, #36]	@ (800c834 <UARTEx_SetNbDataToProcess+0x94>)
 800c80e:	5c8a      	ldrb	r2, [r1, r2]
 800c810:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c814:	7b7a      	ldrb	r2, [r7, #13]
 800c816:	4908      	ldr	r1, [pc, #32]	@ (800c838 <UARTEx_SetNbDataToProcess+0x98>)
 800c818:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c81a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c81e:	b29a      	uxth	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c826:	bf00      	nop
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	0800d908 	.word	0x0800d908
 800c838:	0800d910 	.word	0x0800d910

0800c83c <std>:
 800c83c:	2300      	movs	r3, #0
 800c83e:	b510      	push	{r4, lr}
 800c840:	4604      	mov	r4, r0
 800c842:	6083      	str	r3, [r0, #8]
 800c844:	8181      	strh	r1, [r0, #12]
 800c846:	4619      	mov	r1, r3
 800c848:	6643      	str	r3, [r0, #100]	@ 0x64
 800c84a:	81c2      	strh	r2, [r0, #14]
 800c84c:	2208      	movs	r2, #8
 800c84e:	6183      	str	r3, [r0, #24]
 800c850:	e9c0 3300 	strd	r3, r3, [r0]
 800c854:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c858:	305c      	adds	r0, #92	@ 0x5c
 800c85a:	f000 f9f9 	bl	800cc50 <memset>
 800c85e:	4b0d      	ldr	r3, [pc, #52]	@ (800c894 <std+0x58>)
 800c860:	6224      	str	r4, [r4, #32]
 800c862:	6263      	str	r3, [r4, #36]	@ 0x24
 800c864:	4b0c      	ldr	r3, [pc, #48]	@ (800c898 <std+0x5c>)
 800c866:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c868:	4b0c      	ldr	r3, [pc, #48]	@ (800c89c <std+0x60>)
 800c86a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c86c:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a0 <std+0x64>)
 800c86e:	6323      	str	r3, [r4, #48]	@ 0x30
 800c870:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a4 <std+0x68>)
 800c872:	429c      	cmp	r4, r3
 800c874:	d006      	beq.n	800c884 <std+0x48>
 800c876:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c87a:	4294      	cmp	r4, r2
 800c87c:	d002      	beq.n	800c884 <std+0x48>
 800c87e:	33d0      	adds	r3, #208	@ 0xd0
 800c880:	429c      	cmp	r4, r3
 800c882:	d105      	bne.n	800c890 <std+0x54>
 800c884:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c88c:	f000 ba58 	b.w	800cd40 <__retarget_lock_init_recursive>
 800c890:	bd10      	pop	{r4, pc}
 800c892:	bf00      	nop
 800c894:	0800caa1 	.word	0x0800caa1
 800c898:	0800cac3 	.word	0x0800cac3
 800c89c:	0800cafb 	.word	0x0800cafb
 800c8a0:	0800cb1f 	.word	0x0800cb1f
 800c8a4:	200005a4 	.word	0x200005a4

0800c8a8 <stdio_exit_handler>:
 800c8a8:	4a02      	ldr	r2, [pc, #8]	@ (800c8b4 <stdio_exit_handler+0xc>)
 800c8aa:	4903      	ldr	r1, [pc, #12]	@ (800c8b8 <stdio_exit_handler+0x10>)
 800c8ac:	4803      	ldr	r0, [pc, #12]	@ (800c8bc <stdio_exit_handler+0x14>)
 800c8ae:	f000 b869 	b.w	800c984 <_fwalk_sglue>
 800c8b2:	bf00      	nop
 800c8b4:	20000090 	.word	0x20000090
 800c8b8:	0800d5e9 	.word	0x0800d5e9
 800c8bc:	200000a0 	.word	0x200000a0

0800c8c0 <cleanup_stdio>:
 800c8c0:	6841      	ldr	r1, [r0, #4]
 800c8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f4 <cleanup_stdio+0x34>)
 800c8c4:	4299      	cmp	r1, r3
 800c8c6:	b510      	push	{r4, lr}
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	d001      	beq.n	800c8d0 <cleanup_stdio+0x10>
 800c8cc:	f000 fe8c 	bl	800d5e8 <_fflush_r>
 800c8d0:	68a1      	ldr	r1, [r4, #8]
 800c8d2:	4b09      	ldr	r3, [pc, #36]	@ (800c8f8 <cleanup_stdio+0x38>)
 800c8d4:	4299      	cmp	r1, r3
 800c8d6:	d002      	beq.n	800c8de <cleanup_stdio+0x1e>
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fe85 	bl	800d5e8 <_fflush_r>
 800c8de:	68e1      	ldr	r1, [r4, #12]
 800c8e0:	4b06      	ldr	r3, [pc, #24]	@ (800c8fc <cleanup_stdio+0x3c>)
 800c8e2:	4299      	cmp	r1, r3
 800c8e4:	d004      	beq.n	800c8f0 <cleanup_stdio+0x30>
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8ec:	f000 be7c 	b.w	800d5e8 <_fflush_r>
 800c8f0:	bd10      	pop	{r4, pc}
 800c8f2:	bf00      	nop
 800c8f4:	200005a4 	.word	0x200005a4
 800c8f8:	2000060c 	.word	0x2000060c
 800c8fc:	20000674 	.word	0x20000674

0800c900 <global_stdio_init.part.0>:
 800c900:	b510      	push	{r4, lr}
 800c902:	4b0b      	ldr	r3, [pc, #44]	@ (800c930 <global_stdio_init.part.0+0x30>)
 800c904:	2104      	movs	r1, #4
 800c906:	4c0b      	ldr	r4, [pc, #44]	@ (800c934 <global_stdio_init.part.0+0x34>)
 800c908:	4a0b      	ldr	r2, [pc, #44]	@ (800c938 <global_stdio_init.part.0+0x38>)
 800c90a:	4620      	mov	r0, r4
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	2200      	movs	r2, #0
 800c910:	f7ff ff94 	bl	800c83c <std>
 800c914:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c918:	2201      	movs	r2, #1
 800c91a:	2109      	movs	r1, #9
 800c91c:	f7ff ff8e 	bl	800c83c <std>
 800c920:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c924:	2202      	movs	r2, #2
 800c926:	2112      	movs	r1, #18
 800c928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c92c:	f7ff bf86 	b.w	800c83c <std>
 800c930:	200006dc 	.word	0x200006dc
 800c934:	200005a4 	.word	0x200005a4
 800c938:	0800c8a9 	.word	0x0800c8a9

0800c93c <__sfp_lock_acquire>:
 800c93c:	4801      	ldr	r0, [pc, #4]	@ (800c944 <__sfp_lock_acquire+0x8>)
 800c93e:	f000 ba00 	b.w	800cd42 <__retarget_lock_acquire_recursive>
 800c942:	bf00      	nop
 800c944:	200006e5 	.word	0x200006e5

0800c948 <__sfp_lock_release>:
 800c948:	4801      	ldr	r0, [pc, #4]	@ (800c950 <__sfp_lock_release+0x8>)
 800c94a:	f000 b9fb 	b.w	800cd44 <__retarget_lock_release_recursive>
 800c94e:	bf00      	nop
 800c950:	200006e5 	.word	0x200006e5

0800c954 <__sinit>:
 800c954:	b510      	push	{r4, lr}
 800c956:	4604      	mov	r4, r0
 800c958:	f7ff fff0 	bl	800c93c <__sfp_lock_acquire>
 800c95c:	6a23      	ldr	r3, [r4, #32]
 800c95e:	b11b      	cbz	r3, 800c968 <__sinit+0x14>
 800c960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c964:	f7ff bff0 	b.w	800c948 <__sfp_lock_release>
 800c968:	4b04      	ldr	r3, [pc, #16]	@ (800c97c <__sinit+0x28>)
 800c96a:	6223      	str	r3, [r4, #32]
 800c96c:	4b04      	ldr	r3, [pc, #16]	@ (800c980 <__sinit+0x2c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1f5      	bne.n	800c960 <__sinit+0xc>
 800c974:	f7ff ffc4 	bl	800c900 <global_stdio_init.part.0>
 800c978:	e7f2      	b.n	800c960 <__sinit+0xc>
 800c97a:	bf00      	nop
 800c97c:	0800c8c1 	.word	0x0800c8c1
 800c980:	200006dc 	.word	0x200006dc

0800c984 <_fwalk_sglue>:
 800c984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c988:	4607      	mov	r7, r0
 800c98a:	4688      	mov	r8, r1
 800c98c:	4614      	mov	r4, r2
 800c98e:	2600      	movs	r6, #0
 800c990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c994:	f1b9 0901 	subs.w	r9, r9, #1
 800c998:	d505      	bpl.n	800c9a6 <_fwalk_sglue+0x22>
 800c99a:	6824      	ldr	r4, [r4, #0]
 800c99c:	2c00      	cmp	r4, #0
 800c99e:	d1f7      	bne.n	800c990 <_fwalk_sglue+0xc>
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a6:	89ab      	ldrh	r3, [r5, #12]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d907      	bls.n	800c9bc <_fwalk_sglue+0x38>
 800c9ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	d003      	beq.n	800c9bc <_fwalk_sglue+0x38>
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	47c0      	blx	r8
 800c9ba:	4306      	orrs	r6, r0
 800c9bc:	3568      	adds	r5, #104	@ 0x68
 800c9be:	e7e9      	b.n	800c994 <_fwalk_sglue+0x10>

0800c9c0 <iprintf>:
 800c9c0:	b40f      	push	{r0, r1, r2, r3}
 800c9c2:	b507      	push	{r0, r1, r2, lr}
 800c9c4:	4906      	ldr	r1, [pc, #24]	@ (800c9e0 <iprintf+0x20>)
 800c9c6:	ab04      	add	r3, sp, #16
 800c9c8:	6808      	ldr	r0, [r1, #0]
 800c9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ce:	6881      	ldr	r1, [r0, #8]
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	f000 fadb 	bl	800cf8c <_vfiprintf_r>
 800c9d6:	b003      	add	sp, #12
 800c9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9dc:	b004      	add	sp, #16
 800c9de:	4770      	bx	lr
 800c9e0:	2000009c 	.word	0x2000009c

0800c9e4 <_puts_r>:
 800c9e4:	6a03      	ldr	r3, [r0, #32]
 800c9e6:	b570      	push	{r4, r5, r6, lr}
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	460e      	mov	r6, r1
 800c9ec:	6884      	ldr	r4, [r0, #8]
 800c9ee:	b90b      	cbnz	r3, 800c9f4 <_puts_r+0x10>
 800c9f0:	f7ff ffb0 	bl	800c954 <__sinit>
 800c9f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9f6:	07db      	lsls	r3, r3, #31
 800c9f8:	d405      	bmi.n	800ca06 <_puts_r+0x22>
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	0598      	lsls	r0, r3, #22
 800c9fe:	d402      	bmi.n	800ca06 <_puts_r+0x22>
 800ca00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca02:	f000 f99e 	bl	800cd42 <__retarget_lock_acquire_recursive>
 800ca06:	89a3      	ldrh	r3, [r4, #12]
 800ca08:	0719      	lsls	r1, r3, #28
 800ca0a:	d502      	bpl.n	800ca12 <_puts_r+0x2e>
 800ca0c:	6923      	ldr	r3, [r4, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d135      	bne.n	800ca7e <_puts_r+0x9a>
 800ca12:	4621      	mov	r1, r4
 800ca14:	4628      	mov	r0, r5
 800ca16:	f000 f8c5 	bl	800cba4 <__swsetup_r>
 800ca1a:	b380      	cbz	r0, 800ca7e <_puts_r+0x9a>
 800ca1c:	f04f 35ff 	mov.w	r5, #4294967295
 800ca20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca22:	07da      	lsls	r2, r3, #31
 800ca24:	d405      	bmi.n	800ca32 <_puts_r+0x4e>
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	059b      	lsls	r3, r3, #22
 800ca2a:	d402      	bmi.n	800ca32 <_puts_r+0x4e>
 800ca2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca2e:	f000 f989 	bl	800cd44 <__retarget_lock_release_recursive>
 800ca32:	4628      	mov	r0, r5
 800ca34:	bd70      	pop	{r4, r5, r6, pc}
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	da04      	bge.n	800ca44 <_puts_r+0x60>
 800ca3a:	69a2      	ldr	r2, [r4, #24]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	dc17      	bgt.n	800ca70 <_puts_r+0x8c>
 800ca40:	290a      	cmp	r1, #10
 800ca42:	d015      	beq.n	800ca70 <_puts_r+0x8c>
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	1c5a      	adds	r2, r3, #1
 800ca48:	6022      	str	r2, [r4, #0]
 800ca4a:	7019      	strb	r1, [r3, #0]
 800ca4c:	68a3      	ldr	r3, [r4, #8]
 800ca4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca52:	3b01      	subs	r3, #1
 800ca54:	60a3      	str	r3, [r4, #8]
 800ca56:	2900      	cmp	r1, #0
 800ca58:	d1ed      	bne.n	800ca36 <_puts_r+0x52>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	da11      	bge.n	800ca82 <_puts_r+0x9e>
 800ca5e:	4622      	mov	r2, r4
 800ca60:	210a      	movs	r1, #10
 800ca62:	4628      	mov	r0, r5
 800ca64:	f000 f85f 	bl	800cb26 <__swbuf_r>
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d0d7      	beq.n	800ca1c <_puts_r+0x38>
 800ca6c:	250a      	movs	r5, #10
 800ca6e:	e7d7      	b.n	800ca20 <_puts_r+0x3c>
 800ca70:	4622      	mov	r2, r4
 800ca72:	4628      	mov	r0, r5
 800ca74:	f000 f857 	bl	800cb26 <__swbuf_r>
 800ca78:	3001      	adds	r0, #1
 800ca7a:	d1e7      	bne.n	800ca4c <_puts_r+0x68>
 800ca7c:	e7ce      	b.n	800ca1c <_puts_r+0x38>
 800ca7e:	3e01      	subs	r6, #1
 800ca80:	e7e4      	b.n	800ca4c <_puts_r+0x68>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	1c5a      	adds	r2, r3, #1
 800ca86:	6022      	str	r2, [r4, #0]
 800ca88:	220a      	movs	r2, #10
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	e7ee      	b.n	800ca6c <_puts_r+0x88>
	...

0800ca90 <puts>:
 800ca90:	4b02      	ldr	r3, [pc, #8]	@ (800ca9c <puts+0xc>)
 800ca92:	4601      	mov	r1, r0
 800ca94:	6818      	ldr	r0, [r3, #0]
 800ca96:	f7ff bfa5 	b.w	800c9e4 <_puts_r>
 800ca9a:	bf00      	nop
 800ca9c:	2000009c 	.word	0x2000009c

0800caa0 <__sread>:
 800caa0:	b510      	push	{r4, lr}
 800caa2:	460c      	mov	r4, r1
 800caa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa8:	f000 f8fc 	bl	800cca4 <_read_r>
 800caac:	2800      	cmp	r0, #0
 800caae:	bfab      	itete	ge
 800cab0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cab2:	89a3      	ldrhlt	r3, [r4, #12]
 800cab4:	181b      	addge	r3, r3, r0
 800cab6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800caba:	bfac      	ite	ge
 800cabc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cabe:	81a3      	strhlt	r3, [r4, #12]
 800cac0:	bd10      	pop	{r4, pc}

0800cac2 <__swrite>:
 800cac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac6:	461f      	mov	r7, r3
 800cac8:	898b      	ldrh	r3, [r1, #12]
 800caca:	4605      	mov	r5, r0
 800cacc:	460c      	mov	r4, r1
 800cace:	05db      	lsls	r3, r3, #23
 800cad0:	4616      	mov	r6, r2
 800cad2:	d505      	bpl.n	800cae0 <__swrite+0x1e>
 800cad4:	2302      	movs	r3, #2
 800cad6:	2200      	movs	r2, #0
 800cad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cadc:	f000 f8d0 	bl	800cc80 <_lseek_r>
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	4632      	mov	r2, r6
 800cae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cae8:	4628      	mov	r0, r5
 800caea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800caee:	81a3      	strh	r3, [r4, #12]
 800caf0:	463b      	mov	r3, r7
 800caf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caf6:	f000 b8e7 	b.w	800ccc8 <_write_r>

0800cafa <__sseek>:
 800cafa:	b510      	push	{r4, lr}
 800cafc:	460c      	mov	r4, r1
 800cafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb02:	f000 f8bd 	bl	800cc80 <_lseek_r>
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	89a3      	ldrh	r3, [r4, #12]
 800cb0a:	bf15      	itete	ne
 800cb0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cb0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cb12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cb16:	81a3      	strheq	r3, [r4, #12]
 800cb18:	bf18      	it	ne
 800cb1a:	81a3      	strhne	r3, [r4, #12]
 800cb1c:	bd10      	pop	{r4, pc}

0800cb1e <__sclose>:
 800cb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb22:	f000 b89d 	b.w	800cc60 <_close_r>

0800cb26 <__swbuf_r>:
 800cb26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb28:	460e      	mov	r6, r1
 800cb2a:	4614      	mov	r4, r2
 800cb2c:	4605      	mov	r5, r0
 800cb2e:	b118      	cbz	r0, 800cb38 <__swbuf_r+0x12>
 800cb30:	6a03      	ldr	r3, [r0, #32]
 800cb32:	b90b      	cbnz	r3, 800cb38 <__swbuf_r+0x12>
 800cb34:	f7ff ff0e 	bl	800c954 <__sinit>
 800cb38:	69a3      	ldr	r3, [r4, #24]
 800cb3a:	60a3      	str	r3, [r4, #8]
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	071a      	lsls	r2, r3, #28
 800cb40:	d501      	bpl.n	800cb46 <__swbuf_r+0x20>
 800cb42:	6923      	ldr	r3, [r4, #16]
 800cb44:	b943      	cbnz	r3, 800cb58 <__swbuf_r+0x32>
 800cb46:	4621      	mov	r1, r4
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f000 f82b 	bl	800cba4 <__swsetup_r>
 800cb4e:	b118      	cbz	r0, 800cb58 <__swbuf_r+0x32>
 800cb50:	f04f 37ff 	mov.w	r7, #4294967295
 800cb54:	4638      	mov	r0, r7
 800cb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	b2f6      	uxtb	r6, r6
 800cb5c:	6922      	ldr	r2, [r4, #16]
 800cb5e:	4637      	mov	r7, r6
 800cb60:	1a98      	subs	r0, r3, r2
 800cb62:	6963      	ldr	r3, [r4, #20]
 800cb64:	4283      	cmp	r3, r0
 800cb66:	dc05      	bgt.n	800cb74 <__swbuf_r+0x4e>
 800cb68:	4621      	mov	r1, r4
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f000 fd3c 	bl	800d5e8 <_fflush_r>
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d1ed      	bne.n	800cb50 <__swbuf_r+0x2a>
 800cb74:	68a3      	ldr	r3, [r4, #8]
 800cb76:	3b01      	subs	r3, #1
 800cb78:	60a3      	str	r3, [r4, #8]
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	1c5a      	adds	r2, r3, #1
 800cb7e:	6022      	str	r2, [r4, #0]
 800cb80:	701e      	strb	r6, [r3, #0]
 800cb82:	1c43      	adds	r3, r0, #1
 800cb84:	6962      	ldr	r2, [r4, #20]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d004      	beq.n	800cb94 <__swbuf_r+0x6e>
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	07db      	lsls	r3, r3, #31
 800cb8e:	d5e1      	bpl.n	800cb54 <__swbuf_r+0x2e>
 800cb90:	2e0a      	cmp	r6, #10
 800cb92:	d1df      	bne.n	800cb54 <__swbuf_r+0x2e>
 800cb94:	4621      	mov	r1, r4
 800cb96:	4628      	mov	r0, r5
 800cb98:	f000 fd26 	bl	800d5e8 <_fflush_r>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d0d9      	beq.n	800cb54 <__swbuf_r+0x2e>
 800cba0:	e7d6      	b.n	800cb50 <__swbuf_r+0x2a>
	...

0800cba4 <__swsetup_r>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4b29      	ldr	r3, [pc, #164]	@ (800cc4c <__swsetup_r+0xa8>)
 800cba8:	4605      	mov	r5, r0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	6818      	ldr	r0, [r3, #0]
 800cbae:	b118      	cbz	r0, 800cbb8 <__swsetup_r+0x14>
 800cbb0:	6a03      	ldr	r3, [r0, #32]
 800cbb2:	b90b      	cbnz	r3, 800cbb8 <__swsetup_r+0x14>
 800cbb4:	f7ff fece 	bl	800c954 <__sinit>
 800cbb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbbc:	0719      	lsls	r1, r3, #28
 800cbbe:	d422      	bmi.n	800cc06 <__swsetup_r+0x62>
 800cbc0:	06da      	lsls	r2, r3, #27
 800cbc2:	d407      	bmi.n	800cbd4 <__swsetup_r+0x30>
 800cbc4:	2209      	movs	r2, #9
 800cbc6:	602a      	str	r2, [r5, #0]
 800cbc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd0:	81a3      	strh	r3, [r4, #12]
 800cbd2:	e033      	b.n	800cc3c <__swsetup_r+0x98>
 800cbd4:	0758      	lsls	r0, r3, #29
 800cbd6:	d512      	bpl.n	800cbfe <__swsetup_r+0x5a>
 800cbd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbda:	b141      	cbz	r1, 800cbee <__swsetup_r+0x4a>
 800cbdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbe0:	4299      	cmp	r1, r3
 800cbe2:	d002      	beq.n	800cbea <__swsetup_r+0x46>
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	f000 f8af 	bl	800cd48 <_free_r>
 800cbea:	2300      	movs	r3, #0
 800cbec:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	6063      	str	r3, [r4, #4]
 800cbfa:	6923      	ldr	r3, [r4, #16]
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	f043 0308 	orr.w	r3, r3, #8
 800cc04:	81a3      	strh	r3, [r4, #12]
 800cc06:	6923      	ldr	r3, [r4, #16]
 800cc08:	b94b      	cbnz	r3, 800cc1e <__swsetup_r+0x7a>
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc14:	d003      	beq.n	800cc1e <__swsetup_r+0x7a>
 800cc16:	4621      	mov	r1, r4
 800cc18:	4628      	mov	r0, r5
 800cc1a:	f000 fd32 	bl	800d682 <__smakebuf_r>
 800cc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc22:	f013 0201 	ands.w	r2, r3, #1
 800cc26:	d00a      	beq.n	800cc3e <__swsetup_r+0x9a>
 800cc28:	2200      	movs	r2, #0
 800cc2a:	60a2      	str	r2, [r4, #8]
 800cc2c:	6962      	ldr	r2, [r4, #20]
 800cc2e:	4252      	negs	r2, r2
 800cc30:	61a2      	str	r2, [r4, #24]
 800cc32:	6922      	ldr	r2, [r4, #16]
 800cc34:	b942      	cbnz	r2, 800cc48 <__swsetup_r+0xa4>
 800cc36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc3a:	d1c5      	bne.n	800cbc8 <__swsetup_r+0x24>
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
 800cc3e:	0799      	lsls	r1, r3, #30
 800cc40:	bf58      	it	pl
 800cc42:	6962      	ldrpl	r2, [r4, #20]
 800cc44:	60a2      	str	r2, [r4, #8]
 800cc46:	e7f4      	b.n	800cc32 <__swsetup_r+0x8e>
 800cc48:	2000      	movs	r0, #0
 800cc4a:	e7f7      	b.n	800cc3c <__swsetup_r+0x98>
 800cc4c:	2000009c 	.word	0x2000009c

0800cc50 <memset>:
 800cc50:	4402      	add	r2, r0
 800cc52:	4603      	mov	r3, r0
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d100      	bne.n	800cc5a <memset+0xa>
 800cc58:	4770      	bx	lr
 800cc5a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc5e:	e7f9      	b.n	800cc54 <memset+0x4>

0800cc60 <_close_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	2300      	movs	r3, #0
 800cc64:	4d05      	ldr	r5, [pc, #20]	@ (800cc7c <_close_r+0x1c>)
 800cc66:	4604      	mov	r4, r0
 800cc68:	4608      	mov	r0, r1
 800cc6a:	602b      	str	r3, [r5, #0]
 800cc6c:	f7f5 fa1f 	bl	80020ae <_close>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d102      	bne.n	800cc7a <_close_r+0x1a>
 800cc74:	682b      	ldr	r3, [r5, #0]
 800cc76:	b103      	cbz	r3, 800cc7a <_close_r+0x1a>
 800cc78:	6023      	str	r3, [r4, #0]
 800cc7a:	bd38      	pop	{r3, r4, r5, pc}
 800cc7c:	200006e0 	.word	0x200006e0

0800cc80 <_lseek_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4604      	mov	r4, r0
 800cc84:	4d06      	ldr	r5, [pc, #24]	@ (800cca0 <_lseek_r+0x20>)
 800cc86:	4608      	mov	r0, r1
 800cc88:	4611      	mov	r1, r2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	602a      	str	r2, [r5, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f7f5 fa34 	bl	80020fc <_lseek>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_lseek_r+0x1e>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_lseek_r+0x1e>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	200006e0 	.word	0x200006e0

0800cca4 <_read_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4604      	mov	r4, r0
 800cca8:	4d06      	ldr	r5, [pc, #24]	@ (800ccc4 <_read_r+0x20>)
 800ccaa:	4608      	mov	r0, r1
 800ccac:	4611      	mov	r1, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	602a      	str	r2, [r5, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	f7f5 f9c2 	bl	800203c <_read>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	d102      	bne.n	800ccc2 <_read_r+0x1e>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	b103      	cbz	r3, 800ccc2 <_read_r+0x1e>
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	bd38      	pop	{r3, r4, r5, pc}
 800ccc4:	200006e0 	.word	0x200006e0

0800ccc8 <_write_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4604      	mov	r4, r0
 800cccc:	4d06      	ldr	r5, [pc, #24]	@ (800cce8 <_write_r+0x20>)
 800ccce:	4608      	mov	r0, r1
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	602a      	str	r2, [r5, #0]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f7f5 f9cd 	bl	8002076 <_write>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_write_r+0x1e>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_write_r+0x1e>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	200006e0 	.word	0x200006e0

0800ccec <__errno>:
 800ccec:	4b01      	ldr	r3, [pc, #4]	@ (800ccf4 <__errno+0x8>)
 800ccee:	6818      	ldr	r0, [r3, #0]
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	2000009c 	.word	0x2000009c

0800ccf8 <__libc_init_array>:
 800ccf8:	b570      	push	{r4, r5, r6, lr}
 800ccfa:	4d0d      	ldr	r5, [pc, #52]	@ (800cd30 <__libc_init_array+0x38>)
 800ccfc:	2600      	movs	r6, #0
 800ccfe:	4c0d      	ldr	r4, [pc, #52]	@ (800cd34 <__libc_init_array+0x3c>)
 800cd00:	1b64      	subs	r4, r4, r5
 800cd02:	10a4      	asrs	r4, r4, #2
 800cd04:	42a6      	cmp	r6, r4
 800cd06:	d109      	bne.n	800cd1c <__libc_init_array+0x24>
 800cd08:	4d0b      	ldr	r5, [pc, #44]	@ (800cd38 <__libc_init_array+0x40>)
 800cd0a:	2600      	movs	r6, #0
 800cd0c:	4c0b      	ldr	r4, [pc, #44]	@ (800cd3c <__libc_init_array+0x44>)
 800cd0e:	f000 fd35 	bl	800d77c <_init>
 800cd12:	1b64      	subs	r4, r4, r5
 800cd14:	10a4      	asrs	r4, r4, #2
 800cd16:	42a6      	cmp	r6, r4
 800cd18:	d105      	bne.n	800cd26 <__libc_init_array+0x2e>
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd20:	3601      	adds	r6, #1
 800cd22:	4798      	blx	r3
 800cd24:	e7ee      	b.n	800cd04 <__libc_init_array+0xc>
 800cd26:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd2a:	3601      	adds	r6, #1
 800cd2c:	4798      	blx	r3
 800cd2e:	e7f2      	b.n	800cd16 <__libc_init_array+0x1e>
 800cd30:	0800d954 	.word	0x0800d954
 800cd34:	0800d954 	.word	0x0800d954
 800cd38:	0800d954 	.word	0x0800d954
 800cd3c:	0800d958 	.word	0x0800d958

0800cd40 <__retarget_lock_init_recursive>:
 800cd40:	4770      	bx	lr

0800cd42 <__retarget_lock_acquire_recursive>:
 800cd42:	4770      	bx	lr

0800cd44 <__retarget_lock_release_recursive>:
 800cd44:	4770      	bx	lr
	...

0800cd48 <_free_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4605      	mov	r5, r0
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	d041      	beq.n	800cdd4 <_free_r+0x8c>
 800cd50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd54:	1f0c      	subs	r4, r1, #4
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	bfb8      	it	lt
 800cd5a:	18e4      	addlt	r4, r4, r3
 800cd5c:	f000 f8e0 	bl	800cf20 <__malloc_lock>
 800cd60:	4a1d      	ldr	r2, [pc, #116]	@ (800cdd8 <_free_r+0x90>)
 800cd62:	6813      	ldr	r3, [r2, #0]
 800cd64:	b933      	cbnz	r3, 800cd74 <_free_r+0x2c>
 800cd66:	6063      	str	r3, [r4, #4]
 800cd68:	6014      	str	r4, [r2, #0]
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd70:	f000 b8dc 	b.w	800cf2c <__malloc_unlock>
 800cd74:	42a3      	cmp	r3, r4
 800cd76:	d908      	bls.n	800cd8a <_free_r+0x42>
 800cd78:	6820      	ldr	r0, [r4, #0]
 800cd7a:	1821      	adds	r1, r4, r0
 800cd7c:	428b      	cmp	r3, r1
 800cd7e:	bf01      	itttt	eq
 800cd80:	6819      	ldreq	r1, [r3, #0]
 800cd82:	685b      	ldreq	r3, [r3, #4]
 800cd84:	1809      	addeq	r1, r1, r0
 800cd86:	6021      	streq	r1, [r4, #0]
 800cd88:	e7ed      	b.n	800cd66 <_free_r+0x1e>
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	b10b      	cbz	r3, 800cd94 <_free_r+0x4c>
 800cd90:	42a3      	cmp	r3, r4
 800cd92:	d9fa      	bls.n	800cd8a <_free_r+0x42>
 800cd94:	6811      	ldr	r1, [r2, #0]
 800cd96:	1850      	adds	r0, r2, r1
 800cd98:	42a0      	cmp	r0, r4
 800cd9a:	d10b      	bne.n	800cdb4 <_free_r+0x6c>
 800cd9c:	6820      	ldr	r0, [r4, #0]
 800cd9e:	4401      	add	r1, r0
 800cda0:	1850      	adds	r0, r2, r1
 800cda2:	6011      	str	r1, [r2, #0]
 800cda4:	4283      	cmp	r3, r0
 800cda6:	d1e0      	bne.n	800cd6a <_free_r+0x22>
 800cda8:	6818      	ldr	r0, [r3, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	4408      	add	r0, r1
 800cdae:	6053      	str	r3, [r2, #4]
 800cdb0:	6010      	str	r0, [r2, #0]
 800cdb2:	e7da      	b.n	800cd6a <_free_r+0x22>
 800cdb4:	d902      	bls.n	800cdbc <_free_r+0x74>
 800cdb6:	230c      	movs	r3, #12
 800cdb8:	602b      	str	r3, [r5, #0]
 800cdba:	e7d6      	b.n	800cd6a <_free_r+0x22>
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	1821      	adds	r1, r4, r0
 800cdc0:	428b      	cmp	r3, r1
 800cdc2:	bf02      	ittt	eq
 800cdc4:	6819      	ldreq	r1, [r3, #0]
 800cdc6:	685b      	ldreq	r3, [r3, #4]
 800cdc8:	1809      	addeq	r1, r1, r0
 800cdca:	6063      	str	r3, [r4, #4]
 800cdcc:	bf08      	it	eq
 800cdce:	6021      	streq	r1, [r4, #0]
 800cdd0:	6054      	str	r4, [r2, #4]
 800cdd2:	e7ca      	b.n	800cd6a <_free_r+0x22>
 800cdd4:	bd38      	pop	{r3, r4, r5, pc}
 800cdd6:	bf00      	nop
 800cdd8:	200006ec 	.word	0x200006ec

0800cddc <sbrk_aligned>:
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	4e0f      	ldr	r6, [pc, #60]	@ (800ce1c <sbrk_aligned+0x40>)
 800cde0:	460c      	mov	r4, r1
 800cde2:	4605      	mov	r5, r0
 800cde4:	6831      	ldr	r1, [r6, #0]
 800cde6:	b911      	cbnz	r1, 800cdee <sbrk_aligned+0x12>
 800cde8:	f000 fcaa 	bl	800d740 <_sbrk_r>
 800cdec:	6030      	str	r0, [r6, #0]
 800cdee:	4621      	mov	r1, r4
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	f000 fca5 	bl	800d740 <_sbrk_r>
 800cdf6:	1c43      	adds	r3, r0, #1
 800cdf8:	d103      	bne.n	800ce02 <sbrk_aligned+0x26>
 800cdfa:	f04f 34ff 	mov.w	r4, #4294967295
 800cdfe:	4620      	mov	r0, r4
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	1cc4      	adds	r4, r0, #3
 800ce04:	f024 0403 	bic.w	r4, r4, #3
 800ce08:	42a0      	cmp	r0, r4
 800ce0a:	d0f8      	beq.n	800cdfe <sbrk_aligned+0x22>
 800ce0c:	1a21      	subs	r1, r4, r0
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f000 fc96 	bl	800d740 <_sbrk_r>
 800ce14:	3001      	adds	r0, #1
 800ce16:	d1f2      	bne.n	800cdfe <sbrk_aligned+0x22>
 800ce18:	e7ef      	b.n	800cdfa <sbrk_aligned+0x1e>
 800ce1a:	bf00      	nop
 800ce1c:	200006e8 	.word	0x200006e8

0800ce20 <_malloc_r>:
 800ce20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce24:	1ccd      	adds	r5, r1, #3
 800ce26:	4606      	mov	r6, r0
 800ce28:	f025 0503 	bic.w	r5, r5, #3
 800ce2c:	3508      	adds	r5, #8
 800ce2e:	2d0c      	cmp	r5, #12
 800ce30:	bf38      	it	cc
 800ce32:	250c      	movcc	r5, #12
 800ce34:	2d00      	cmp	r5, #0
 800ce36:	db01      	blt.n	800ce3c <_malloc_r+0x1c>
 800ce38:	42a9      	cmp	r1, r5
 800ce3a:	d904      	bls.n	800ce46 <_malloc_r+0x26>
 800ce3c:	230c      	movs	r3, #12
 800ce3e:	6033      	str	r3, [r6, #0]
 800ce40:	2000      	movs	r0, #0
 800ce42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf1c <_malloc_r+0xfc>
 800ce4a:	f000 f869 	bl	800cf20 <__malloc_lock>
 800ce4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce52:	461c      	mov	r4, r3
 800ce54:	bb44      	cbnz	r4, 800cea8 <_malloc_r+0x88>
 800ce56:	4629      	mov	r1, r5
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f7ff ffbf 	bl	800cddc <sbrk_aligned>
 800ce5e:	1c43      	adds	r3, r0, #1
 800ce60:	4604      	mov	r4, r0
 800ce62:	d158      	bne.n	800cf16 <_malloc_r+0xf6>
 800ce64:	f8d8 4000 	ldr.w	r4, [r8]
 800ce68:	4627      	mov	r7, r4
 800ce6a:	2f00      	cmp	r7, #0
 800ce6c:	d143      	bne.n	800cef6 <_malloc_r+0xd6>
 800ce6e:	2c00      	cmp	r4, #0
 800ce70:	d04b      	beq.n	800cf0a <_malloc_r+0xea>
 800ce72:	6823      	ldr	r3, [r4, #0]
 800ce74:	4639      	mov	r1, r7
 800ce76:	4630      	mov	r0, r6
 800ce78:	eb04 0903 	add.w	r9, r4, r3
 800ce7c:	f000 fc60 	bl	800d740 <_sbrk_r>
 800ce80:	4581      	cmp	r9, r0
 800ce82:	d142      	bne.n	800cf0a <_malloc_r+0xea>
 800ce84:	6821      	ldr	r1, [r4, #0]
 800ce86:	4630      	mov	r0, r6
 800ce88:	1a6d      	subs	r5, r5, r1
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	f7ff ffa6 	bl	800cddc <sbrk_aligned>
 800ce90:	3001      	adds	r0, #1
 800ce92:	d03a      	beq.n	800cf0a <_malloc_r+0xea>
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	442b      	add	r3, r5
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce9e:	685a      	ldr	r2, [r3, #4]
 800cea0:	bb62      	cbnz	r2, 800cefc <_malloc_r+0xdc>
 800cea2:	f8c8 7000 	str.w	r7, [r8]
 800cea6:	e00f      	b.n	800cec8 <_malloc_r+0xa8>
 800cea8:	6822      	ldr	r2, [r4, #0]
 800ceaa:	1b52      	subs	r2, r2, r5
 800ceac:	d420      	bmi.n	800cef0 <_malloc_r+0xd0>
 800ceae:	2a0b      	cmp	r2, #11
 800ceb0:	d917      	bls.n	800cee2 <_malloc_r+0xc2>
 800ceb2:	1961      	adds	r1, r4, r5
 800ceb4:	42a3      	cmp	r3, r4
 800ceb6:	6025      	str	r5, [r4, #0]
 800ceb8:	bf18      	it	ne
 800ceba:	6059      	strne	r1, [r3, #4]
 800cebc:	6863      	ldr	r3, [r4, #4]
 800cebe:	bf08      	it	eq
 800cec0:	f8c8 1000 	streq.w	r1, [r8]
 800cec4:	5162      	str	r2, [r4, r5]
 800cec6:	604b      	str	r3, [r1, #4]
 800cec8:	4630      	mov	r0, r6
 800ceca:	f000 f82f 	bl	800cf2c <__malloc_unlock>
 800cece:	f104 000b 	add.w	r0, r4, #11
 800ced2:	1d23      	adds	r3, r4, #4
 800ced4:	f020 0007 	bic.w	r0, r0, #7
 800ced8:	1ac2      	subs	r2, r0, r3
 800ceda:	bf1c      	itt	ne
 800cedc:	1a1b      	subne	r3, r3, r0
 800cede:	50a3      	strne	r3, [r4, r2]
 800cee0:	e7af      	b.n	800ce42 <_malloc_r+0x22>
 800cee2:	6862      	ldr	r2, [r4, #4]
 800cee4:	42a3      	cmp	r3, r4
 800cee6:	bf0c      	ite	eq
 800cee8:	f8c8 2000 	streq.w	r2, [r8]
 800ceec:	605a      	strne	r2, [r3, #4]
 800ceee:	e7eb      	b.n	800cec8 <_malloc_r+0xa8>
 800cef0:	4623      	mov	r3, r4
 800cef2:	6864      	ldr	r4, [r4, #4]
 800cef4:	e7ae      	b.n	800ce54 <_malloc_r+0x34>
 800cef6:	463c      	mov	r4, r7
 800cef8:	687f      	ldr	r7, [r7, #4]
 800cefa:	e7b6      	b.n	800ce6a <_malloc_r+0x4a>
 800cefc:	461a      	mov	r2, r3
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	42a3      	cmp	r3, r4
 800cf02:	d1fb      	bne.n	800cefc <_malloc_r+0xdc>
 800cf04:	2300      	movs	r3, #0
 800cf06:	6053      	str	r3, [r2, #4]
 800cf08:	e7de      	b.n	800cec8 <_malloc_r+0xa8>
 800cf0a:	230c      	movs	r3, #12
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	6033      	str	r3, [r6, #0]
 800cf10:	f000 f80c 	bl	800cf2c <__malloc_unlock>
 800cf14:	e794      	b.n	800ce40 <_malloc_r+0x20>
 800cf16:	6005      	str	r5, [r0, #0]
 800cf18:	e7d6      	b.n	800cec8 <_malloc_r+0xa8>
 800cf1a:	bf00      	nop
 800cf1c:	200006ec 	.word	0x200006ec

0800cf20 <__malloc_lock>:
 800cf20:	4801      	ldr	r0, [pc, #4]	@ (800cf28 <__malloc_lock+0x8>)
 800cf22:	f7ff bf0e 	b.w	800cd42 <__retarget_lock_acquire_recursive>
 800cf26:	bf00      	nop
 800cf28:	200006e4 	.word	0x200006e4

0800cf2c <__malloc_unlock>:
 800cf2c:	4801      	ldr	r0, [pc, #4]	@ (800cf34 <__malloc_unlock+0x8>)
 800cf2e:	f7ff bf09 	b.w	800cd44 <__retarget_lock_release_recursive>
 800cf32:	bf00      	nop
 800cf34:	200006e4 	.word	0x200006e4

0800cf38 <__sfputc_r>:
 800cf38:	6893      	ldr	r3, [r2, #8]
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	6093      	str	r3, [r2, #8]
 800cf40:	b410      	push	{r4}
 800cf42:	da08      	bge.n	800cf56 <__sfputc_r+0x1e>
 800cf44:	6994      	ldr	r4, [r2, #24]
 800cf46:	42a3      	cmp	r3, r4
 800cf48:	db01      	blt.n	800cf4e <__sfputc_r+0x16>
 800cf4a:	290a      	cmp	r1, #10
 800cf4c:	d103      	bne.n	800cf56 <__sfputc_r+0x1e>
 800cf4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf52:	f7ff bde8 	b.w	800cb26 <__swbuf_r>
 800cf56:	6813      	ldr	r3, [r2, #0]
 800cf58:	1c58      	adds	r0, r3, #1
 800cf5a:	6010      	str	r0, [r2, #0]
 800cf5c:	4608      	mov	r0, r1
 800cf5e:	7019      	strb	r1, [r3, #0]
 800cf60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <__sfputs_r>:
 800cf66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf68:	4606      	mov	r6, r0
 800cf6a:	460f      	mov	r7, r1
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	18d5      	adds	r5, r2, r3
 800cf70:	42ac      	cmp	r4, r5
 800cf72:	d101      	bne.n	800cf78 <__sfputs_r+0x12>
 800cf74:	2000      	movs	r0, #0
 800cf76:	e007      	b.n	800cf88 <__sfputs_r+0x22>
 800cf78:	463a      	mov	r2, r7
 800cf7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7e:	4630      	mov	r0, r6
 800cf80:	f7ff ffda 	bl	800cf38 <__sfputc_r>
 800cf84:	1c43      	adds	r3, r0, #1
 800cf86:	d1f3      	bne.n	800cf70 <__sfputs_r+0xa>
 800cf88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf8c <_vfiprintf_r>:
 800cf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf90:	460d      	mov	r5, r1
 800cf92:	b09d      	sub	sp, #116	@ 0x74
 800cf94:	4614      	mov	r4, r2
 800cf96:	4698      	mov	r8, r3
 800cf98:	4606      	mov	r6, r0
 800cf9a:	b118      	cbz	r0, 800cfa4 <_vfiprintf_r+0x18>
 800cf9c:	6a03      	ldr	r3, [r0, #32]
 800cf9e:	b90b      	cbnz	r3, 800cfa4 <_vfiprintf_r+0x18>
 800cfa0:	f7ff fcd8 	bl	800c954 <__sinit>
 800cfa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfa6:	07d9      	lsls	r1, r3, #31
 800cfa8:	d405      	bmi.n	800cfb6 <_vfiprintf_r+0x2a>
 800cfaa:	89ab      	ldrh	r3, [r5, #12]
 800cfac:	059a      	lsls	r2, r3, #22
 800cfae:	d402      	bmi.n	800cfb6 <_vfiprintf_r+0x2a>
 800cfb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfb2:	f7ff fec6 	bl	800cd42 <__retarget_lock_acquire_recursive>
 800cfb6:	89ab      	ldrh	r3, [r5, #12]
 800cfb8:	071b      	lsls	r3, r3, #28
 800cfba:	d501      	bpl.n	800cfc0 <_vfiprintf_r+0x34>
 800cfbc:	692b      	ldr	r3, [r5, #16]
 800cfbe:	b99b      	cbnz	r3, 800cfe8 <_vfiprintf_r+0x5c>
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff fdee 	bl	800cba4 <__swsetup_r>
 800cfc8:	b170      	cbz	r0, 800cfe8 <_vfiprintf_r+0x5c>
 800cfca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfcc:	07dc      	lsls	r4, r3, #31
 800cfce:	d504      	bpl.n	800cfda <_vfiprintf_r+0x4e>
 800cfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd4:	b01d      	add	sp, #116	@ 0x74
 800cfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	0598      	lsls	r0, r3, #22
 800cfde:	d4f7      	bmi.n	800cfd0 <_vfiprintf_r+0x44>
 800cfe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfe2:	f7ff feaf 	bl	800cd44 <__retarget_lock_release_recursive>
 800cfe6:	e7f3      	b.n	800cfd0 <_vfiprintf_r+0x44>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfee:	f04f 0901 	mov.w	r9, #1
 800cff2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d1a8 <_vfiprintf_r+0x21c>
 800cff6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cff8:	2320      	movs	r3, #32
 800cffa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cffe:	2330      	movs	r3, #48	@ 0x30
 800d000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d004:	4623      	mov	r3, r4
 800d006:	469a      	mov	sl, r3
 800d008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d00c:	b10a      	cbz	r2, 800d012 <_vfiprintf_r+0x86>
 800d00e:	2a25      	cmp	r2, #37	@ 0x25
 800d010:	d1f9      	bne.n	800d006 <_vfiprintf_r+0x7a>
 800d012:	ebba 0b04 	subs.w	fp, sl, r4
 800d016:	d00b      	beq.n	800d030 <_vfiprintf_r+0xa4>
 800d018:	465b      	mov	r3, fp
 800d01a:	4622      	mov	r2, r4
 800d01c:	4629      	mov	r1, r5
 800d01e:	4630      	mov	r0, r6
 800d020:	f7ff ffa1 	bl	800cf66 <__sfputs_r>
 800d024:	3001      	adds	r0, #1
 800d026:	f000 80a7 	beq.w	800d178 <_vfiprintf_r+0x1ec>
 800d02a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d02c:	445a      	add	r2, fp
 800d02e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d030:	f89a 3000 	ldrb.w	r3, [sl]
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 809f 	beq.w	800d178 <_vfiprintf_r+0x1ec>
 800d03a:	2300      	movs	r3, #0
 800d03c:	f04f 32ff 	mov.w	r2, #4294967295
 800d040:	f10a 0a01 	add.w	sl, sl, #1
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	9307      	str	r3, [sp, #28]
 800d048:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d04c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d052:	4654      	mov	r4, sl
 800d054:	2205      	movs	r2, #5
 800d056:	4854      	ldr	r0, [pc, #336]	@ (800d1a8 <_vfiprintf_r+0x21c>)
 800d058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d05c:	f000 fb80 	bl	800d760 <memchr>
 800d060:	9a04      	ldr	r2, [sp, #16]
 800d062:	b9d8      	cbnz	r0, 800d09c <_vfiprintf_r+0x110>
 800d064:	06d1      	lsls	r1, r2, #27
 800d066:	bf44      	itt	mi
 800d068:	2320      	movmi	r3, #32
 800d06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d06e:	0713      	lsls	r3, r2, #28
 800d070:	bf44      	itt	mi
 800d072:	232b      	movmi	r3, #43	@ 0x2b
 800d074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d078:	f89a 3000 	ldrb.w	r3, [sl]
 800d07c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d07e:	d015      	beq.n	800d0ac <_vfiprintf_r+0x120>
 800d080:	9a07      	ldr	r2, [sp, #28]
 800d082:	4654      	mov	r4, sl
 800d084:	2000      	movs	r0, #0
 800d086:	f04f 0c0a 	mov.w	ip, #10
 800d08a:	4621      	mov	r1, r4
 800d08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d090:	3b30      	subs	r3, #48	@ 0x30
 800d092:	2b09      	cmp	r3, #9
 800d094:	d94b      	bls.n	800d12e <_vfiprintf_r+0x1a2>
 800d096:	b1b0      	cbz	r0, 800d0c6 <_vfiprintf_r+0x13a>
 800d098:	9207      	str	r2, [sp, #28]
 800d09a:	e014      	b.n	800d0c6 <_vfiprintf_r+0x13a>
 800d09c:	eba0 0308 	sub.w	r3, r0, r8
 800d0a0:	46a2      	mov	sl, r4
 800d0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	e7d2      	b.n	800d052 <_vfiprintf_r+0xc6>
 800d0ac:	9b03      	ldr	r3, [sp, #12]
 800d0ae:	1d19      	adds	r1, r3, #4
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	9103      	str	r1, [sp, #12]
 800d0b6:	bfbb      	ittet	lt
 800d0b8:	425b      	neglt	r3, r3
 800d0ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d0be:	9307      	strge	r3, [sp, #28]
 800d0c0:	9307      	strlt	r3, [sp, #28]
 800d0c2:	bfb8      	it	lt
 800d0c4:	9204      	strlt	r2, [sp, #16]
 800d0c6:	7823      	ldrb	r3, [r4, #0]
 800d0c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0ca:	d10a      	bne.n	800d0e2 <_vfiprintf_r+0x156>
 800d0cc:	7863      	ldrb	r3, [r4, #1]
 800d0ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0d0:	d132      	bne.n	800d138 <_vfiprintf_r+0x1ac>
 800d0d2:	9b03      	ldr	r3, [sp, #12]
 800d0d4:	3402      	adds	r4, #2
 800d0d6:	1d1a      	adds	r2, r3, #4
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0de:	9203      	str	r2, [sp, #12]
 800d0e0:	9305      	str	r3, [sp, #20]
 800d0e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1b8 <_vfiprintf_r+0x22c>
 800d0e6:	2203      	movs	r2, #3
 800d0e8:	7821      	ldrb	r1, [r4, #0]
 800d0ea:	4650      	mov	r0, sl
 800d0ec:	f000 fb38 	bl	800d760 <memchr>
 800d0f0:	b138      	cbz	r0, 800d102 <_vfiprintf_r+0x176>
 800d0f2:	eba0 000a 	sub.w	r0, r0, sl
 800d0f6:	2240      	movs	r2, #64	@ 0x40
 800d0f8:	9b04      	ldr	r3, [sp, #16]
 800d0fa:	3401      	adds	r4, #1
 800d0fc:	4082      	lsls	r2, r0
 800d0fe:	4313      	orrs	r3, r2
 800d100:	9304      	str	r3, [sp, #16]
 800d102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d106:	2206      	movs	r2, #6
 800d108:	4828      	ldr	r0, [pc, #160]	@ (800d1ac <_vfiprintf_r+0x220>)
 800d10a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d10e:	f000 fb27 	bl	800d760 <memchr>
 800d112:	2800      	cmp	r0, #0
 800d114:	d03f      	beq.n	800d196 <_vfiprintf_r+0x20a>
 800d116:	4b26      	ldr	r3, [pc, #152]	@ (800d1b0 <_vfiprintf_r+0x224>)
 800d118:	bb1b      	cbnz	r3, 800d162 <_vfiprintf_r+0x1d6>
 800d11a:	9b03      	ldr	r3, [sp, #12]
 800d11c:	3307      	adds	r3, #7
 800d11e:	f023 0307 	bic.w	r3, r3, #7
 800d122:	3308      	adds	r3, #8
 800d124:	9303      	str	r3, [sp, #12]
 800d126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d128:	443b      	add	r3, r7
 800d12a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d12c:	e76a      	b.n	800d004 <_vfiprintf_r+0x78>
 800d12e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d132:	460c      	mov	r4, r1
 800d134:	2001      	movs	r0, #1
 800d136:	e7a8      	b.n	800d08a <_vfiprintf_r+0xfe>
 800d138:	2300      	movs	r3, #0
 800d13a:	3401      	adds	r4, #1
 800d13c:	f04f 0c0a 	mov.w	ip, #10
 800d140:	4619      	mov	r1, r3
 800d142:	9305      	str	r3, [sp, #20]
 800d144:	4620      	mov	r0, r4
 800d146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d14a:	3a30      	subs	r2, #48	@ 0x30
 800d14c:	2a09      	cmp	r2, #9
 800d14e:	d903      	bls.n	800d158 <_vfiprintf_r+0x1cc>
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0c6      	beq.n	800d0e2 <_vfiprintf_r+0x156>
 800d154:	9105      	str	r1, [sp, #20]
 800d156:	e7c4      	b.n	800d0e2 <_vfiprintf_r+0x156>
 800d158:	fb0c 2101 	mla	r1, ip, r1, r2
 800d15c:	4604      	mov	r4, r0
 800d15e:	2301      	movs	r3, #1
 800d160:	e7f0      	b.n	800d144 <_vfiprintf_r+0x1b8>
 800d162:	ab03      	add	r3, sp, #12
 800d164:	462a      	mov	r2, r5
 800d166:	a904      	add	r1, sp, #16
 800d168:	4630      	mov	r0, r6
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	4b11      	ldr	r3, [pc, #68]	@ (800d1b4 <_vfiprintf_r+0x228>)
 800d16e:	f3af 8000 	nop.w
 800d172:	4607      	mov	r7, r0
 800d174:	1c78      	adds	r0, r7, #1
 800d176:	d1d6      	bne.n	800d126 <_vfiprintf_r+0x19a>
 800d178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d17a:	07d9      	lsls	r1, r3, #31
 800d17c:	d405      	bmi.n	800d18a <_vfiprintf_r+0x1fe>
 800d17e:	89ab      	ldrh	r3, [r5, #12]
 800d180:	059a      	lsls	r2, r3, #22
 800d182:	d402      	bmi.n	800d18a <_vfiprintf_r+0x1fe>
 800d184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d186:	f7ff fddd 	bl	800cd44 <__retarget_lock_release_recursive>
 800d18a:	89ab      	ldrh	r3, [r5, #12]
 800d18c:	065b      	lsls	r3, r3, #25
 800d18e:	f53f af1f 	bmi.w	800cfd0 <_vfiprintf_r+0x44>
 800d192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d194:	e71e      	b.n	800cfd4 <_vfiprintf_r+0x48>
 800d196:	ab03      	add	r3, sp, #12
 800d198:	462a      	mov	r2, r5
 800d19a:	a904      	add	r1, sp, #16
 800d19c:	4630      	mov	r0, r6
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	4b04      	ldr	r3, [pc, #16]	@ (800d1b4 <_vfiprintf_r+0x228>)
 800d1a2:	f000 f87d 	bl	800d2a0 <_printf_i>
 800d1a6:	e7e4      	b.n	800d172 <_vfiprintf_r+0x1e6>
 800d1a8:	0800d918 	.word	0x0800d918
 800d1ac:	0800d922 	.word	0x0800d922
 800d1b0:	00000000 	.word	0x00000000
 800d1b4:	0800cf67 	.word	0x0800cf67
 800d1b8:	0800d91e 	.word	0x0800d91e

0800d1bc <_printf_common>:
 800d1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c0:	4616      	mov	r6, r2
 800d1c2:	4698      	mov	r8, r3
 800d1c4:	688a      	ldr	r2, [r1, #8]
 800d1c6:	4607      	mov	r7, r0
 800d1c8:	690b      	ldr	r3, [r1, #16]
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	bfb8      	it	lt
 800d1d4:	4613      	movlt	r3, r2
 800d1d6:	6033      	str	r3, [r6, #0]
 800d1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1dc:	b10a      	cbz	r2, 800d1e2 <_printf_common+0x26>
 800d1de:	3301      	adds	r3, #1
 800d1e0:	6033      	str	r3, [r6, #0]
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	0699      	lsls	r1, r3, #26
 800d1e6:	bf42      	ittt	mi
 800d1e8:	6833      	ldrmi	r3, [r6, #0]
 800d1ea:	3302      	addmi	r3, #2
 800d1ec:	6033      	strmi	r3, [r6, #0]
 800d1ee:	6825      	ldr	r5, [r4, #0]
 800d1f0:	f015 0506 	ands.w	r5, r5, #6
 800d1f4:	d106      	bne.n	800d204 <_printf_common+0x48>
 800d1f6:	f104 0a19 	add.w	sl, r4, #25
 800d1fa:	68e3      	ldr	r3, [r4, #12]
 800d1fc:	6832      	ldr	r2, [r6, #0]
 800d1fe:	1a9b      	subs	r3, r3, r2
 800d200:	42ab      	cmp	r3, r5
 800d202:	dc2b      	bgt.n	800d25c <_printf_common+0xa0>
 800d204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d208:	6822      	ldr	r2, [r4, #0]
 800d20a:	3b00      	subs	r3, #0
 800d20c:	bf18      	it	ne
 800d20e:	2301      	movne	r3, #1
 800d210:	0692      	lsls	r2, r2, #26
 800d212:	d430      	bmi.n	800d276 <_printf_common+0xba>
 800d214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d218:	4641      	mov	r1, r8
 800d21a:	4638      	mov	r0, r7
 800d21c:	47c8      	blx	r9
 800d21e:	3001      	adds	r0, #1
 800d220:	d023      	beq.n	800d26a <_printf_common+0xae>
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	341a      	adds	r4, #26
 800d226:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d22a:	f003 0306 	and.w	r3, r3, #6
 800d22e:	2b04      	cmp	r3, #4
 800d230:	bf0a      	itet	eq
 800d232:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d236:	2500      	movne	r5, #0
 800d238:	6833      	ldreq	r3, [r6, #0]
 800d23a:	f04f 0600 	mov.w	r6, #0
 800d23e:	bf08      	it	eq
 800d240:	1aed      	subeq	r5, r5, r3
 800d242:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d246:	bf08      	it	eq
 800d248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d24c:	4293      	cmp	r3, r2
 800d24e:	bfc4      	itt	gt
 800d250:	1a9b      	subgt	r3, r3, r2
 800d252:	18ed      	addgt	r5, r5, r3
 800d254:	42b5      	cmp	r5, r6
 800d256:	d11a      	bne.n	800d28e <_printf_common+0xd2>
 800d258:	2000      	movs	r0, #0
 800d25a:	e008      	b.n	800d26e <_printf_common+0xb2>
 800d25c:	2301      	movs	r3, #1
 800d25e:	4652      	mov	r2, sl
 800d260:	4641      	mov	r1, r8
 800d262:	4638      	mov	r0, r7
 800d264:	47c8      	blx	r9
 800d266:	3001      	adds	r0, #1
 800d268:	d103      	bne.n	800d272 <_printf_common+0xb6>
 800d26a:	f04f 30ff 	mov.w	r0, #4294967295
 800d26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d272:	3501      	adds	r5, #1
 800d274:	e7c1      	b.n	800d1fa <_printf_common+0x3e>
 800d276:	18e1      	adds	r1, r4, r3
 800d278:	1c5a      	adds	r2, r3, #1
 800d27a:	2030      	movs	r0, #48	@ 0x30
 800d27c:	3302      	adds	r3, #2
 800d27e:	4422      	add	r2, r4
 800d280:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d28c:	e7c2      	b.n	800d214 <_printf_common+0x58>
 800d28e:	2301      	movs	r3, #1
 800d290:	4622      	mov	r2, r4
 800d292:	4641      	mov	r1, r8
 800d294:	4638      	mov	r0, r7
 800d296:	47c8      	blx	r9
 800d298:	3001      	adds	r0, #1
 800d29a:	d0e6      	beq.n	800d26a <_printf_common+0xae>
 800d29c:	3601      	adds	r6, #1
 800d29e:	e7d9      	b.n	800d254 <_printf_common+0x98>

0800d2a0 <_printf_i>:
 800d2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a4:	7e0f      	ldrb	r7, [r1, #24]
 800d2a6:	4691      	mov	r9, r2
 800d2a8:	4680      	mov	r8, r0
 800d2aa:	460c      	mov	r4, r1
 800d2ac:	2f78      	cmp	r7, #120	@ 0x78
 800d2ae:	469a      	mov	sl, r3
 800d2b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d2b6:	d807      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2b8:	2f62      	cmp	r7, #98	@ 0x62
 800d2ba:	d80a      	bhi.n	800d2d2 <_printf_i+0x32>
 800d2bc:	2f00      	cmp	r7, #0
 800d2be:	f000 80d2 	beq.w	800d466 <_printf_i+0x1c6>
 800d2c2:	2f58      	cmp	r7, #88	@ 0x58
 800d2c4:	f000 80b9 	beq.w	800d43a <_printf_i+0x19a>
 800d2c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2d0:	e03a      	b.n	800d348 <_printf_i+0xa8>
 800d2d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2d6:	2b15      	cmp	r3, #21
 800d2d8:	d8f6      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2da:	a101      	add	r1, pc, #4	@ (adr r1, 800d2e0 <_printf_i+0x40>)
 800d2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2e0:	0800d339 	.word	0x0800d339
 800d2e4:	0800d34d 	.word	0x0800d34d
 800d2e8:	0800d2c9 	.word	0x0800d2c9
 800d2ec:	0800d2c9 	.word	0x0800d2c9
 800d2f0:	0800d2c9 	.word	0x0800d2c9
 800d2f4:	0800d2c9 	.word	0x0800d2c9
 800d2f8:	0800d34d 	.word	0x0800d34d
 800d2fc:	0800d2c9 	.word	0x0800d2c9
 800d300:	0800d2c9 	.word	0x0800d2c9
 800d304:	0800d2c9 	.word	0x0800d2c9
 800d308:	0800d2c9 	.word	0x0800d2c9
 800d30c:	0800d44d 	.word	0x0800d44d
 800d310:	0800d377 	.word	0x0800d377
 800d314:	0800d407 	.word	0x0800d407
 800d318:	0800d2c9 	.word	0x0800d2c9
 800d31c:	0800d2c9 	.word	0x0800d2c9
 800d320:	0800d46f 	.word	0x0800d46f
 800d324:	0800d2c9 	.word	0x0800d2c9
 800d328:	0800d377 	.word	0x0800d377
 800d32c:	0800d2c9 	.word	0x0800d2c9
 800d330:	0800d2c9 	.word	0x0800d2c9
 800d334:	0800d40f 	.word	0x0800d40f
 800d338:	6833      	ldr	r3, [r6, #0]
 800d33a:	1d1a      	adds	r2, r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6032      	str	r2, [r6, #0]
 800d340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d348:	2301      	movs	r3, #1
 800d34a:	e09d      	b.n	800d488 <_printf_i+0x1e8>
 800d34c:	6833      	ldr	r3, [r6, #0]
 800d34e:	6820      	ldr	r0, [r4, #0]
 800d350:	1d19      	adds	r1, r3, #4
 800d352:	6031      	str	r1, [r6, #0]
 800d354:	0606      	lsls	r6, r0, #24
 800d356:	d501      	bpl.n	800d35c <_printf_i+0xbc>
 800d358:	681d      	ldr	r5, [r3, #0]
 800d35a:	e003      	b.n	800d364 <_printf_i+0xc4>
 800d35c:	0645      	lsls	r5, r0, #25
 800d35e:	d5fb      	bpl.n	800d358 <_printf_i+0xb8>
 800d360:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d364:	2d00      	cmp	r5, #0
 800d366:	da03      	bge.n	800d370 <_printf_i+0xd0>
 800d368:	232d      	movs	r3, #45	@ 0x2d
 800d36a:	426d      	negs	r5, r5
 800d36c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d370:	4859      	ldr	r0, [pc, #356]	@ (800d4d8 <_printf_i+0x238>)
 800d372:	230a      	movs	r3, #10
 800d374:	e011      	b.n	800d39a <_printf_i+0xfa>
 800d376:	6821      	ldr	r1, [r4, #0]
 800d378:	6833      	ldr	r3, [r6, #0]
 800d37a:	0608      	lsls	r0, r1, #24
 800d37c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d380:	d402      	bmi.n	800d388 <_printf_i+0xe8>
 800d382:	0649      	lsls	r1, r1, #25
 800d384:	bf48      	it	mi
 800d386:	b2ad      	uxthmi	r5, r5
 800d388:	2f6f      	cmp	r7, #111	@ 0x6f
 800d38a:	6033      	str	r3, [r6, #0]
 800d38c:	4852      	ldr	r0, [pc, #328]	@ (800d4d8 <_printf_i+0x238>)
 800d38e:	bf14      	ite	ne
 800d390:	230a      	movne	r3, #10
 800d392:	2308      	moveq	r3, #8
 800d394:	2100      	movs	r1, #0
 800d396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d39a:	6866      	ldr	r6, [r4, #4]
 800d39c:	2e00      	cmp	r6, #0
 800d39e:	60a6      	str	r6, [r4, #8]
 800d3a0:	bfa2      	ittt	ge
 800d3a2:	6821      	ldrge	r1, [r4, #0]
 800d3a4:	f021 0104 	bicge.w	r1, r1, #4
 800d3a8:	6021      	strge	r1, [r4, #0]
 800d3aa:	b90d      	cbnz	r5, 800d3b0 <_printf_i+0x110>
 800d3ac:	2e00      	cmp	r6, #0
 800d3ae:	d04b      	beq.n	800d448 <_printf_i+0x1a8>
 800d3b0:	4616      	mov	r6, r2
 800d3b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3b6:	fb03 5711 	mls	r7, r3, r1, r5
 800d3ba:	5dc7      	ldrb	r7, [r0, r7]
 800d3bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3c0:	462f      	mov	r7, r5
 800d3c2:	460d      	mov	r5, r1
 800d3c4:	42bb      	cmp	r3, r7
 800d3c6:	d9f4      	bls.n	800d3b2 <_printf_i+0x112>
 800d3c8:	2b08      	cmp	r3, #8
 800d3ca:	d10b      	bne.n	800d3e4 <_printf_i+0x144>
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	07df      	lsls	r7, r3, #31
 800d3d0:	d508      	bpl.n	800d3e4 <_printf_i+0x144>
 800d3d2:	6923      	ldr	r3, [r4, #16]
 800d3d4:	6861      	ldr	r1, [r4, #4]
 800d3d6:	4299      	cmp	r1, r3
 800d3d8:	bfde      	ittt	le
 800d3da:	2330      	movle	r3, #48	@ 0x30
 800d3dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3e4:	1b92      	subs	r2, r2, r6
 800d3e6:	6122      	str	r2, [r4, #16]
 800d3e8:	464b      	mov	r3, r9
 800d3ea:	aa03      	add	r2, sp, #12
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	f8cd a000 	str.w	sl, [sp]
 800d3f4:	f7ff fee2 	bl	800d1bc <_printf_common>
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	d14a      	bne.n	800d492 <_printf_i+0x1f2>
 800d3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d400:	b004      	add	sp, #16
 800d402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d406:	6823      	ldr	r3, [r4, #0]
 800d408:	f043 0320 	orr.w	r3, r3, #32
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	2778      	movs	r7, #120	@ 0x78
 800d410:	4832      	ldr	r0, [pc, #200]	@ (800d4dc <_printf_i+0x23c>)
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d418:	061f      	lsls	r7, r3, #24
 800d41a:	6831      	ldr	r1, [r6, #0]
 800d41c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d420:	d402      	bmi.n	800d428 <_printf_i+0x188>
 800d422:	065f      	lsls	r7, r3, #25
 800d424:	bf48      	it	mi
 800d426:	b2ad      	uxthmi	r5, r5
 800d428:	6031      	str	r1, [r6, #0]
 800d42a:	07d9      	lsls	r1, r3, #31
 800d42c:	bf44      	itt	mi
 800d42e:	f043 0320 	orrmi.w	r3, r3, #32
 800d432:	6023      	strmi	r3, [r4, #0]
 800d434:	b11d      	cbz	r5, 800d43e <_printf_i+0x19e>
 800d436:	2310      	movs	r3, #16
 800d438:	e7ac      	b.n	800d394 <_printf_i+0xf4>
 800d43a:	4827      	ldr	r0, [pc, #156]	@ (800d4d8 <_printf_i+0x238>)
 800d43c:	e7e9      	b.n	800d412 <_printf_i+0x172>
 800d43e:	6823      	ldr	r3, [r4, #0]
 800d440:	f023 0320 	bic.w	r3, r3, #32
 800d444:	6023      	str	r3, [r4, #0]
 800d446:	e7f6      	b.n	800d436 <_printf_i+0x196>
 800d448:	4616      	mov	r6, r2
 800d44a:	e7bd      	b.n	800d3c8 <_printf_i+0x128>
 800d44c:	6833      	ldr	r3, [r6, #0]
 800d44e:	6825      	ldr	r5, [r4, #0]
 800d450:	1d18      	adds	r0, r3, #4
 800d452:	6961      	ldr	r1, [r4, #20]
 800d454:	6030      	str	r0, [r6, #0]
 800d456:	062e      	lsls	r6, r5, #24
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	d501      	bpl.n	800d460 <_printf_i+0x1c0>
 800d45c:	6019      	str	r1, [r3, #0]
 800d45e:	e002      	b.n	800d466 <_printf_i+0x1c6>
 800d460:	0668      	lsls	r0, r5, #25
 800d462:	d5fb      	bpl.n	800d45c <_printf_i+0x1bc>
 800d464:	8019      	strh	r1, [r3, #0]
 800d466:	2300      	movs	r3, #0
 800d468:	4616      	mov	r6, r2
 800d46a:	6123      	str	r3, [r4, #16]
 800d46c:	e7bc      	b.n	800d3e8 <_printf_i+0x148>
 800d46e:	6833      	ldr	r3, [r6, #0]
 800d470:	2100      	movs	r1, #0
 800d472:	1d1a      	adds	r2, r3, #4
 800d474:	6032      	str	r2, [r6, #0]
 800d476:	681e      	ldr	r6, [r3, #0]
 800d478:	6862      	ldr	r2, [r4, #4]
 800d47a:	4630      	mov	r0, r6
 800d47c:	f000 f970 	bl	800d760 <memchr>
 800d480:	b108      	cbz	r0, 800d486 <_printf_i+0x1e6>
 800d482:	1b80      	subs	r0, r0, r6
 800d484:	6060      	str	r0, [r4, #4]
 800d486:	6863      	ldr	r3, [r4, #4]
 800d488:	6123      	str	r3, [r4, #16]
 800d48a:	2300      	movs	r3, #0
 800d48c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d490:	e7aa      	b.n	800d3e8 <_printf_i+0x148>
 800d492:	6923      	ldr	r3, [r4, #16]
 800d494:	4632      	mov	r2, r6
 800d496:	4649      	mov	r1, r9
 800d498:	4640      	mov	r0, r8
 800d49a:	47d0      	blx	sl
 800d49c:	3001      	adds	r0, #1
 800d49e:	d0ad      	beq.n	800d3fc <_printf_i+0x15c>
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	079b      	lsls	r3, r3, #30
 800d4a4:	d413      	bmi.n	800d4ce <_printf_i+0x22e>
 800d4a6:	68e0      	ldr	r0, [r4, #12]
 800d4a8:	9b03      	ldr	r3, [sp, #12]
 800d4aa:	4298      	cmp	r0, r3
 800d4ac:	bfb8      	it	lt
 800d4ae:	4618      	movlt	r0, r3
 800d4b0:	e7a6      	b.n	800d400 <_printf_i+0x160>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	4632      	mov	r2, r6
 800d4b6:	4649      	mov	r1, r9
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	47d0      	blx	sl
 800d4bc:	3001      	adds	r0, #1
 800d4be:	d09d      	beq.n	800d3fc <_printf_i+0x15c>
 800d4c0:	3501      	adds	r5, #1
 800d4c2:	68e3      	ldr	r3, [r4, #12]
 800d4c4:	9903      	ldr	r1, [sp, #12]
 800d4c6:	1a5b      	subs	r3, r3, r1
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	dcf2      	bgt.n	800d4b2 <_printf_i+0x212>
 800d4cc:	e7eb      	b.n	800d4a6 <_printf_i+0x206>
 800d4ce:	2500      	movs	r5, #0
 800d4d0:	f104 0619 	add.w	r6, r4, #25
 800d4d4:	e7f5      	b.n	800d4c2 <_printf_i+0x222>
 800d4d6:	bf00      	nop
 800d4d8:	0800d929 	.word	0x0800d929
 800d4dc:	0800d93a 	.word	0x0800d93a

0800d4e0 <__sflush_r>:
 800d4e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e8:	0716      	lsls	r6, r2, #28
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	d454      	bmi.n	800d59a <__sflush_r+0xba>
 800d4f0:	684b      	ldr	r3, [r1, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	dc02      	bgt.n	800d4fc <__sflush_r+0x1c>
 800d4f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	dd48      	ble.n	800d58e <__sflush_r+0xae>
 800d4fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4fe:	2e00      	cmp	r6, #0
 800d500:	d045      	beq.n	800d58e <__sflush_r+0xae>
 800d502:	2300      	movs	r3, #0
 800d504:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d508:	682f      	ldr	r7, [r5, #0]
 800d50a:	6a21      	ldr	r1, [r4, #32]
 800d50c:	602b      	str	r3, [r5, #0]
 800d50e:	d030      	beq.n	800d572 <__sflush_r+0x92>
 800d510:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	0759      	lsls	r1, r3, #29
 800d516:	d505      	bpl.n	800d524 <__sflush_r+0x44>
 800d518:	6863      	ldr	r3, [r4, #4]
 800d51a:	1ad2      	subs	r2, r2, r3
 800d51c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d51e:	b10b      	cbz	r3, 800d524 <__sflush_r+0x44>
 800d520:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d522:	1ad2      	subs	r2, r2, r3
 800d524:	2300      	movs	r3, #0
 800d526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d528:	6a21      	ldr	r1, [r4, #32]
 800d52a:	4628      	mov	r0, r5
 800d52c:	47b0      	blx	r6
 800d52e:	1c43      	adds	r3, r0, #1
 800d530:	89a3      	ldrh	r3, [r4, #12]
 800d532:	d106      	bne.n	800d542 <__sflush_r+0x62>
 800d534:	6829      	ldr	r1, [r5, #0]
 800d536:	291d      	cmp	r1, #29
 800d538:	d82b      	bhi.n	800d592 <__sflush_r+0xb2>
 800d53a:	4a2a      	ldr	r2, [pc, #168]	@ (800d5e4 <__sflush_r+0x104>)
 800d53c:	410a      	asrs	r2, r1
 800d53e:	07d6      	lsls	r6, r2, #31
 800d540:	d427      	bmi.n	800d592 <__sflush_r+0xb2>
 800d542:	2200      	movs	r2, #0
 800d544:	04d9      	lsls	r1, r3, #19
 800d546:	6062      	str	r2, [r4, #4]
 800d548:	6922      	ldr	r2, [r4, #16]
 800d54a:	6022      	str	r2, [r4, #0]
 800d54c:	d504      	bpl.n	800d558 <__sflush_r+0x78>
 800d54e:	1c42      	adds	r2, r0, #1
 800d550:	d101      	bne.n	800d556 <__sflush_r+0x76>
 800d552:	682b      	ldr	r3, [r5, #0]
 800d554:	b903      	cbnz	r3, 800d558 <__sflush_r+0x78>
 800d556:	6560      	str	r0, [r4, #84]	@ 0x54
 800d558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d55a:	602f      	str	r7, [r5, #0]
 800d55c:	b1b9      	cbz	r1, 800d58e <__sflush_r+0xae>
 800d55e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d562:	4299      	cmp	r1, r3
 800d564:	d002      	beq.n	800d56c <__sflush_r+0x8c>
 800d566:	4628      	mov	r0, r5
 800d568:	f7ff fbee 	bl	800cd48 <_free_r>
 800d56c:	2300      	movs	r3, #0
 800d56e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d570:	e00d      	b.n	800d58e <__sflush_r+0xae>
 800d572:	2301      	movs	r3, #1
 800d574:	4628      	mov	r0, r5
 800d576:	47b0      	blx	r6
 800d578:	4602      	mov	r2, r0
 800d57a:	1c50      	adds	r0, r2, #1
 800d57c:	d1c9      	bne.n	800d512 <__sflush_r+0x32>
 800d57e:	682b      	ldr	r3, [r5, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d0c6      	beq.n	800d512 <__sflush_r+0x32>
 800d584:	2b1d      	cmp	r3, #29
 800d586:	d001      	beq.n	800d58c <__sflush_r+0xac>
 800d588:	2b16      	cmp	r3, #22
 800d58a:	d11d      	bne.n	800d5c8 <__sflush_r+0xe8>
 800d58c:	602f      	str	r7, [r5, #0]
 800d58e:	2000      	movs	r0, #0
 800d590:	e021      	b.n	800d5d6 <__sflush_r+0xf6>
 800d592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d596:	b21b      	sxth	r3, r3
 800d598:	e01a      	b.n	800d5d0 <__sflush_r+0xf0>
 800d59a:	690f      	ldr	r7, [r1, #16]
 800d59c:	2f00      	cmp	r7, #0
 800d59e:	d0f6      	beq.n	800d58e <__sflush_r+0xae>
 800d5a0:	0793      	lsls	r3, r2, #30
 800d5a2:	680e      	ldr	r6, [r1, #0]
 800d5a4:	600f      	str	r7, [r1, #0]
 800d5a6:	bf0c      	ite	eq
 800d5a8:	694b      	ldreq	r3, [r1, #20]
 800d5aa:	2300      	movne	r3, #0
 800d5ac:	eba6 0807 	sub.w	r8, r6, r7
 800d5b0:	608b      	str	r3, [r1, #8]
 800d5b2:	f1b8 0f00 	cmp.w	r8, #0
 800d5b6:	ddea      	ble.n	800d58e <__sflush_r+0xae>
 800d5b8:	4643      	mov	r3, r8
 800d5ba:	463a      	mov	r2, r7
 800d5bc:	6a21      	ldr	r1, [r4, #32]
 800d5be:	4628      	mov	r0, r5
 800d5c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d5c2:	47b0      	blx	r6
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	dc08      	bgt.n	800d5da <__sflush_r+0xfa>
 800d5c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d4:	81a3      	strh	r3, [r4, #12]
 800d5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5da:	4407      	add	r7, r0
 800d5dc:	eba8 0800 	sub.w	r8, r8, r0
 800d5e0:	e7e7      	b.n	800d5b2 <__sflush_r+0xd2>
 800d5e2:	bf00      	nop
 800d5e4:	dfbffffe 	.word	0xdfbffffe

0800d5e8 <_fflush_r>:
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	690b      	ldr	r3, [r1, #16]
 800d5ec:	4605      	mov	r5, r0
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	b913      	cbnz	r3, 800d5f8 <_fflush_r+0x10>
 800d5f2:	2500      	movs	r5, #0
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	bd38      	pop	{r3, r4, r5, pc}
 800d5f8:	b118      	cbz	r0, 800d602 <_fflush_r+0x1a>
 800d5fa:	6a03      	ldr	r3, [r0, #32]
 800d5fc:	b90b      	cbnz	r3, 800d602 <_fflush_r+0x1a>
 800d5fe:	f7ff f9a9 	bl	800c954 <__sinit>
 800d602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d0f3      	beq.n	800d5f2 <_fflush_r+0xa>
 800d60a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d60c:	07d0      	lsls	r0, r2, #31
 800d60e:	d404      	bmi.n	800d61a <_fflush_r+0x32>
 800d610:	0599      	lsls	r1, r3, #22
 800d612:	d402      	bmi.n	800d61a <_fflush_r+0x32>
 800d614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d616:	f7ff fb94 	bl	800cd42 <__retarget_lock_acquire_recursive>
 800d61a:	4628      	mov	r0, r5
 800d61c:	4621      	mov	r1, r4
 800d61e:	f7ff ff5f 	bl	800d4e0 <__sflush_r>
 800d622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d624:	4605      	mov	r5, r0
 800d626:	07da      	lsls	r2, r3, #31
 800d628:	d4e4      	bmi.n	800d5f4 <_fflush_r+0xc>
 800d62a:	89a3      	ldrh	r3, [r4, #12]
 800d62c:	059b      	lsls	r3, r3, #22
 800d62e:	d4e1      	bmi.n	800d5f4 <_fflush_r+0xc>
 800d630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d632:	f7ff fb87 	bl	800cd44 <__retarget_lock_release_recursive>
 800d636:	e7dd      	b.n	800d5f4 <_fflush_r+0xc>

0800d638 <__swhatbuf_r>:
 800d638:	b570      	push	{r4, r5, r6, lr}
 800d63a:	460c      	mov	r4, r1
 800d63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d640:	b096      	sub	sp, #88	@ 0x58
 800d642:	4615      	mov	r5, r2
 800d644:	2900      	cmp	r1, #0
 800d646:	461e      	mov	r6, r3
 800d648:	da0c      	bge.n	800d664 <__swhatbuf_r+0x2c>
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	2100      	movs	r1, #0
 800d64e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d652:	bf14      	ite	ne
 800d654:	2340      	movne	r3, #64	@ 0x40
 800d656:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d65a:	2000      	movs	r0, #0
 800d65c:	6031      	str	r1, [r6, #0]
 800d65e:	602b      	str	r3, [r5, #0]
 800d660:	b016      	add	sp, #88	@ 0x58
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	466a      	mov	r2, sp
 800d666:	f000 f849 	bl	800d6fc <_fstat_r>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	dbed      	blt.n	800d64a <__swhatbuf_r+0x12>
 800d66e:	9901      	ldr	r1, [sp, #4]
 800d670:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d674:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d678:	4259      	negs	r1, r3
 800d67a:	4159      	adcs	r1, r3
 800d67c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d680:	e7eb      	b.n	800d65a <__swhatbuf_r+0x22>

0800d682 <__smakebuf_r>:
 800d682:	898b      	ldrh	r3, [r1, #12]
 800d684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d686:	079d      	lsls	r5, r3, #30
 800d688:	4606      	mov	r6, r0
 800d68a:	460c      	mov	r4, r1
 800d68c:	d507      	bpl.n	800d69e <__smakebuf_r+0x1c>
 800d68e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	6123      	str	r3, [r4, #16]
 800d696:	2301      	movs	r3, #1
 800d698:	6163      	str	r3, [r4, #20]
 800d69a:	b003      	add	sp, #12
 800d69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d69e:	ab01      	add	r3, sp, #4
 800d6a0:	466a      	mov	r2, sp
 800d6a2:	f7ff ffc9 	bl	800d638 <__swhatbuf_r>
 800d6a6:	9f00      	ldr	r7, [sp, #0]
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	4639      	mov	r1, r7
 800d6ae:	f7ff fbb7 	bl	800ce20 <_malloc_r>
 800d6b2:	b948      	cbnz	r0, 800d6c8 <__smakebuf_r+0x46>
 800d6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6b8:	059a      	lsls	r2, r3, #22
 800d6ba:	d4ee      	bmi.n	800d69a <__smakebuf_r+0x18>
 800d6bc:	f023 0303 	bic.w	r3, r3, #3
 800d6c0:	f043 0302 	orr.w	r3, r3, #2
 800d6c4:	81a3      	strh	r3, [r4, #12]
 800d6c6:	e7e2      	b.n	800d68e <__smakebuf_r+0xc>
 800d6c8:	89a3      	ldrh	r3, [r4, #12]
 800d6ca:	6020      	str	r0, [r4, #0]
 800d6cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6d0:	81a3      	strh	r3, [r4, #12]
 800d6d2:	9b01      	ldr	r3, [sp, #4]
 800d6d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6d8:	b15b      	cbz	r3, 800d6f2 <__smakebuf_r+0x70>
 800d6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f000 f81e 	bl	800d720 <_isatty_r>
 800d6e4:	b128      	cbz	r0, 800d6f2 <__smakebuf_r+0x70>
 800d6e6:	89a3      	ldrh	r3, [r4, #12]
 800d6e8:	f023 0303 	bic.w	r3, r3, #3
 800d6ec:	f043 0301 	orr.w	r3, r3, #1
 800d6f0:	81a3      	strh	r3, [r4, #12]
 800d6f2:	89a3      	ldrh	r3, [r4, #12]
 800d6f4:	431d      	orrs	r5, r3
 800d6f6:	81a5      	strh	r5, [r4, #12]
 800d6f8:	e7cf      	b.n	800d69a <__smakebuf_r+0x18>
	...

0800d6fc <_fstat_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	2300      	movs	r3, #0
 800d700:	4d06      	ldr	r5, [pc, #24]	@ (800d71c <_fstat_r+0x20>)
 800d702:	4604      	mov	r4, r0
 800d704:	4608      	mov	r0, r1
 800d706:	4611      	mov	r1, r2
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	f7f4 fcdc 	bl	80020c6 <_fstat>
 800d70e:	1c43      	adds	r3, r0, #1
 800d710:	d102      	bne.n	800d718 <_fstat_r+0x1c>
 800d712:	682b      	ldr	r3, [r5, #0]
 800d714:	b103      	cbz	r3, 800d718 <_fstat_r+0x1c>
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	bd38      	pop	{r3, r4, r5, pc}
 800d71a:	bf00      	nop
 800d71c:	200006e0 	.word	0x200006e0

0800d720 <_isatty_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	2300      	movs	r3, #0
 800d724:	4d05      	ldr	r5, [pc, #20]	@ (800d73c <_isatty_r+0x1c>)
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	f7f4 fcdb 	bl	80020e6 <_isatty>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d102      	bne.n	800d73a <_isatty_r+0x1a>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	b103      	cbz	r3, 800d73a <_isatty_r+0x1a>
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	200006e0 	.word	0x200006e0

0800d740 <_sbrk_r>:
 800d740:	b538      	push	{r3, r4, r5, lr}
 800d742:	2300      	movs	r3, #0
 800d744:	4d05      	ldr	r5, [pc, #20]	@ (800d75c <_sbrk_r+0x1c>)
 800d746:	4604      	mov	r4, r0
 800d748:	4608      	mov	r0, r1
 800d74a:	602b      	str	r3, [r5, #0]
 800d74c:	f7f4 fce4 	bl	8002118 <_sbrk>
 800d750:	1c43      	adds	r3, r0, #1
 800d752:	d102      	bne.n	800d75a <_sbrk_r+0x1a>
 800d754:	682b      	ldr	r3, [r5, #0]
 800d756:	b103      	cbz	r3, 800d75a <_sbrk_r+0x1a>
 800d758:	6023      	str	r3, [r4, #0]
 800d75a:	bd38      	pop	{r3, r4, r5, pc}
 800d75c:	200006e0 	.word	0x200006e0

0800d760 <memchr>:
 800d760:	b2c9      	uxtb	r1, r1
 800d762:	4603      	mov	r3, r0
 800d764:	4402      	add	r2, r0
 800d766:	b510      	push	{r4, lr}
 800d768:	4293      	cmp	r3, r2
 800d76a:	4618      	mov	r0, r3
 800d76c:	d101      	bne.n	800d772 <memchr+0x12>
 800d76e:	2000      	movs	r0, #0
 800d770:	e003      	b.n	800d77a <memchr+0x1a>
 800d772:	7804      	ldrb	r4, [r0, #0]
 800d774:	3301      	adds	r3, #1
 800d776:	428c      	cmp	r4, r1
 800d778:	d1f6      	bne.n	800d768 <memchr+0x8>
 800d77a:	bd10      	pop	{r4, pc}

0800d77c <_init>:
 800d77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d77e:	bf00      	nop
 800d780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d782:	bc08      	pop	{r3}
 800d784:	469e      	mov	lr, r3
 800d786:	4770      	bx	lr

0800d788 <_fini>:
 800d788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78a:	bf00      	nop
 800d78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d78e:	bc08      	pop	{r3}
 800d790:	469e      	mov	lr, r3
 800d792:	4770      	bx	lr
