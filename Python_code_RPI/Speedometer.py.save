import socket
import struct
import pigpio
import can
import time
import threading
import serial

# UDP config
UDP_IP = "0.0.0.0"  # all addresses 
UDP_PORT = 4444     # UDP Port
UART_PORT = "/dev/ttyS0" # UART Port
UART_BAUDRATE = 9600 # UART Baudrate

try:
an.interface.Bus(channel='can0', bustype='socketcan')
    print("CAN Bus initialized successfully")
except Exception as e:
    print(f"CAN initialization error: {e}")
pi = pigpio.pi() #RPI gpio
if not pi.connected:
    print("cant connect with pigpio")
    exit()

try:
    ser = serial.Serial(UART_PORT, UART_BAUDRATE, timeout=1)
    print("UART initialized successfully")
except Exception as e:
    print(f"UART initialization error: {e}")


#pwm pim
PWM_PIN = 18  # GPIO 18 (PWM)
pi.set_mode(PWM_PIN, pigpio.ALT5)

#socket setting
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
sock.bind((UDP_IP, UDP_PORT))

print(f"listening {UDP_PORT}...")
#pi.set_PWM_dutycycle(PWM_PIN,125)
#pi.set_PWM_frequency(PWM_PIN, 0)

UART_FRAMES = {
    "TURN_RIGHT": bytes([0xD0, 0x07, 0xBF, 0x5B, 0x43, 0x83, 0x2E, 0x3F, 0xE2]),
    "TURN_LEFT": bytes([0xD0, 0x07, 0xBF, 0x5B, 0x23, 0x83, 0x0E, 0x3F, 0xA2]),
    "HAZARD": bytes([0xD0, 0x07, 0xBF, 0x5B, 0x63, 0x83, 0x0E, 0x3F, 0xE2]),
    "HIGH_BEAM": bytes([0xD0, 0x07, 0xBF, 0x5B, 0x07, 0x83, 0x0A, 0x3F, 0x82]),
    "STOP_TURNING": bytes([0xD0, 0x07, 0xBF, 0x5B, 0x03, 0x83, 0x0A, 0x3F, 0x86]),
    "LCD_OFF": bytes([0x30, 0x19, 0x80, 0x1A, 0x30, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x83, 0x80, 0x04, 0x30, 0x1B, 0x00, 0x8F])
}

frame_316 = can.Message(arbitration_id=0x316, data=[0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], is_extended_id=False)
# UDP struct format 
STRUCT_FORMAT = "I 4s H c c f f f f f f f I I f f f 16s 16s i"

# PWM Variables
min_pwm = 100
max_pwm = 1770
max_speed = 255
current_pwm = 0  # Aktualna warto≈õƒá PWM

def modify_frame_byte(frame, byte_number, value):
    if byte_number >= len(frame.data):
        print("Byte number out of range")
        return frame  
    
    frame.data[byte_number] = value
    return frame  

def update_pwm(speed_kmh):
    global current_pwm
    new_pwm = int((speed_kmh / max_speed) * (max_pwm - min_pwm) + min_pwm) if speed_kmh > 0 else min_pwm

    if new_pwm != current_pwm:  # Aktualizujemy tylko, je≈õli warto≈õƒá siƒô zmieni≈Ça
        pi.hardware_PWM(PWM_PIN, new_pwm, 500000)  # 50% duty cycle
        current_pwm = new_pwm
        print(f"Updated PWM: {new_pwm} Hz")

try:
    while True:
        start_time = time.monotonic()  # Start iteracji

        # Odbi√≥r UDP
        data, addr = sock.recvfrom(1024)
        if len(data) != struct.calcsize(STRUCT_FORMAT):
            print("Wrong package...")
            continue

        # Unpack UDP Data
        unpacked_data = struct.unpack(STRUCT_FORMAT, data)
        speed = unpacked_data[5]  
        rpm = unpacked_data[6]
        engTemp = unpacked_data[8]
        fuel = unpacked_data[9]
        show_lights = unpacked_data[13]

        # Dekodowanie ≈õwiate≈Ç
        DL_FULLBEAM = 2 ** 1  
        DL_TC = 2 ** 4
        DL_SIGNAL_L = 2 ** 5 
        DL_SIGNAL_R = 2 ** 6
        DL_OILWARN = 2 ** 8 
        DL_BATTERY = 2 ** 9 
        DL_ABS = 2 ** 10 

        # Konwersja warto≈õci
        speed_in_km_h = speed * 3.6
        fuel_percent = fuel * 100
        
        print(f"Speed: {speed_in_km_h:.2f} km/h")
        print(f"Fuel: {fuel_percent:.2f} %")
        print(f"Full Beam {'ON' if (show_lights & DL_FULLBEAM) else 'OFF'}")
        print(f"Traction Control {'ON' if (show_lights & DL_TC) else 'OFF'}")
        print(f"Left Turn {'ON' if (show_lights & DL_SIGNAL_L) else 'OFF'}")
        print(f"Right Turn {'ON' if (show_lights & DL_SIGNAL_R) else 'OFF'}")
        print(f"Oil Warning {'ON' if (show_lights & DL_OILWARN) else 'OFF'}")
        print(f"Battery Warning {'ON' if (show_lights & DL_BATTERY) else 'OFF'}")
        print(f"ABS {'ON' if (show_lights & DL_ABS) else 'OFF'}")

        # üîπ Uruchamiamy PWM w osobnym wƒÖtku
        threading.Thread(target=update_pwm, args=(speed_in_km_h,), daemon=True).start()

        # Wys≈Çanie CAN
        try:
            hexrpm = int(rpm/0.15625)
            lsb = hexrpm & 0xFF
            msb =(hexrpm >> 8) & 0xFF
            frame_316 = modify_frame_byte(frame_316, 2,lsb)
            frame_316 = modify_frame_byte(frame_316, 3,msb)
            bus.send(frame_316)
            print("CAN sent")
        except can.CanError:
            print("CAN sending error")

        if show_lights & DL_SIGNAL_L:
            ser.write(UART_FRAMES["TURN_LEFT"])
            print("UART: Turn Left Sent")
        elif show_lights & DL_SIGNAL_R:
            ser.write(UART_FRAMES["TURN_RIGHT"])
            print("UART: Turn Right Sent")
        elif show_lights & DL_SIGNAL_R & DL_SIGNAL_L:
            ser.write(UART_FRAMES["HAZARD"])
            print("UART: Hazard Lights Sent")
        elif show_lights & DL_FULLBEAM:
            ser.write(UART_FRAMES["HIGH_BEAM"])
            print("UART: High Beam Sent")
        else:
           # ser.write(UART_FRAMES["STOP_TURNING"])
            print("UART: Stop Turning Sent")
        # Synchronizacja do dok≈Çadnych 10 ms
        elapsed_time = time.monotonic() - start_time
        sleep_time = max(0.01 - elapsed_time, 0)
        time.sleep(sleep_time)
except KeyboardInterrupt:
    print("end...")
finally:
    pi.stop()
    sock.close()

